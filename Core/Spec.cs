// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spec.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gauge.Messages {

  /// <summary>Holder for reflection information generated from spec.proto</summary>
  public static partial class SpecReflection {

    #region Descriptor
    /// <summary>File descriptor for spec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpzcGVjLnByb3RvEg5nYXVnZS5tZXNzYWdlcyL2AQoJUHJvdG9TcGVjEhMK",
            "C3NwZWNIZWFkaW5nGAEgASgJEigKBWl0ZW1zGAIgAygLMhkuZ2F1Z2UubWVz",
            "c2FnZXMuUHJvdG9JdGVtEhUKDWlzVGFibGVEcml2ZW4YAyABKAgSOAoOcHJl",
            "SG9va0ZhaWx1cmUYBCABKAsyIC5nYXVnZS5tZXNzYWdlcy5Qcm90b0hvb2tG",
            "YWlsdXJlEjkKD3Bvc3RIb29rRmFpbHVyZRgFIAEoCzIgLmdhdWdlLm1lc3Nh",
            "Z2VzLlByb3RvSG9va0ZhaWx1cmUSEAoIZmlsZU5hbWUYBiABKAkSDAoEdGFn",
            "cxgHIAMoCSKABAoJUHJvdG9JdGVtEjQKCGl0ZW1UeXBlGAEgASgOMiIuZ2F1",
            "Z2UubWVzc2FnZXMuUHJvdG9JdGVtLkl0ZW1UeXBlEicKBHN0ZXAYAiABKAsy",
            "GS5nYXVnZS5tZXNzYWdlcy5Qcm90b1N0ZXASLQoHY29uY2VwdBgDIAEoCzIc",
            "LmdhdWdlLm1lc3NhZ2VzLlByb3RvQ29uY2VwdBIvCghzY2VuYXJpbxgEIAEo",
            "CzIdLmdhdWdlLm1lc3NhZ2VzLlByb3RvU2NlbmFyaW8SRQoTdGFibGVEcml2",
            "ZW5TY2VuYXJpbxgFIAEoCzIoLmdhdWdlLm1lc3NhZ2VzLlByb3RvVGFibGVE",
            "cml2ZW5TY2VuYXJpbxItCgdjb21tZW50GAYgASgLMhwuZ2F1Z2UubWVzc2Fn",
            "ZXMuUHJvdG9Db21tZW50EikKBXRhYmxlGAcgASgLMhouZ2F1Z2UubWVzc2Fn",
            "ZXMuUHJvdG9UYWJsZRInCgR0YWdzGAggASgLMhkuZ2F1Z2UubWVzc2FnZXMu",
            "UHJvdG9UYWdzImoKCEl0ZW1UeXBlEggKBFN0ZXAQABILCgdDb21tZW50EAES",
            "CwoHQ29uY2VwdBACEgwKCFNjZW5hcmlvEAMSFwoTVGFibGVEcml2ZW5TY2Vu",
            "YXJpbxAEEgkKBVRhYmxlEAUSCAoEVGFncxAGIvoDCg1Qcm90b1NjZW5hcmlv",
            "EhcKD3NjZW5hcmlvSGVhZGluZxgBIAEoCRISCgZmYWlsZWQYAiABKAhCAhgB",
            "EisKCGNvbnRleHRzGAMgAygLMhkuZ2F1Z2UubWVzc2FnZXMuUHJvdG9JdGVt",
            "EjAKDXNjZW5hcmlvSXRlbXMYBCADKAsyGS5nYXVnZS5tZXNzYWdlcy5Qcm90",
            "b0l0ZW0SOAoOcHJlSG9va0ZhaWx1cmUYBSABKAsyIC5nYXVnZS5tZXNzYWdl",
            "cy5Qcm90b0hvb2tGYWlsdXJlEjkKD3Bvc3RIb29rRmFpbHVyZRgGIAEoCzIg",
            "LmdhdWdlLm1lc3NhZ2VzLlByb3RvSG9va0ZhaWx1cmUSDAoEdGFncxgHIAMo",
            "CRIVCg1leGVjdXRpb25UaW1lGAggASgDEhMKB3NraXBwZWQYCSABKAhCAhgB",
            "EhIKCnNraXBFcnJvcnMYCiADKAkSCgoCSUQYCyABKAkSMAoNdGVhckRvd25T",
            "dGVwcxgMIAMoCzIZLmdhdWdlLm1lc3NhZ2VzLlByb3RvSXRlbRIiCgRzcGFu",
            "GA0gASgLMhQuZ2F1Z2UubWVzc2FnZXMuU3BhbhI4Cg9leGVjdXRpb25TdGF0",
            "dXMYDiABKA4yHy5nYXVnZS5tZXNzYWdlcy5FeGVjdXRpb25TdGF0dXMiIgoE",
            "U3BhbhINCgVzdGFydBgBIAEoAxILCgNlbmQYAiABKAMiYgoYUHJvdG9UYWJs",
            "ZURyaXZlblNjZW5hcmlvEi8KCHNjZW5hcmlvGAEgASgLMh0uZ2F1Z2UubWVz",
            "c2FnZXMuUHJvdG9TY2VuYXJpbxIVCg10YWJsZVJvd0luZGV4GAIgASgFIqcB",
            "CglQcm90b1N0ZXASEgoKYWN0dWFsVGV4dBgBIAEoCRISCgpwYXJzZWRUZXh0",
            "GAIgASgJEisKCWZyYWdtZW50cxgDIAMoCzIYLmdhdWdlLm1lc3NhZ2VzLkZy",
            "YWdtZW50EkUKE3N0ZXBFeGVjdXRpb25SZXN1bHQYBCABKAsyKC5nYXVnZS5t",
            "ZXNzYWdlcy5Qcm90b1N0ZXBFeGVjdXRpb25SZXN1bHQisgEKDFByb3RvQ29u",
            "Y2VwdBIuCgtjb25jZXB0U3RlcBgBIAEoCzIZLmdhdWdlLm1lc3NhZ2VzLlBy",
            "b3RvU3RlcBIoCgVzdGVwcxgCIAMoCzIZLmdhdWdlLm1lc3NhZ2VzLlByb3Rv",
            "SXRlbRJIChZjb25jZXB0RXhlY3V0aW9uUmVzdWx0GAMgASgLMiguZ2F1Z2Uu",
            "bWVzc2FnZXMuUHJvdG9TdGVwRXhlY3V0aW9uUmVzdWx0IhkKCVByb3RvVGFn",
            "cxIMCgR0YWdzGAEgAygJIqwBCghGcmFnbWVudBI7CgxmcmFnbWVudFR5cGUY",
            "ASABKA4yJS5nYXVnZS5tZXNzYWdlcy5GcmFnbWVudC5GcmFnbWVudFR5cGUS",
            "DAoEdGV4dBgCIAEoCRIsCglwYXJhbWV0ZXIYAyABKAsyGS5nYXVnZS5tZXNz",
            "YWdlcy5QYXJhbWV0ZXIiJwoMRnJhZ21lbnRUeXBlEggKBFRleHQQABINCglQ",
            "YXJhbWV0ZXIQASLvAQoJUGFyYW1ldGVyEj4KDXBhcmFtZXRlclR5cGUYASAB",
            "KA4yJy5nYXVnZS5tZXNzYWdlcy5QYXJhbWV0ZXIuUGFyYW1ldGVyVHlwZRIN",
            "CgV2YWx1ZRgCIAEoCRIMCgRuYW1lGAMgASgJEikKBXRhYmxlGAQgASgLMhou",
            "Z2F1Z2UubWVzc2FnZXMuUHJvdG9UYWJsZSJaCg1QYXJhbWV0ZXJUeXBlEgoK",
            "BlN0YXRpYxAAEgsKB0R5bmFtaWMQARISCg5TcGVjaWFsX1N0cmluZxACEhEK",
            "DVNwZWNpYWxfVGFibGUQAxIJCgVUYWJsZRAEIhwKDFByb3RvQ29tbWVudBIM",
            "CgR0ZXh0GAEgASgJImkKClByb3RvVGFibGUSLgoHaGVhZGVycxgBIAEoCzId",
            "LmdhdWdlLm1lc3NhZ2VzLlByb3RvVGFibGVSb3cSKwoEcm93cxgCIAMoCzId",
            "LmdhdWdlLm1lc3NhZ2VzLlByb3RvVGFibGVSb3ciHgoNUHJvdG9UYWJsZVJv",
            "dxINCgVjZWxscxgBIAMoCSL2AQoYUHJvdG9TdGVwRXhlY3V0aW9uUmVzdWx0",
            "Ej0KD2V4ZWN1dGlvblJlc3VsdBgBIAEoCzIkLmdhdWdlLm1lc3NhZ2VzLlBy",
            "b3RvRXhlY3V0aW9uUmVzdWx0EjgKDnByZUhvb2tGYWlsdXJlGAIgASgLMiAu",
            "Z2F1Z2UubWVzc2FnZXMuUHJvdG9Ib29rRmFpbHVyZRI5Cg9wb3N0SG9va0Zh",
            "aWx1cmUYAyABKAsyIC5nYXVnZS5tZXNzYWdlcy5Qcm90b0hvb2tGYWlsdXJl",
            "Eg8KB3NraXBwZWQYBCABKAgSFQoNc2tpcHBlZFJlYXNvbhgFIAEoCSKXAgoU",
            "UHJvdG9FeGVjdXRpb25SZXN1bHQSDgoGZmFpbGVkGAEgASgIEhgKEHJlY292",
            "ZXJhYmxlRXJyb3IYAiABKAgSFAoMZXJyb3JNZXNzYWdlGAMgASgJEhIKCnN0",
            "YWNrVHJhY2UYBCABKAkSEgoKc2NyZWVuU2hvdBgFIAEoDBIVCg1leGVjdXRp",
            "b25UaW1lGAYgASgDEg8KB21lc3NhZ2UYByADKAkSQQoJZXJyb3JUeXBlGAgg",
            "ASgOMi4uZ2F1Z2UubWVzc2FnZXMuUHJvdG9FeGVjdXRpb25SZXN1bHQuRXJy",
            "b3JUeXBlIiwKCUVycm9yVHlwZRINCglBU1NFUlRJT04QABIQCgxWRVJJRklD",
            "QVRJT04QASJQChBQcm90b0hvb2tGYWlsdXJlEhIKCnN0YWNrVHJhY2UYASAB",
            "KAkSFAoMZXJyb3JNZXNzYWdlGAIgASgJEhIKCnNjcmVlblNob3QYAyABKAwi",
            "+QIKEFByb3RvU3VpdGVSZXN1bHQSNAoLc3BlY1Jlc3VsdHMYASADKAsyHy5n",
            "YXVnZS5tZXNzYWdlcy5Qcm90b1NwZWNSZXN1bHQSOAoOcHJlSG9va0ZhaWx1",
            "cmUYAiABKAsyIC5nYXVnZS5tZXNzYWdlcy5Qcm90b0hvb2tGYWlsdXJlEjkK",
            "D3Bvc3RIb29rRmFpbHVyZRgDIAEoCzIgLmdhdWdlLm1lc3NhZ2VzLlByb3Rv",
            "SG9va0ZhaWx1cmUSDgoGZmFpbGVkGAQgASgIEhgKEHNwZWNzRmFpbGVkQ291",
            "bnQYBSABKAUSFQoNZXhlY3V0aW9uVGltZRgGIAEoAxITCgtzdWNjZXNzUmF0",
            "ZRgHIAEoAhITCgtlbnZpcm9ubWVudBgIIAEoCRIMCgR0YWdzGAkgASgJEhMK",
            "C3Byb2plY3ROYW1lGAogASgJEhEKCXRpbWVzdGFtcBgLIAEoCRIZChFzcGVj",
            "c1NraXBwZWRDb3VudBgMIAEoBSKEAgoPUHJvdG9TcGVjUmVzdWx0EiwKCXBy",
            "b3RvU3BlYxgBIAEoCzIZLmdhdWdlLm1lc3NhZ2VzLlByb3RvU3BlYxIVCg1z",
            "Y2VuYXJpb0NvdW50GAIgASgFEhsKE3NjZW5hcmlvRmFpbGVkQ291bnQYAyAB",
            "KAUSDgoGZmFpbGVkGAQgASgIEhsKE2ZhaWxlZERhdGFUYWJsZVJvd3MYBSAD",
            "KAUSFQoNZXhlY3V0aW9uVGltZRgGIAEoAxIPCgdza2lwcGVkGAcgASgIEhwK",
            "FHNjZW5hcmlvU2tpcHBlZENvdW50GAkgASgFEhwKFHNraXBwZWREYXRhVGFi",
            "bGVSb3dzGAogAygFIlcKDlByb3RvU3RlcFZhbHVlEhEKCXN0ZXBWYWx1ZRgB",
            "IAEoCRIeChZwYXJhbWV0ZXJpemVkU3RlcFZhbHVlGAIgASgJEhIKCnBhcmFt",
            "ZXRlcnMYAyADKAkqRwoPRXhlY3V0aW9uU3RhdHVzEg8KC05PVEVYRUNVVEVE",
            "EAASCgoGUEFTU0VEEAESCgoGRkFJTEVEEAISCwoHU0tJUFBFRBADQhGqAg5H",
            "YXVnZS5NZXNzYWdlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Gauge.Messages.ExecutionStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoSpec), global::Gauge.Messages.ProtoSpec.Parser, new[]{ "SpecHeading", "Items", "IsTableDriven", "PreHookFailure", "PostHookFailure", "FileName", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoItem), global::Gauge.Messages.ProtoItem.Parser, new[]{ "ItemType", "Step", "Concept", "Scenario", "TableDrivenScenario", "Comment", "Table", "Tags" }, null, new[]{ typeof(global::Gauge.Messages.ProtoItem.Types.ItemType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoScenario), global::Gauge.Messages.ProtoScenario.Parser, new[]{ "ScenarioHeading", "Failed", "Contexts", "ScenarioItems", "PreHookFailure", "PostHookFailure", "Tags", "ExecutionTime", "Skipped", "SkipErrors", "ID", "TearDownSteps", "Span", "ExecutionStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.Span), global::Gauge.Messages.Span.Parser, new[]{ "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoTableDrivenScenario), global::Gauge.Messages.ProtoTableDrivenScenario.Parser, new[]{ "Scenario", "TableRowIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoStep), global::Gauge.Messages.ProtoStep.Parser, new[]{ "ActualText", "ParsedText", "Fragments", "StepExecutionResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoConcept), global::Gauge.Messages.ProtoConcept.Parser, new[]{ "ConceptStep", "Steps", "ConceptExecutionResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoTags), global::Gauge.Messages.ProtoTags.Parser, new[]{ "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.Fragment), global::Gauge.Messages.Fragment.Parser, new[]{ "FragmentType", "Text", "Parameter" }, null, new[]{ typeof(global::Gauge.Messages.Fragment.Types.FragmentType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.Parameter), global::Gauge.Messages.Parameter.Parser, new[]{ "ParameterType", "Value", "Name", "Table" }, null, new[]{ typeof(global::Gauge.Messages.Parameter.Types.ParameterType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoComment), global::Gauge.Messages.ProtoComment.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoTable), global::Gauge.Messages.ProtoTable.Parser, new[]{ "Headers", "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoTableRow), global::Gauge.Messages.ProtoTableRow.Parser, new[]{ "Cells" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoStepExecutionResult), global::Gauge.Messages.ProtoStepExecutionResult.Parser, new[]{ "ExecutionResult", "PreHookFailure", "PostHookFailure", "Skipped", "SkippedReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoExecutionResult), global::Gauge.Messages.ProtoExecutionResult.Parser, new[]{ "Failed", "RecoverableError", "ErrorMessage", "StackTrace", "ScreenShot", "ExecutionTime", "Message", "ErrorType" }, null, new[]{ typeof(global::Gauge.Messages.ProtoExecutionResult.Types.ErrorType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoHookFailure), global::Gauge.Messages.ProtoHookFailure.Parser, new[]{ "StackTrace", "ErrorMessage", "ScreenShot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoSuiteResult), global::Gauge.Messages.ProtoSuiteResult.Parser, new[]{ "SpecResults", "PreHookFailure", "PostHookFailure", "Failed", "SpecsFailedCount", "ExecutionTime", "SuccessRate", "Environment", "Tags", "ProjectName", "Timestamp", "SpecsSkippedCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoSpecResult), global::Gauge.Messages.ProtoSpecResult.Parser, new[]{ "ProtoSpec", "ScenarioCount", "ScenarioFailedCount", "Failed", "FailedDataTableRows", "ExecutionTime", "Skipped", "ScenarioSkippedCount", "SkippedDataTableRows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ProtoStepValue), global::Gauge.Messages.ProtoStepValue.Parser, new[]{ "StepValue", "ParameterizedStepValue", "Parameters" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// / Execution Status
  /// </summary>
  public enum ExecutionStatus {
    [pbr::OriginalName("NOTEXECUTED")] Notexecuted = 0,
    [pbr::OriginalName("PASSED")] Passed = 1,
    [pbr::OriginalName("FAILED")] Failed = 2,
    [pbr::OriginalName("SKIPPED")] Skipped = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// / A proto object representing a Specification
  /// / A specification can contain Scenarios or Steps, besides Comments
  /// </summary>
  public sealed partial class ProtoSpec : pb::IMessage<ProtoSpec> {
    private static readonly pb::MessageParser<ProtoSpec> _parser = new pb::MessageParser<ProtoSpec>(() => new ProtoSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSpec(ProtoSpec other) : this() {
      specHeading_ = other.specHeading_;
      items_ = other.items_.Clone();
      isTableDriven_ = other.isTableDriven_;
      PreHookFailure = other.preHookFailure_ != null ? other.PreHookFailure.Clone() : null;
      PostHookFailure = other.postHookFailure_ != null ? other.PostHookFailure.Clone() : null;
      fileName_ = other.fileName_;
      tags_ = other.tags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSpec Clone() {
      return new ProtoSpec(this);
    }

    /// <summary>Field number for the "specHeading" field.</summary>
    public const int SpecHeadingFieldNumber = 1;
    private string specHeading_ = "";
    /// <summary>
    /// / Heading describing the Specification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecHeading {
      get { return specHeading_; }
      set {
        specHeading_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Gauge.Messages.ProtoItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Gauge.Messages.ProtoItem.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.ProtoItem> items_ = new pbc::RepeatedField<global::Gauge.Messages.ProtoItem>();
    /// <summary>
    /// / A collection of items that come under this step
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.ProtoItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "isTableDriven" field.</summary>
    public const int IsTableDrivenFieldNumber = 3;
    private bool isTableDriven_;
    /// <summary>
    /// / Flag indicating if this is a Table Driven Specification. The table is defined in the context, this is different from using a table parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTableDriven {
      get { return isTableDriven_; }
      set {
        isTableDriven_ = value;
      }
    }

    /// <summary>Field number for the "preHookFailure" field.</summary>
    public const int PreHookFailureFieldNumber = 4;
    private global::Gauge.Messages.ProtoHookFailure preHookFailure_;
    /// <summary>
    /// / Contains a 'before' hook failure message. This happens when the `before_spec` hook has an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoHookFailure PreHookFailure {
      get { return preHookFailure_; }
      set {
        preHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "postHookFailure" field.</summary>
    public const int PostHookFailureFieldNumber = 5;
    private global::Gauge.Messages.ProtoHookFailure postHookFailure_;
    /// <summary>
    /// / Contains a 'before' hook failure message. This happens when the `after_hook` hook has an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoHookFailure PostHookFailure {
      get { return postHookFailure_; }
      set {
        postHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 6;
    private string fileName_ = "";
    /// <summary>
    /// / Contains the filename for that holds this specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / Contains a list of tags that are defined at the specification level. Scenario tags are not present here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpecHeading != other.SpecHeading) return false;
      if(!items_.Equals(other.items_)) return false;
      if (IsTableDriven != other.IsTableDriven) return false;
      if (!object.Equals(PreHookFailure, other.PreHookFailure)) return false;
      if (!object.Equals(PostHookFailure, other.PostHookFailure)) return false;
      if (FileName != other.FileName) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpecHeading.Length != 0) hash ^= SpecHeading.GetHashCode();
      hash ^= items_.GetHashCode();
      if (IsTableDriven != false) hash ^= IsTableDriven.GetHashCode();
      if (preHookFailure_ != null) hash ^= PreHookFailure.GetHashCode();
      if (postHookFailure_ != null) hash ^= PostHookFailure.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      hash ^= tags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpecHeading.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SpecHeading);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (IsTableDriven != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTableDriven);
      }
      if (preHookFailure_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PreHookFailure);
      }
      if (postHookFailure_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PostHookFailure);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FileName);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpecHeading.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpecHeading);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (IsTableDriven != false) {
        size += 1 + 1;
      }
      if (preHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreHookFailure);
      }
      if (postHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PostHookFailure);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoSpec other) {
      if (other == null) {
        return;
      }
      if (other.SpecHeading.Length != 0) {
        SpecHeading = other.SpecHeading;
      }
      items_.Add(other.items_);
      if (other.IsTableDriven != false) {
        IsTableDriven = other.IsTableDriven;
      }
      if (other.preHookFailure_ != null) {
        if (preHookFailure_ == null) {
          preHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
        }
        PreHookFailure.MergeFrom(other.PreHookFailure);
      }
      if (other.postHookFailure_ != null) {
        if (postHookFailure_ == null) {
          postHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
        }
        PostHookFailure.MergeFrom(other.PostHookFailure);
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      tags_.Add(other.tags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SpecHeading = input.ReadString();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 24: {
            IsTableDriven = input.ReadBool();
            break;
          }
          case 34: {
            if (preHookFailure_ == null) {
              preHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
            }
            input.ReadMessage(preHookFailure_);
            break;
          }
          case 42: {
            if (postHookFailure_ == null) {
              postHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
            }
            input.ReadMessage(postHookFailure_);
            break;
          }
          case 50: {
            FileName = input.ReadString();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / Container for all valid Items under a Specification.
  /// </summary>
  public sealed partial class ProtoItem : pb::IMessage<ProtoItem> {
    private static readonly pb::MessageParser<ProtoItem> _parser = new pb::MessageParser<ProtoItem>(() => new ProtoItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoItem(ProtoItem other) : this() {
      itemType_ = other.itemType_;
      Step = other.step_ != null ? other.Step.Clone() : null;
      Concept = other.concept_ != null ? other.Concept.Clone() : null;
      Scenario = other.scenario_ != null ? other.Scenario.Clone() : null;
      TableDrivenScenario = other.tableDrivenScenario_ != null ? other.TableDrivenScenario.Clone() : null;
      Comment = other.comment_ != null ? other.Comment.Clone() : null;
      Table = other.table_ != null ? other.Table.Clone() : null;
      Tags = other.tags_ != null ? other.Tags.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoItem Clone() {
      return new ProtoItem(this);
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 1;
    private global::Gauge.Messages.ProtoItem.Types.ItemType itemType_ = 0;
    /// <summary>
    /// / Itemtype of the current ProtoItem
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoItem.Types.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 2;
    private global::Gauge.Messages.ProtoStep step_;
    /// <summary>
    /// / Holds the Step definition. Valid only if ItemType = Step
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoStep Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "concept" field.</summary>
    public const int ConceptFieldNumber = 3;
    private global::Gauge.Messages.ProtoConcept concept_;
    /// <summary>
    /// / Holds the Concept definition. Valid only if ItemType = Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoConcept Concept {
      get { return concept_; }
      set {
        concept_ = value;
      }
    }

    /// <summary>Field number for the "scenario" field.</summary>
    public const int ScenarioFieldNumber = 4;
    private global::Gauge.Messages.ProtoScenario scenario_;
    /// <summary>
    /// / Holds the Scenario definition. Valid only if ItemType = Scenario
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoScenario Scenario {
      get { return scenario_; }
      set {
        scenario_ = value;
      }
    }

    /// <summary>Field number for the "tableDrivenScenario" field.</summary>
    public const int TableDrivenScenarioFieldNumber = 5;
    private global::Gauge.Messages.ProtoTableDrivenScenario tableDrivenScenario_;
    /// <summary>
    /// / Holds the TableDrivenScenario definition. Valid only if ItemType = TableDrivenScenario
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoTableDrivenScenario TableDrivenScenario {
      get { return tableDrivenScenario_; }
      set {
        tableDrivenScenario_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 6;
    private global::Gauge.Messages.ProtoComment comment_;
    /// <summary>
    /// / Holds the Comment definition. Valid only if ItemType = Comment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoComment Comment {
      get { return comment_; }
      set {
        comment_ = value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 7;
    private global::Gauge.Messages.ProtoTable table_;
    /// <summary>
    /// / Holds the Table definition. Valid only if ItemType = Table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoTable Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 8;
    private global::Gauge.Messages.ProtoTags tags_;
    /// <summary>
    /// / Holds the Tags definition. Valid only if ItemType = Tags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoTags Tags {
      get { return tags_; }
      set {
        tags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemType != other.ItemType) return false;
      if (!object.Equals(Step, other.Step)) return false;
      if (!object.Equals(Concept, other.Concept)) return false;
      if (!object.Equals(Scenario, other.Scenario)) return false;
      if (!object.Equals(TableDrivenScenario, other.TableDrivenScenario)) return false;
      if (!object.Equals(Comment, other.Comment)) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if (!object.Equals(Tags, other.Tags)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (step_ != null) hash ^= Step.GetHashCode();
      if (concept_ != null) hash ^= Concept.GetHashCode();
      if (scenario_ != null) hash ^= Scenario.GetHashCode();
      if (tableDrivenScenario_ != null) hash ^= TableDrivenScenario.GetHashCode();
      if (comment_ != null) hash ^= Comment.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      if (tags_ != null) hash ^= Tags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemType);
      }
      if (step_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Step);
      }
      if (concept_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Concept);
      }
      if (scenario_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scenario);
      }
      if (tableDrivenScenario_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TableDrivenScenario);
      }
      if (comment_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Comment);
      }
      if (table_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Table);
      }
      if (tags_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Tags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      if (step_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Step);
      }
      if (concept_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Concept);
      }
      if (scenario_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scenario);
      }
      if (tableDrivenScenario_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDrivenScenario);
      }
      if (comment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Comment);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      if (tags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.step_ != null) {
        if (step_ == null) {
          step_ = new global::Gauge.Messages.ProtoStep();
        }
        Step.MergeFrom(other.Step);
      }
      if (other.concept_ != null) {
        if (concept_ == null) {
          concept_ = new global::Gauge.Messages.ProtoConcept();
        }
        Concept.MergeFrom(other.Concept);
      }
      if (other.scenario_ != null) {
        if (scenario_ == null) {
          scenario_ = new global::Gauge.Messages.ProtoScenario();
        }
        Scenario.MergeFrom(other.Scenario);
      }
      if (other.tableDrivenScenario_ != null) {
        if (tableDrivenScenario_ == null) {
          tableDrivenScenario_ = new global::Gauge.Messages.ProtoTableDrivenScenario();
        }
        TableDrivenScenario.MergeFrom(other.TableDrivenScenario);
      }
      if (other.comment_ != null) {
        if (comment_ == null) {
          comment_ = new global::Gauge.Messages.ProtoComment();
        }
        Comment.MergeFrom(other.Comment);
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::Gauge.Messages.ProtoTable();
        }
        Table.MergeFrom(other.Table);
      }
      if (other.tags_ != null) {
        if (tags_ == null) {
          tags_ = new global::Gauge.Messages.ProtoTags();
        }
        Tags.MergeFrom(other.Tags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemType_ = (global::Gauge.Messages.ProtoItem.Types.ItemType) input.ReadEnum();
            break;
          }
          case 18: {
            if (step_ == null) {
              step_ = new global::Gauge.Messages.ProtoStep();
            }
            input.ReadMessage(step_);
            break;
          }
          case 26: {
            if (concept_ == null) {
              concept_ = new global::Gauge.Messages.ProtoConcept();
            }
            input.ReadMessage(concept_);
            break;
          }
          case 34: {
            if (scenario_ == null) {
              scenario_ = new global::Gauge.Messages.ProtoScenario();
            }
            input.ReadMessage(scenario_);
            break;
          }
          case 42: {
            if (tableDrivenScenario_ == null) {
              tableDrivenScenario_ = new global::Gauge.Messages.ProtoTableDrivenScenario();
            }
            input.ReadMessage(tableDrivenScenario_);
            break;
          }
          case 50: {
            if (comment_ == null) {
              comment_ = new global::Gauge.Messages.ProtoComment();
            }
            input.ReadMessage(comment_);
            break;
          }
          case 58: {
            if (table_ == null) {
              table_ = new global::Gauge.Messages.ProtoTable();
            }
            input.ReadMessage(table_);
            break;
          }
          case 66: {
            if (tags_ == null) {
              tags_ = new global::Gauge.Messages.ProtoTags();
            }
            input.ReadMessage(tags_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ProtoItem message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// / Enumerates various item types that the proto item can contain. Valid types are: Step, Comment, Concept, Scenario, TableDrivenScenario, Table, Tags
      /// </summary>
      public enum ItemType {
        /// <summary>
        ///  Item is a Step
        /// </summary>
        [pbr::OriginalName("Step")] Step = 0,
        /// <summary>
        ///  Item is a Comment
        /// </summary>
        [pbr::OriginalName("Comment")] Comment = 1,
        /// <summary>
        ///  Item is a Concept
        /// </summary>
        [pbr::OriginalName("Concept")] Concept = 2,
        /// <summary>
        ///  Item is a Scenario
        /// </summary>
        [pbr::OriginalName("Scenario")] Scenario = 3,
        /// <summary>
        ///  Item is a TableDrivenScenario, a special case of Scenario, where there is a Context Step defining a table.
        /// </summary>
        [pbr::OriginalName("TableDrivenScenario")] TableDrivenScenario = 4,
        /// <summary>
        ///  Item is a Table
        /// </summary>
        [pbr::OriginalName("Table")] Table = 5,
        /// <summary>
        ///  Item is a Tag
        /// </summary>
        [pbr::OriginalName("Tags")] Tags = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// / A proto object representing a Scenario
  /// </summary>
  public sealed partial class ProtoScenario : pb::IMessage<ProtoScenario> {
    private static readonly pb::MessageParser<ProtoScenario> _parser = new pb::MessageParser<ProtoScenario>(() => new ProtoScenario());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoScenario> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoScenario() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoScenario(ProtoScenario other) : this() {
      scenarioHeading_ = other.scenarioHeading_;
      failed_ = other.failed_;
      contexts_ = other.contexts_.Clone();
      scenarioItems_ = other.scenarioItems_.Clone();
      PreHookFailure = other.preHookFailure_ != null ? other.PreHookFailure.Clone() : null;
      PostHookFailure = other.postHookFailure_ != null ? other.PostHookFailure.Clone() : null;
      tags_ = other.tags_.Clone();
      executionTime_ = other.executionTime_;
      skipped_ = other.skipped_;
      skipErrors_ = other.skipErrors_.Clone();
      iD_ = other.iD_;
      tearDownSteps_ = other.tearDownSteps_.Clone();
      Span = other.span_ != null ? other.Span.Clone() : null;
      executionStatus_ = other.executionStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoScenario Clone() {
      return new ProtoScenario(this);
    }

    /// <summary>Field number for the "scenarioHeading" field.</summary>
    public const int ScenarioHeadingFieldNumber = 1;
    private string scenarioHeading_ = "";
    /// <summary>
    /// / Heading of the given Scenario
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScenarioHeading {
      get { return scenarioHeading_; }
      set {
        scenarioHeading_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "failed" field.</summary>
    public const int FailedFieldNumber = 2;
    private bool failed_;
    /// <summary>
    /// / Flag to indicate if the Scenario execution failed
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Failed {
      get { return failed_; }
      set {
        failed_ = value;
      }
    }

    /// <summary>Field number for the "contexts" field.</summary>
    public const int ContextsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Gauge.Messages.ProtoItem> _repeated_contexts_codec
        = pb::FieldCodec.ForMessage(26, global::Gauge.Messages.ProtoItem.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.ProtoItem> contexts_ = new pbc::RepeatedField<global::Gauge.Messages.ProtoItem>();
    /// <summary>
    /// / Collection of Context steps. The Context steps are executed before every run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.ProtoItem> Contexts {
      get { return contexts_; }
    }

    /// <summary>Field number for the "scenarioItems" field.</summary>
    public const int ScenarioItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Gauge.Messages.ProtoItem> _repeated_scenarioItems_codec
        = pb::FieldCodec.ForMessage(34, global::Gauge.Messages.ProtoItem.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.ProtoItem> scenarioItems_ = new pbc::RepeatedField<global::Gauge.Messages.ProtoItem>();
    /// <summary>
    /// / Collection of Items under a scenario. These could be Steps, Comments, Tags, TableDrivenScenarios or Tables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.ProtoItem> ScenarioItems {
      get { return scenarioItems_; }
    }

    /// <summary>Field number for the "preHookFailure" field.</summary>
    public const int PreHookFailureFieldNumber = 5;
    private global::Gauge.Messages.ProtoHookFailure preHookFailure_;
    /// <summary>
    /// / Contains a 'before' hook failure message. This happens when the `before_scenario` hook has an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoHookFailure PreHookFailure {
      get { return preHookFailure_; }
      set {
        preHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "postHookFailure" field.</summary>
    public const int PostHookFailureFieldNumber = 6;
    private global::Gauge.Messages.ProtoHookFailure postHookFailure_;
    /// <summary>
    /// / Contains a 'after' hook failure message. This happens when the `after_scenario` hook has an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoHookFailure PostHookFailure {
      get { return postHookFailure_; }
      set {
        postHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / Contains a list of tags that are defined at the specification level. Scenario tags are not present here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "executionTime" field.</summary>
    public const int ExecutionTimeFieldNumber = 8;
    private long executionTime_;
    /// <summary>
    /// / Holds the time taken for executing this scenario.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutionTime {
      get { return executionTime_; }
      set {
        executionTime_ = value;
      }
    }

    /// <summary>Field number for the "skipped" field.</summary>
    public const int SkippedFieldNumber = 9;
    private bool skipped_;
    /// <summary>
    /// / Flag to indicate if the Scenario execution is skipped
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skipped {
      get { return skipped_; }
      set {
        skipped_ = value;
      }
    }

    /// <summary>Field number for the "skipErrors" field.</summary>
    public const int SkipErrorsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_skipErrors_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> skipErrors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / Holds the error messages for skipping scenario from execution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SkipErrors {
      get { return skipErrors_; }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 11;
    private string iD_ = "";
    /// <summary>
    /// / Holds the unique Identifier of a scenario.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tearDownSteps" field.</summary>
    public const int TearDownStepsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Gauge.Messages.ProtoItem> _repeated_tearDownSteps_codec
        = pb::FieldCodec.ForMessage(98, global::Gauge.Messages.ProtoItem.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.ProtoItem> tearDownSteps_ = new pbc::RepeatedField<global::Gauge.Messages.ProtoItem>();
    /// <summary>
    /// / Collection of Teardown steps. The Teardown steps are executed after every run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.ProtoItem> TearDownSteps {
      get { return tearDownSteps_; }
    }

    /// <summary>Field number for the "span" field.</summary>
    public const int SpanFieldNumber = 13;
    private global::Gauge.Messages.Span span_;
    /// <summary>
    /// / Span(start, end) of scenario
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.Span Span {
      get { return span_; }
      set {
        span_ = value;
      }
    }

    /// <summary>Field number for the "executionStatus" field.</summary>
    public const int ExecutionStatusFieldNumber = 14;
    private global::Gauge.Messages.ExecutionStatus executionStatus_ = 0;
    /// <summary>
    /// / Execution status for the scenario
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ExecutionStatus ExecutionStatus {
      get { return executionStatus_; }
      set {
        executionStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoScenario);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoScenario other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScenarioHeading != other.ScenarioHeading) return false;
      if (Failed != other.Failed) return false;
      if(!contexts_.Equals(other.contexts_)) return false;
      if(!scenarioItems_.Equals(other.scenarioItems_)) return false;
      if (!object.Equals(PreHookFailure, other.PreHookFailure)) return false;
      if (!object.Equals(PostHookFailure, other.PostHookFailure)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (ExecutionTime != other.ExecutionTime) return false;
      if (Skipped != other.Skipped) return false;
      if(!skipErrors_.Equals(other.skipErrors_)) return false;
      if (ID != other.ID) return false;
      if(!tearDownSteps_.Equals(other.tearDownSteps_)) return false;
      if (!object.Equals(Span, other.Span)) return false;
      if (ExecutionStatus != other.ExecutionStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScenarioHeading.Length != 0) hash ^= ScenarioHeading.GetHashCode();
      if (Failed != false) hash ^= Failed.GetHashCode();
      hash ^= contexts_.GetHashCode();
      hash ^= scenarioItems_.GetHashCode();
      if (preHookFailure_ != null) hash ^= PreHookFailure.GetHashCode();
      if (postHookFailure_ != null) hash ^= PostHookFailure.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (ExecutionTime != 0L) hash ^= ExecutionTime.GetHashCode();
      if (Skipped != false) hash ^= Skipped.GetHashCode();
      hash ^= skipErrors_.GetHashCode();
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      hash ^= tearDownSteps_.GetHashCode();
      if (span_ != null) hash ^= Span.GetHashCode();
      if (ExecutionStatus != 0) hash ^= ExecutionStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScenarioHeading.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScenarioHeading);
      }
      if (Failed != false) {
        output.WriteRawTag(16);
        output.WriteBool(Failed);
      }
      contexts_.WriteTo(output, _repeated_contexts_codec);
      scenarioItems_.WriteTo(output, _repeated_scenarioItems_codec);
      if (preHookFailure_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PreHookFailure);
      }
      if (postHookFailure_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PostHookFailure);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (ExecutionTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ExecutionTime);
      }
      if (Skipped != false) {
        output.WriteRawTag(72);
        output.WriteBool(Skipped);
      }
      skipErrors_.WriteTo(output, _repeated_skipErrors_codec);
      if (ID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ID);
      }
      tearDownSteps_.WriteTo(output, _repeated_tearDownSteps_codec);
      if (span_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Span);
      }
      if (ExecutionStatus != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ExecutionStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScenarioHeading.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScenarioHeading);
      }
      if (Failed != false) {
        size += 1 + 1;
      }
      size += contexts_.CalculateSize(_repeated_contexts_codec);
      size += scenarioItems_.CalculateSize(_repeated_scenarioItems_codec);
      if (preHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreHookFailure);
      }
      if (postHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PostHookFailure);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (ExecutionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTime);
      }
      if (Skipped != false) {
        size += 1 + 1;
      }
      size += skipErrors_.CalculateSize(_repeated_skipErrors_codec);
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      size += tearDownSteps_.CalculateSize(_repeated_tearDownSteps_codec);
      if (span_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Span);
      }
      if (ExecutionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExecutionStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoScenario other) {
      if (other == null) {
        return;
      }
      if (other.ScenarioHeading.Length != 0) {
        ScenarioHeading = other.ScenarioHeading;
      }
      if (other.Failed != false) {
        Failed = other.Failed;
      }
      contexts_.Add(other.contexts_);
      scenarioItems_.Add(other.scenarioItems_);
      if (other.preHookFailure_ != null) {
        if (preHookFailure_ == null) {
          preHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
        }
        PreHookFailure.MergeFrom(other.PreHookFailure);
      }
      if (other.postHookFailure_ != null) {
        if (postHookFailure_ == null) {
          postHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
        }
        PostHookFailure.MergeFrom(other.PostHookFailure);
      }
      tags_.Add(other.tags_);
      if (other.ExecutionTime != 0L) {
        ExecutionTime = other.ExecutionTime;
      }
      if (other.Skipped != false) {
        Skipped = other.Skipped;
      }
      skipErrors_.Add(other.skipErrors_);
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      tearDownSteps_.Add(other.tearDownSteps_);
      if (other.span_ != null) {
        if (span_ == null) {
          span_ = new global::Gauge.Messages.Span();
        }
        Span.MergeFrom(other.Span);
      }
      if (other.ExecutionStatus != 0) {
        ExecutionStatus = other.ExecutionStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScenarioHeading = input.ReadString();
            break;
          }
          case 16: {
            Failed = input.ReadBool();
            break;
          }
          case 26: {
            contexts_.AddEntriesFrom(input, _repeated_contexts_codec);
            break;
          }
          case 34: {
            scenarioItems_.AddEntriesFrom(input, _repeated_scenarioItems_codec);
            break;
          }
          case 42: {
            if (preHookFailure_ == null) {
              preHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
            }
            input.ReadMessage(preHookFailure_);
            break;
          }
          case 50: {
            if (postHookFailure_ == null) {
              postHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
            }
            input.ReadMessage(postHookFailure_);
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 64: {
            ExecutionTime = input.ReadInt64();
            break;
          }
          case 72: {
            Skipped = input.ReadBool();
            break;
          }
          case 82: {
            skipErrors_.AddEntriesFrom(input, _repeated_skipErrors_codec);
            break;
          }
          case 90: {
            ID = input.ReadString();
            break;
          }
          case 98: {
            tearDownSteps_.AddEntriesFrom(input, _repeated_tearDownSteps_codec);
            break;
          }
          case 106: {
            if (span_ == null) {
              span_ = new global::Gauge.Messages.Span();
            }
            input.ReadMessage(span_);
            break;
          }
          case 112: {
            executionStatus_ = (global::Gauge.Messages.ExecutionStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing a Span of content
  /// </summary>
  public sealed partial class Span : pb::IMessage<Span> {
    private static readonly pb::MessageParser<Span> _parser = new pb::MessageParser<Span>(() => new Span());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Span> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span(Span other) : this() {
      start_ = other.start_;
      end_ = other.end_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span Clone() {
      return new Span(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private long start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private long end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Span);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Span other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Span other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt64();
            break;
          }
          case 16: {
            End = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing a TableDrivenScenario
  /// </summary>
  public sealed partial class ProtoTableDrivenScenario : pb::IMessage<ProtoTableDrivenScenario> {
    private static readonly pb::MessageParser<ProtoTableDrivenScenario> _parser = new pb::MessageParser<ProtoTableDrivenScenario>(() => new ProtoTableDrivenScenario());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoTableDrivenScenario> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTableDrivenScenario() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTableDrivenScenario(ProtoTableDrivenScenario other) : this() {
      Scenario = other.scenario_ != null ? other.Scenario.Clone() : null;
      tableRowIndex_ = other.tableRowIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTableDrivenScenario Clone() {
      return new ProtoTableDrivenScenario(this);
    }

    /// <summary>Field number for the "scenario" field.</summary>
    public const int ScenarioFieldNumber = 1;
    private global::Gauge.Messages.ProtoScenario scenario_;
    /// <summary>
    /// / Scenario under Table driven execution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoScenario Scenario {
      get { return scenario_; }
      set {
        scenario_ = value;
      }
    }

    /// <summary>Field number for the "tableRowIndex" field.</summary>
    public const int TableRowIndexFieldNumber = 2;
    private int tableRowIndex_;
    /// <summary>
    /// / Row Index of data table against which the current scenario is executed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableRowIndex {
      get { return tableRowIndex_; }
      set {
        tableRowIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoTableDrivenScenario);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoTableDrivenScenario other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scenario, other.Scenario)) return false;
      if (TableRowIndex != other.TableRowIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scenario_ != null) hash ^= Scenario.GetHashCode();
      if (TableRowIndex != 0) hash ^= TableRowIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scenario_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scenario);
      }
      if (TableRowIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableRowIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scenario_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scenario);
      }
      if (TableRowIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableRowIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoTableDrivenScenario other) {
      if (other == null) {
        return;
      }
      if (other.scenario_ != null) {
        if (scenario_ == null) {
          scenario_ = new global::Gauge.Messages.ProtoScenario();
        }
        Scenario.MergeFrom(other.Scenario);
      }
      if (other.TableRowIndex != 0) {
        TableRowIndex = other.TableRowIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scenario_ == null) {
              scenario_ = new global::Gauge.Messages.ProtoScenario();
            }
            input.ReadMessage(scenario_);
            break;
          }
          case 16: {
            TableRowIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing a Step
  /// </summary>
  public sealed partial class ProtoStep : pb::IMessage<ProtoStep> {
    private static readonly pb::MessageParser<ProtoStep> _parser = new pb::MessageParser<ProtoStep>(() => new ProtoStep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStep(ProtoStep other) : this() {
      actualText_ = other.actualText_;
      parsedText_ = other.parsedText_;
      fragments_ = other.fragments_.Clone();
      StepExecutionResult = other.stepExecutionResult_ != null ? other.StepExecutionResult.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStep Clone() {
      return new ProtoStep(this);
    }

    /// <summary>Field number for the "actualText" field.</summary>
    public const int ActualTextFieldNumber = 1;
    private string actualText_ = "";
    /// <summary>
    /// / Holds the raw text of the Step as defined in the spec file. This contains the actual parameter values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActualText {
      get { return actualText_; }
      set {
        actualText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parsedText" field.</summary>
    public const int ParsedTextFieldNumber = 2;
    private string parsedText_ = "";
    /// <summary>
    /// / Contains the parsed text of the Step. This will have placeholders for the parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParsedText {
      get { return parsedText_; }
      set {
        parsedText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fragments" field.</summary>
    public const int FragmentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Gauge.Messages.Fragment> _repeated_fragments_codec
        = pb::FieldCodec.ForMessage(26, global::Gauge.Messages.Fragment.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.Fragment> fragments_ = new pbc::RepeatedField<global::Gauge.Messages.Fragment>();
    /// <summary>
    /// / Collection of a list of fragments for a Step. A fragment could be either text or parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.Fragment> Fragments {
      get { return fragments_; }
    }

    /// <summary>Field number for the "stepExecutionResult" field.</summary>
    public const int StepExecutionResultFieldNumber = 4;
    private global::Gauge.Messages.ProtoStepExecutionResult stepExecutionResult_;
    /// <summary>
    /// / Holds the result from the execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoStepExecutionResult StepExecutionResult {
      get { return stepExecutionResult_; }
      set {
        stepExecutionResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActualText != other.ActualText) return false;
      if (ParsedText != other.ParsedText) return false;
      if(!fragments_.Equals(other.fragments_)) return false;
      if (!object.Equals(StepExecutionResult, other.StepExecutionResult)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActualText.Length != 0) hash ^= ActualText.GetHashCode();
      if (ParsedText.Length != 0) hash ^= ParsedText.GetHashCode();
      hash ^= fragments_.GetHashCode();
      if (stepExecutionResult_ != null) hash ^= StepExecutionResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActualText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActualText);
      }
      if (ParsedText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParsedText);
      }
      fragments_.WriteTo(output, _repeated_fragments_codec);
      if (stepExecutionResult_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StepExecutionResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActualText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActualText);
      }
      if (ParsedText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParsedText);
      }
      size += fragments_.CalculateSize(_repeated_fragments_codec);
      if (stepExecutionResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StepExecutionResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoStep other) {
      if (other == null) {
        return;
      }
      if (other.ActualText.Length != 0) {
        ActualText = other.ActualText;
      }
      if (other.ParsedText.Length != 0) {
        ParsedText = other.ParsedText;
      }
      fragments_.Add(other.fragments_);
      if (other.stepExecutionResult_ != null) {
        if (stepExecutionResult_ == null) {
          stepExecutionResult_ = new global::Gauge.Messages.ProtoStepExecutionResult();
        }
        StepExecutionResult.MergeFrom(other.StepExecutionResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActualText = input.ReadString();
            break;
          }
          case 18: {
            ParsedText = input.ReadString();
            break;
          }
          case 26: {
            fragments_.AddEntriesFrom(input, _repeated_fragments_codec);
            break;
          }
          case 34: {
            if (stepExecutionResult_ == null) {
              stepExecutionResult_ = new global::Gauge.Messages.ProtoStepExecutionResult();
            }
            input.ReadMessage(stepExecutionResult_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / Concept is a type of step, that can have multiple Steps.
  /// / But from a caller's perspective, it is still used as any other Step
  /// / A proto object representing a Concept
  /// </summary>
  public sealed partial class ProtoConcept : pb::IMessage<ProtoConcept> {
    private static readonly pb::MessageParser<ProtoConcept> _parser = new pb::MessageParser<ProtoConcept>(() => new ProtoConcept());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoConcept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoConcept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoConcept(ProtoConcept other) : this() {
      ConceptStep = other.conceptStep_ != null ? other.ConceptStep.Clone() : null;
      steps_ = other.steps_.Clone();
      ConceptExecutionResult = other.conceptExecutionResult_ != null ? other.ConceptExecutionResult.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoConcept Clone() {
      return new ProtoConcept(this);
    }

    /// <summary>Field number for the "conceptStep" field.</summary>
    public const int ConceptStepFieldNumber = 1;
    private global::Gauge.Messages.ProtoStep conceptStep_;
    /// <summary>
    /// / Represents the Step value of a Concept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoStep ConceptStep {
      get { return conceptStep_; }
      set {
        conceptStep_ = value;
      }
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Gauge.Messages.ProtoItem> _repeated_steps_codec
        = pb::FieldCodec.ForMessage(18, global::Gauge.Messages.ProtoItem.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.ProtoItem> steps_ = new pbc::RepeatedField<global::Gauge.Messages.ProtoItem>();
    /// <summary>
    /// / Collection of Steps in the given concepts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.ProtoItem> Steps {
      get { return steps_; }
    }

    /// <summary>Field number for the "conceptExecutionResult" field.</summary>
    public const int ConceptExecutionResultFieldNumber = 3;
    private global::Gauge.Messages.ProtoStepExecutionResult conceptExecutionResult_;
    /// <summary>
    /// / Holds the execution result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoStepExecutionResult ConceptExecutionResult {
      get { return conceptExecutionResult_; }
      set {
        conceptExecutionResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoConcept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoConcept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConceptStep, other.ConceptStep)) return false;
      if(!steps_.Equals(other.steps_)) return false;
      if (!object.Equals(ConceptExecutionResult, other.ConceptExecutionResult)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conceptStep_ != null) hash ^= ConceptStep.GetHashCode();
      hash ^= steps_.GetHashCode();
      if (conceptExecutionResult_ != null) hash ^= ConceptExecutionResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conceptStep_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConceptStep);
      }
      steps_.WriteTo(output, _repeated_steps_codec);
      if (conceptExecutionResult_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConceptExecutionResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conceptStep_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConceptStep);
      }
      size += steps_.CalculateSize(_repeated_steps_codec);
      if (conceptExecutionResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConceptExecutionResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoConcept other) {
      if (other == null) {
        return;
      }
      if (other.conceptStep_ != null) {
        if (conceptStep_ == null) {
          conceptStep_ = new global::Gauge.Messages.ProtoStep();
        }
        ConceptStep.MergeFrom(other.ConceptStep);
      }
      steps_.Add(other.steps_);
      if (other.conceptExecutionResult_ != null) {
        if (conceptExecutionResult_ == null) {
          conceptExecutionResult_ = new global::Gauge.Messages.ProtoStepExecutionResult();
        }
        ConceptExecutionResult.MergeFrom(other.ConceptExecutionResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (conceptStep_ == null) {
              conceptStep_ = new global::Gauge.Messages.ProtoStep();
            }
            input.ReadMessage(conceptStep_);
            break;
          }
          case 18: {
            steps_.AddEntriesFrom(input, _repeated_steps_codec);
            break;
          }
          case 26: {
            if (conceptExecutionResult_ == null) {
              conceptExecutionResult_ = new global::Gauge.Messages.ProtoStepExecutionResult();
            }
            input.ReadMessage(conceptExecutionResult_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing Tags
  /// </summary>
  public sealed partial class ProtoTags : pb::IMessage<ProtoTags> {
    private static readonly pb::MessageParser<ProtoTags> _parser = new pb::MessageParser<ProtoTags>(() => new ProtoTags());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoTags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTags(ProtoTags other) : this() {
      tags_ = other.tags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTags Clone() {
      return new ProtoTags(this);
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / A collection of Tags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoTags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoTags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tags_.Equals(other.tags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tags_.WriteTo(output, _repeated_tags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tags_.CalculateSize(_repeated_tags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoTags other) {
      if (other == null) {
        return;
      }
      tags_.Add(other.tags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing Fragment.
  /// / Fragments, put together make up A Step
  /// </summary>
  public sealed partial class Fragment : pb::IMessage<Fragment> {
    private static readonly pb::MessageParser<Fragment> _parser = new pb::MessageParser<Fragment>(() => new Fragment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Fragment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fragment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fragment(Fragment other) : this() {
      fragmentType_ = other.fragmentType_;
      text_ = other.text_;
      Parameter = other.parameter_ != null ? other.Parameter.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fragment Clone() {
      return new Fragment(this);
    }

    /// <summary>Field number for the "fragmentType" field.</summary>
    public const int FragmentTypeFieldNumber = 1;
    private global::Gauge.Messages.Fragment.Types.FragmentType fragmentType_ = 0;
    /// <summary>
    /// / Type of Fragment, valid values are Text, Parameter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.Fragment.Types.FragmentType FragmentType {
      get { return fragmentType_; }
      set {
        fragmentType_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    /// <summary>
    /// / Text part of the Fragment, valid only if FragmentType=Text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameter" field.</summary>
    public const int ParameterFieldNumber = 3;
    private global::Gauge.Messages.Parameter parameter_;
    /// <summary>
    /// / Parameter part of the Fragment, valid only if FragmentType=Parameter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.Parameter Parameter {
      get { return parameter_; }
      set {
        parameter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Fragment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Fragment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FragmentType != other.FragmentType) return false;
      if (Text != other.Text) return false;
      if (!object.Equals(Parameter, other.Parameter)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FragmentType != 0) hash ^= FragmentType.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (parameter_ != null) hash ^= Parameter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FragmentType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FragmentType);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (parameter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Parameter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FragmentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FragmentType);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (parameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Fragment other) {
      if (other == null) {
        return;
      }
      if (other.FragmentType != 0) {
        FragmentType = other.FragmentType;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.parameter_ != null) {
        if (parameter_ == null) {
          parameter_ = new global::Gauge.Messages.Parameter();
        }
        Parameter.MergeFrom(other.Parameter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            fragmentType_ = (global::Gauge.Messages.Fragment.Types.FragmentType) input.ReadEnum();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
          case 26: {
            if (parameter_ == null) {
              parameter_ = new global::Gauge.Messages.Parameter();
            }
            input.ReadMessage(parameter_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Fragment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// / Enum representing the types of Fragment
      /// </summary>
      public enum FragmentType {
        /// <summary>
        /// / Fragment is a Text part
        /// </summary>
        [pbr::OriginalName("Text")] Text = 0,
        /// <summary>
        /// / Fragment is a Parameter part
        /// </summary>
        [pbr::OriginalName("Parameter")] Parameter = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// / A proto object representing Fragment.
  /// </summary>
  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      parameterType_ = other.parameterType_;
      value_ = other.value_;
      name_ = other.name_;
      Table = other.table_ != null ? other.Table.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "parameterType" field.</summary>
    public const int ParameterTypeFieldNumber = 1;
    private global::Gauge.Messages.Parameter.Types.ParameterType parameterType_ = 0;
    /// <summary>
    /// / Type of the Parameter. Valid values: Static, Dynamic, Special_String, Special_Table, Table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.Parameter.Types.ParameterType ParameterType {
      get { return parameterType_; }
      set {
        parameterType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// / Holds the value of the parameter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// / Holds the name of the parameter, used as Key to lookup the value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 4;
    private global::Gauge.Messages.ProtoTable table_;
    /// <summary>
    /// / Holds the table value, if parameterType=Table or Special_Table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoTable Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParameterType != other.ParameterType) return false;
      if (Value != other.Value) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Table, other.Table)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParameterType != 0) hash ^= ParameterType.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParameterType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ParameterType);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (table_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParameterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ParameterType);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      if (other.ParameterType != 0) {
        ParameterType = other.ParameterType;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::Gauge.Messages.ProtoTable();
        }
        Table.MergeFrom(other.Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            parameterType_ = (global::Gauge.Messages.Parameter.Types.ParameterType) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (table_ == null) {
              table_ = new global::Gauge.Messages.ProtoTable();
            }
            input.ReadMessage(table_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Parameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// / Enum representing types of Parameter.
      /// </summary>
      public enum ParameterType {
        /// <summary>
        ///  Static parameter. The value of the parameter is defined at the Step.
        /// </summary>
        [pbr::OriginalName("Static")] Static = 0,
        /// <summary>
        ///  Dynamic parameter. This is a parameter placeholder, and the actual value is injected at runtime, depending on the context of the call.
        /// </summary>
        [pbr::OriginalName("Dynamic")] Dynamic = 1,
        /// <summary>
        ///  Special paramter, taking a string value. Special paramters are read from a file.
        /// </summary>
        [pbr::OriginalName("Special_String")] SpecialString = 2,
        /// <summary>
        ///  Special paramter, taking a Table value. This parameter is read from a csv file.
        /// </summary>
        [pbr::OriginalName("Special_Table")] SpecialTable = 3,
        /// <summary>
        ///  A table parameter, used for data driven execution.
        /// </summary>
        [pbr::OriginalName("Table")] Table = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// / A proto object representing Comment.
  /// </summary>
  public sealed partial class ProtoComment : pb::IMessage<ProtoComment> {
    private static readonly pb::MessageParser<ProtoComment> _parser = new pb::MessageParser<ProtoComment>(() => new ProtoComment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoComment(ProtoComment other) : this() {
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoComment Clone() {
      return new ProtoComment(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    /// <summary>
    /// / Text representing the Comment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoComment other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing Table.
  /// </summary>
  public sealed partial class ProtoTable : pb::IMessage<ProtoTable> {
    private static readonly pb::MessageParser<ProtoTable> _parser = new pb::MessageParser<ProtoTable>(() => new ProtoTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTable(ProtoTable other) : this() {
      Headers = other.headers_ != null ? other.Headers.Clone() : null;
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTable Clone() {
      return new ProtoTable(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private global::Gauge.Messages.ProtoTableRow headers_;
    /// <summary>
    /// / Contains the Headers for the table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoTableRow Headers {
      get { return headers_; }
      set {
        headers_ = value;
      }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Gauge.Messages.ProtoTableRow> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(18, global::Gauge.Messages.ProtoTableRow.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.ProtoTableRow> rows_ = new pbc::RepeatedField<global::Gauge.Messages.ProtoTableRow>();
    /// <summary>
    /// / Contains the Rows for the table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.ProtoTableRow> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Headers, other.Headers)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (headers_ != null) hash ^= Headers.GetHashCode();
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (headers_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Headers);
      }
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (headers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Headers);
      }
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoTable other) {
      if (other == null) {
        return;
      }
      if (other.headers_ != null) {
        if (headers_ == null) {
          headers_ = new global::Gauge.Messages.ProtoTableRow();
        }
        Headers.MergeFrom(other.Headers);
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (headers_ == null) {
              headers_ = new global::Gauge.Messages.ProtoTableRow();
            }
            input.ReadMessage(headers_);
            break;
          }
          case 18: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing Table.
  /// </summary>
  public sealed partial class ProtoTableRow : pb::IMessage<ProtoTableRow> {
    private static readonly pb::MessageParser<ProtoTableRow> _parser = new pb::MessageParser<ProtoTableRow>(() => new ProtoTableRow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoTableRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTableRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTableRow(ProtoTableRow other) : this() {
      cells_ = other.cells_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoTableRow Clone() {
      return new ProtoTableRow(this);
    }

    /// <summary>Field number for the "cells" field.</summary>
    public const int CellsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_cells_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> cells_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / Represents the cells of a given table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cells {
      get { return cells_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoTableRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoTableRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cells_.Equals(other.cells_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cells_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cells_.WriteTo(output, _repeated_cells_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cells_.CalculateSize(_repeated_cells_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoTableRow other) {
      if (other == null) {
        return;
      }
      cells_.Add(other.cells_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cells_.AddEntriesFrom(input, _repeated_cells_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing Step Execution result
  /// </summary>
  public sealed partial class ProtoStepExecutionResult : pb::IMessage<ProtoStepExecutionResult> {
    private static readonly pb::MessageParser<ProtoStepExecutionResult> _parser = new pb::MessageParser<ProtoStepExecutionResult>(() => new ProtoStepExecutionResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoStepExecutionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStepExecutionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStepExecutionResult(ProtoStepExecutionResult other) : this() {
      ExecutionResult = other.executionResult_ != null ? other.ExecutionResult.Clone() : null;
      PreHookFailure = other.preHookFailure_ != null ? other.PreHookFailure.Clone() : null;
      PostHookFailure = other.postHookFailure_ != null ? other.PostHookFailure.Clone() : null;
      skipped_ = other.skipped_;
      skippedReason_ = other.skippedReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStepExecutionResult Clone() {
      return new ProtoStepExecutionResult(this);
    }

    /// <summary>Field number for the "executionResult" field.</summary>
    public const int ExecutionResultFieldNumber = 1;
    private global::Gauge.Messages.ProtoExecutionResult executionResult_;
    /// <summary>
    /// / The actual result of the execution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoExecutionResult ExecutionResult {
      get { return executionResult_; }
      set {
        executionResult_ = value;
      }
    }

    /// <summary>Field number for the "preHookFailure" field.</summary>
    public const int PreHookFailureFieldNumber = 2;
    private global::Gauge.Messages.ProtoHookFailure preHookFailure_;
    /// <summary>
    /// / Contains a 'before' hook failure message. This happens when the `before_step` hook has an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoHookFailure PreHookFailure {
      get { return preHookFailure_; }
      set {
        preHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "postHookFailure" field.</summary>
    public const int PostHookFailureFieldNumber = 3;
    private global::Gauge.Messages.ProtoHookFailure postHookFailure_;
    /// <summary>
    /// / Contains a 'after' hook failure message. This happens when the `after_step` hook has an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoHookFailure PostHookFailure {
      get { return postHookFailure_; }
      set {
        postHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "skipped" field.</summary>
    public const int SkippedFieldNumber = 4;
    private bool skipped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skipped {
      get { return skipped_; }
      set {
        skipped_ = value;
      }
    }

    /// <summary>Field number for the "skippedReason" field.</summary>
    public const int SkippedReasonFieldNumber = 5;
    private string skippedReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkippedReason {
      get { return skippedReason_; }
      set {
        skippedReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoStepExecutionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoStepExecutionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExecutionResult, other.ExecutionResult)) return false;
      if (!object.Equals(PreHookFailure, other.PreHookFailure)) return false;
      if (!object.Equals(PostHookFailure, other.PostHookFailure)) return false;
      if (Skipped != other.Skipped) return false;
      if (SkippedReason != other.SkippedReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (executionResult_ != null) hash ^= ExecutionResult.GetHashCode();
      if (preHookFailure_ != null) hash ^= PreHookFailure.GetHashCode();
      if (postHookFailure_ != null) hash ^= PostHookFailure.GetHashCode();
      if (Skipped != false) hash ^= Skipped.GetHashCode();
      if (SkippedReason.Length != 0) hash ^= SkippedReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (executionResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExecutionResult);
      }
      if (preHookFailure_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PreHookFailure);
      }
      if (postHookFailure_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PostHookFailure);
      }
      if (Skipped != false) {
        output.WriteRawTag(32);
        output.WriteBool(Skipped);
      }
      if (SkippedReason.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SkippedReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (executionResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecutionResult);
      }
      if (preHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreHookFailure);
      }
      if (postHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PostHookFailure);
      }
      if (Skipped != false) {
        size += 1 + 1;
      }
      if (SkippedReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkippedReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoStepExecutionResult other) {
      if (other == null) {
        return;
      }
      if (other.executionResult_ != null) {
        if (executionResult_ == null) {
          executionResult_ = new global::Gauge.Messages.ProtoExecutionResult();
        }
        ExecutionResult.MergeFrom(other.ExecutionResult);
      }
      if (other.preHookFailure_ != null) {
        if (preHookFailure_ == null) {
          preHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
        }
        PreHookFailure.MergeFrom(other.PreHookFailure);
      }
      if (other.postHookFailure_ != null) {
        if (postHookFailure_ == null) {
          postHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
        }
        PostHookFailure.MergeFrom(other.PostHookFailure);
      }
      if (other.Skipped != false) {
        Skipped = other.Skipped;
      }
      if (other.SkippedReason.Length != 0) {
        SkippedReason = other.SkippedReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (executionResult_ == null) {
              executionResult_ = new global::Gauge.Messages.ProtoExecutionResult();
            }
            input.ReadMessage(executionResult_);
            break;
          }
          case 18: {
            if (preHookFailure_ == null) {
              preHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
            }
            input.ReadMessage(preHookFailure_);
            break;
          }
          case 26: {
            if (postHookFailure_ == null) {
              postHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
            }
            input.ReadMessage(postHookFailure_);
            break;
          }
          case 32: {
            Skipped = input.ReadBool();
            break;
          }
          case 42: {
            SkippedReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing the result of an execution
  /// </summary>
  public sealed partial class ProtoExecutionResult : pb::IMessage<ProtoExecutionResult> {
    private static readonly pb::MessageParser<ProtoExecutionResult> _parser = new pb::MessageParser<ProtoExecutionResult>(() => new ProtoExecutionResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoExecutionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoExecutionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoExecutionResult(ProtoExecutionResult other) : this() {
      failed_ = other.failed_;
      recoverableError_ = other.recoverableError_;
      errorMessage_ = other.errorMessage_;
      stackTrace_ = other.stackTrace_;
      screenShot_ = other.screenShot_;
      executionTime_ = other.executionTime_;
      message_ = other.message_.Clone();
      errorType_ = other.errorType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoExecutionResult Clone() {
      return new ProtoExecutionResult(this);
    }

    /// <summary>Field number for the "failed" field.</summary>
    public const int FailedFieldNumber = 1;
    private bool failed_;
    /// <summary>
    /// / Flag to indicate failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Failed {
      get { return failed_; }
      set {
        failed_ = value;
      }
    }

    /// <summary>Field number for the "recoverableError" field.</summary>
    public const int RecoverableErrorFieldNumber = 2;
    private bool recoverableError_;
    /// <summary>
    /// / Flag to indicate if the error is recoverable from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecoverableError {
      get { return recoverableError_; }
      set {
        recoverableError_ = value;
      }
    }

    /// <summary>Field number for the "errorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    /// <summary>
    /// / The actual error message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stackTrace" field.</summary>
    public const int StackTraceFieldNumber = 4;
    private string stackTrace_ = "";
    /// <summary>
    /// / Stacktrace of the error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StackTrace {
      get { return stackTrace_; }
      set {
        stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "screenShot" field.</summary>
    public const int ScreenShotFieldNumber = 5;
    private pb::ByteString screenShot_ = pb::ByteString.Empty;
    /// <summary>
    /// / Byte array containing screenshot taken at the time of failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ScreenShot {
      get { return screenShot_; }
      set {
        screenShot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "executionTime" field.</summary>
    public const int ExecutionTimeFieldNumber = 6;
    private long executionTime_;
    /// <summary>
    /// / Holds the time taken for executing this scenario.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutionTime {
      get { return executionTime_; }
      set {
        executionTime_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_message_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> message_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / Additional information at exec time to be available on reports
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Message {
      get { return message_; }
    }

    /// <summary>Field number for the "errorType" field.</summary>
    public const int ErrorTypeFieldNumber = 8;
    private global::Gauge.Messages.ProtoExecutionResult.Types.ErrorType errorType_ = 0;
    /// <summary>
    /// / Type of the Error. Valid values: ASSERTION, VERIFICATION. Default: ASSERTION
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoExecutionResult.Types.ErrorType ErrorType {
      get { return errorType_; }
      set {
        errorType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoExecutionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoExecutionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Failed != other.Failed) return false;
      if (RecoverableError != other.RecoverableError) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (StackTrace != other.StackTrace) return false;
      if (ScreenShot != other.ScreenShot) return false;
      if (ExecutionTime != other.ExecutionTime) return false;
      if(!message_.Equals(other.message_)) return false;
      if (ErrorType != other.ErrorType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Failed != false) hash ^= Failed.GetHashCode();
      if (RecoverableError != false) hash ^= RecoverableError.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
      if (ScreenShot.Length != 0) hash ^= ScreenShot.GetHashCode();
      if (ExecutionTime != 0L) hash ^= ExecutionTime.GetHashCode();
      hash ^= message_.GetHashCode();
      if (ErrorType != 0) hash ^= ErrorType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Failed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Failed);
      }
      if (RecoverableError != false) {
        output.WriteRawTag(16);
        output.WriteBool(RecoverableError);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (StackTrace.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StackTrace);
      }
      if (ScreenShot.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ScreenShot);
      }
      if (ExecutionTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExecutionTime);
      }
      message_.WriteTo(output, _repeated_message_codec);
      if (ErrorType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ErrorType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Failed != false) {
        size += 1 + 1;
      }
      if (RecoverableError != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (StackTrace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
      }
      if (ScreenShot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ScreenShot);
      }
      if (ExecutionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTime);
      }
      size += message_.CalculateSize(_repeated_message_codec);
      if (ErrorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoExecutionResult other) {
      if (other == null) {
        return;
      }
      if (other.Failed != false) {
        Failed = other.Failed;
      }
      if (other.RecoverableError != false) {
        RecoverableError = other.RecoverableError;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.StackTrace.Length != 0) {
        StackTrace = other.StackTrace;
      }
      if (other.ScreenShot.Length != 0) {
        ScreenShot = other.ScreenShot;
      }
      if (other.ExecutionTime != 0L) {
        ExecutionTime = other.ExecutionTime;
      }
      message_.Add(other.message_);
      if (other.ErrorType != 0) {
        ErrorType = other.ErrorType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Failed = input.ReadBool();
            break;
          }
          case 16: {
            RecoverableError = input.ReadBool();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 34: {
            StackTrace = input.ReadString();
            break;
          }
          case 42: {
            ScreenShot = input.ReadBytes();
            break;
          }
          case 48: {
            ExecutionTime = input.ReadInt64();
            break;
          }
          case 58: {
            message_.AddEntriesFrom(input, _repeated_message_codec);
            break;
          }
          case 64: {
            errorType_ = (global::Gauge.Messages.ProtoExecutionResult.Types.ErrorType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ProtoExecutionResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ErrorType {
        [pbr::OriginalName("ASSERTION")] Assertion = 0,
        [pbr::OriginalName("VERIFICATION")] Verification = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// / A proto object representing a pre-hook failure.
  /// / Used to hold failure information for before_suite, before_spec, before_scenario and before_spec hooks.
  /// </summary>
  public sealed partial class ProtoHookFailure : pb::IMessage<ProtoHookFailure> {
    private static readonly pb::MessageParser<ProtoHookFailure> _parser = new pb::MessageParser<ProtoHookFailure>(() => new ProtoHookFailure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoHookFailure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHookFailure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHookFailure(ProtoHookFailure other) : this() {
      stackTrace_ = other.stackTrace_;
      errorMessage_ = other.errorMessage_;
      screenShot_ = other.screenShot_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHookFailure Clone() {
      return new ProtoHookFailure(this);
    }

    /// <summary>Field number for the "stackTrace" field.</summary>
    public const int StackTraceFieldNumber = 1;
    private string stackTrace_ = "";
    /// <summary>
    /// / Stacktrace from the failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StackTrace {
      get { return stackTrace_; }
      set {
        stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    /// <summary>
    /// / Error message from the failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "screenShot" field.</summary>
    public const int ScreenShotFieldNumber = 3;
    private pb::ByteString screenShot_ = pb::ByteString.Empty;
    /// <summary>
    /// / Byte array holding the screenshot taken at the time of failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ScreenShot {
      get { return screenShot_; }
      set {
        screenShot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoHookFailure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoHookFailure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StackTrace != other.StackTrace) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (ScreenShot != other.ScreenShot) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (ScreenShot.Length != 0) hash ^= ScreenShot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StackTrace.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StackTrace);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      if (ScreenShot.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ScreenShot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StackTrace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (ScreenShot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ScreenShot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoHookFailure other) {
      if (other == null) {
        return;
      }
      if (other.StackTrace.Length != 0) {
        StackTrace = other.StackTrace;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.ScreenShot.Length != 0) {
        ScreenShot = other.ScreenShot;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StackTrace = input.ReadString();
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 26: {
            ScreenShot = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing the result of entire Suite execution.
  /// </summary>
  public sealed partial class ProtoSuiteResult : pb::IMessage<ProtoSuiteResult> {
    private static readonly pb::MessageParser<ProtoSuiteResult> _parser = new pb::MessageParser<ProtoSuiteResult>(() => new ProtoSuiteResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoSuiteResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSuiteResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSuiteResult(ProtoSuiteResult other) : this() {
      specResults_ = other.specResults_.Clone();
      PreHookFailure = other.preHookFailure_ != null ? other.PreHookFailure.Clone() : null;
      PostHookFailure = other.postHookFailure_ != null ? other.PostHookFailure.Clone() : null;
      failed_ = other.failed_;
      specsFailedCount_ = other.specsFailedCount_;
      executionTime_ = other.executionTime_;
      successRate_ = other.successRate_;
      environment_ = other.environment_;
      tags_ = other.tags_;
      projectName_ = other.projectName_;
      timestamp_ = other.timestamp_;
      specsSkippedCount_ = other.specsSkippedCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSuiteResult Clone() {
      return new ProtoSuiteResult(this);
    }

    /// <summary>Field number for the "specResults" field.</summary>
    public const int SpecResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gauge.Messages.ProtoSpecResult> _repeated_specResults_codec
        = pb::FieldCodec.ForMessage(10, global::Gauge.Messages.ProtoSpecResult.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.ProtoSpecResult> specResults_ = new pbc::RepeatedField<global::Gauge.Messages.ProtoSpecResult>();
    /// <summary>
    /// / Contains the result from the execution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.ProtoSpecResult> SpecResults {
      get { return specResults_; }
    }

    /// <summary>Field number for the "preHookFailure" field.</summary>
    public const int PreHookFailureFieldNumber = 2;
    private global::Gauge.Messages.ProtoHookFailure preHookFailure_;
    /// <summary>
    /// / Contains a 'before' hook failure message. This happens when the `before_suite` hook has an error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoHookFailure PreHookFailure {
      get { return preHookFailure_; }
      set {
        preHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "postHookFailure" field.</summary>
    public const int PostHookFailureFieldNumber = 3;
    private global::Gauge.Messages.ProtoHookFailure postHookFailure_;
    /// <summary>
    /// / Contains a 'after' hook failure message. This happens when the `after_suite` hook has an error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoHookFailure PostHookFailure {
      get { return postHookFailure_; }
      set {
        postHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "failed" field.</summary>
    public const int FailedFieldNumber = 4;
    private bool failed_;
    /// <summary>
    /// / Flag to indicate failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Failed {
      get { return failed_; }
      set {
        failed_ = value;
      }
    }

    /// <summary>Field number for the "specsFailedCount" field.</summary>
    public const int SpecsFailedCountFieldNumber = 5;
    private int specsFailedCount_;
    /// <summary>
    /// / Holds the count of number of Specifications that failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecsFailedCount {
      get { return specsFailedCount_; }
      set {
        specsFailedCount_ = value;
      }
    }

    /// <summary>Field number for the "executionTime" field.</summary>
    public const int ExecutionTimeFieldNumber = 6;
    private long executionTime_;
    /// <summary>
    /// / Holds the time taken for executing the whole suite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutionTime {
      get { return executionTime_; }
      set {
        executionTime_ = value;
      }
    }

    /// <summary>Field number for the "successRate" field.</summary>
    public const int SuccessRateFieldNumber = 7;
    private float successRate_;
    /// <summary>
    /// / Holds a metric indicating the success rate of the execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SuccessRate {
      get { return successRate_; }
      set {
        successRate_ = value;
      }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 8;
    private string environment_ = "";
    /// <summary>
    /// / The environment against which execution was done
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Environment {
      get { return environment_; }
      set {
        environment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 9;
    private string tags_ = "";
    /// <summary>
    /// / Tag expression used for filtering specification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projectName" field.</summary>
    public const int ProjectNameFieldNumber = 10;
    private string projectName_ = "";
    /// <summary>
    /// / Project name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private string timestamp_ = "";
    /// <summary>
    /// / Timestamp of when execution started
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specsSkippedCount" field.</summary>
    public const int SpecsSkippedCountFieldNumber = 12;
    private int specsSkippedCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecsSkippedCount {
      get { return specsSkippedCount_; }
      set {
        specsSkippedCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoSuiteResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoSuiteResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!specResults_.Equals(other.specResults_)) return false;
      if (!object.Equals(PreHookFailure, other.PreHookFailure)) return false;
      if (!object.Equals(PostHookFailure, other.PostHookFailure)) return false;
      if (Failed != other.Failed) return false;
      if (SpecsFailedCount != other.SpecsFailedCount) return false;
      if (ExecutionTime != other.ExecutionTime) return false;
      if (SuccessRate != other.SuccessRate) return false;
      if (Environment != other.Environment) return false;
      if (Tags != other.Tags) return false;
      if (ProjectName != other.ProjectName) return false;
      if (Timestamp != other.Timestamp) return false;
      if (SpecsSkippedCount != other.SpecsSkippedCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= specResults_.GetHashCode();
      if (preHookFailure_ != null) hash ^= PreHookFailure.GetHashCode();
      if (postHookFailure_ != null) hash ^= PostHookFailure.GetHashCode();
      if (Failed != false) hash ^= Failed.GetHashCode();
      if (SpecsFailedCount != 0) hash ^= SpecsFailedCount.GetHashCode();
      if (ExecutionTime != 0L) hash ^= ExecutionTime.GetHashCode();
      if (SuccessRate != 0F) hash ^= SuccessRate.GetHashCode();
      if (Environment.Length != 0) hash ^= Environment.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (SpecsSkippedCount != 0) hash ^= SpecsSkippedCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      specResults_.WriteTo(output, _repeated_specResults_codec);
      if (preHookFailure_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PreHookFailure);
      }
      if (postHookFailure_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PostHookFailure);
      }
      if (Failed != false) {
        output.WriteRawTag(32);
        output.WriteBool(Failed);
      }
      if (SpecsFailedCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpecsFailedCount);
      }
      if (ExecutionTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExecutionTime);
      }
      if (SuccessRate != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(SuccessRate);
      }
      if (Environment.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Environment);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Tags);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ProjectName);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Timestamp);
      }
      if (SpecsSkippedCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SpecsSkippedCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += specResults_.CalculateSize(_repeated_specResults_codec);
      if (preHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreHookFailure);
      }
      if (postHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PostHookFailure);
      }
      if (Failed != false) {
        size += 1 + 1;
      }
      if (SpecsFailedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecsFailedCount);
      }
      if (ExecutionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTime);
      }
      if (SuccessRate != 0F) {
        size += 1 + 4;
      }
      if (Environment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Environment);
      }
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (SpecsSkippedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecsSkippedCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoSuiteResult other) {
      if (other == null) {
        return;
      }
      specResults_.Add(other.specResults_);
      if (other.preHookFailure_ != null) {
        if (preHookFailure_ == null) {
          preHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
        }
        PreHookFailure.MergeFrom(other.PreHookFailure);
      }
      if (other.postHookFailure_ != null) {
        if (postHookFailure_ == null) {
          postHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
        }
        PostHookFailure.MergeFrom(other.PostHookFailure);
      }
      if (other.Failed != false) {
        Failed = other.Failed;
      }
      if (other.SpecsFailedCount != 0) {
        SpecsFailedCount = other.SpecsFailedCount;
      }
      if (other.ExecutionTime != 0L) {
        ExecutionTime = other.ExecutionTime;
      }
      if (other.SuccessRate != 0F) {
        SuccessRate = other.SuccessRate;
      }
      if (other.Environment.Length != 0) {
        Environment = other.Environment;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.SpecsSkippedCount != 0) {
        SpecsSkippedCount = other.SpecsSkippedCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            specResults_.AddEntriesFrom(input, _repeated_specResults_codec);
            break;
          }
          case 18: {
            if (preHookFailure_ == null) {
              preHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
            }
            input.ReadMessage(preHookFailure_);
            break;
          }
          case 26: {
            if (postHookFailure_ == null) {
              postHookFailure_ = new global::Gauge.Messages.ProtoHookFailure();
            }
            input.ReadMessage(postHookFailure_);
            break;
          }
          case 32: {
            Failed = input.ReadBool();
            break;
          }
          case 40: {
            SpecsFailedCount = input.ReadInt32();
            break;
          }
          case 48: {
            ExecutionTime = input.ReadInt64();
            break;
          }
          case 61: {
            SuccessRate = input.ReadFloat();
            break;
          }
          case 66: {
            Environment = input.ReadString();
            break;
          }
          case 74: {
            Tags = input.ReadString();
            break;
          }
          case 82: {
            ProjectName = input.ReadString();
            break;
          }
          case 90: {
            Timestamp = input.ReadString();
            break;
          }
          case 96: {
            SpecsSkippedCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing the result of Spec execution.
  /// </summary>
  public sealed partial class ProtoSpecResult : pb::IMessage<ProtoSpecResult> {
    private static readonly pb::MessageParser<ProtoSpecResult> _parser = new pb::MessageParser<ProtoSpecResult>(() => new ProtoSpecResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoSpecResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSpecResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSpecResult(ProtoSpecResult other) : this() {
      ProtoSpec = other.protoSpec_ != null ? other.ProtoSpec.Clone() : null;
      scenarioCount_ = other.scenarioCount_;
      scenarioFailedCount_ = other.scenarioFailedCount_;
      failed_ = other.failed_;
      failedDataTableRows_ = other.failedDataTableRows_.Clone();
      executionTime_ = other.executionTime_;
      skipped_ = other.skipped_;
      scenarioSkippedCount_ = other.scenarioSkippedCount_;
      skippedDataTableRows_ = other.skippedDataTableRows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoSpecResult Clone() {
      return new ProtoSpecResult(this);
    }

    /// <summary>Field number for the "protoSpec" field.</summary>
    public const int ProtoSpecFieldNumber = 1;
    private global::Gauge.Messages.ProtoSpec protoSpec_;
    /// <summary>
    /// / Represents the corresponding Specification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ProtoSpec ProtoSpec {
      get { return protoSpec_; }
      set {
        protoSpec_ = value;
      }
    }

    /// <summary>Field number for the "scenarioCount" field.</summary>
    public const int ScenarioCountFieldNumber = 2;
    private int scenarioCount_;
    /// <summary>
    /// / Holds the number of Scenarios executed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScenarioCount {
      get { return scenarioCount_; }
      set {
        scenarioCount_ = value;
      }
    }

    /// <summary>Field number for the "scenarioFailedCount" field.</summary>
    public const int ScenarioFailedCountFieldNumber = 3;
    private int scenarioFailedCount_;
    /// <summary>
    /// / Holds the number of Scenarios failed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScenarioFailedCount {
      get { return scenarioFailedCount_; }
      set {
        scenarioFailedCount_ = value;
      }
    }

    /// <summary>Field number for the "failed" field.</summary>
    public const int FailedFieldNumber = 4;
    private bool failed_;
    /// <summary>
    /// / Flag to indicate failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Failed {
      get { return failed_; }
      set {
        failed_ = value;
      }
    }

    /// <summary>Field number for the "failedDataTableRows" field.</summary>
    public const int FailedDataTableRowsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_failedDataTableRows_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> failedDataTableRows_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// / Holds the row numbers, which caused the execution to fail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FailedDataTableRows {
      get { return failedDataTableRows_; }
    }

    /// <summary>Field number for the "executionTime" field.</summary>
    public const int ExecutionTimeFieldNumber = 6;
    private long executionTime_;
    /// <summary>
    /// / Holds the time taken for executing the spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutionTime {
      get { return executionTime_; }
      set {
        executionTime_ = value;
      }
    }

    /// <summary>Field number for the "skipped" field.</summary>
    public const int SkippedFieldNumber = 7;
    private bool skipped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skipped {
      get { return skipped_; }
      set {
        skipped_ = value;
      }
    }

    /// <summary>Field number for the "scenarioSkippedCount" field.</summary>
    public const int ScenarioSkippedCountFieldNumber = 9;
    private int scenarioSkippedCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScenarioSkippedCount {
      get { return scenarioSkippedCount_; }
      set {
        scenarioSkippedCount_ = value;
      }
    }

    /// <summary>Field number for the "skippedDataTableRows" field.</summary>
    public const int SkippedDataTableRowsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_skippedDataTableRows_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> skippedDataTableRows_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// / Holds the row numbers, for which the execution skipped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SkippedDataTableRows {
      get { return skippedDataTableRows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoSpecResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoSpecResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProtoSpec, other.ProtoSpec)) return false;
      if (ScenarioCount != other.ScenarioCount) return false;
      if (ScenarioFailedCount != other.ScenarioFailedCount) return false;
      if (Failed != other.Failed) return false;
      if(!failedDataTableRows_.Equals(other.failedDataTableRows_)) return false;
      if (ExecutionTime != other.ExecutionTime) return false;
      if (Skipped != other.Skipped) return false;
      if (ScenarioSkippedCount != other.ScenarioSkippedCount) return false;
      if(!skippedDataTableRows_.Equals(other.skippedDataTableRows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (protoSpec_ != null) hash ^= ProtoSpec.GetHashCode();
      if (ScenarioCount != 0) hash ^= ScenarioCount.GetHashCode();
      if (ScenarioFailedCount != 0) hash ^= ScenarioFailedCount.GetHashCode();
      if (Failed != false) hash ^= Failed.GetHashCode();
      hash ^= failedDataTableRows_.GetHashCode();
      if (ExecutionTime != 0L) hash ^= ExecutionTime.GetHashCode();
      if (Skipped != false) hash ^= Skipped.GetHashCode();
      if (ScenarioSkippedCount != 0) hash ^= ScenarioSkippedCount.GetHashCode();
      hash ^= skippedDataTableRows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (protoSpec_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProtoSpec);
      }
      if (ScenarioCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ScenarioCount);
      }
      if (ScenarioFailedCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScenarioFailedCount);
      }
      if (Failed != false) {
        output.WriteRawTag(32);
        output.WriteBool(Failed);
      }
      failedDataTableRows_.WriteTo(output, _repeated_failedDataTableRows_codec);
      if (ExecutionTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExecutionTime);
      }
      if (Skipped != false) {
        output.WriteRawTag(56);
        output.WriteBool(Skipped);
      }
      if (ScenarioSkippedCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ScenarioSkippedCount);
      }
      skippedDataTableRows_.WriteTo(output, _repeated_skippedDataTableRows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (protoSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProtoSpec);
      }
      if (ScenarioCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScenarioCount);
      }
      if (ScenarioFailedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScenarioFailedCount);
      }
      if (Failed != false) {
        size += 1 + 1;
      }
      size += failedDataTableRows_.CalculateSize(_repeated_failedDataTableRows_codec);
      if (ExecutionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTime);
      }
      if (Skipped != false) {
        size += 1 + 1;
      }
      if (ScenarioSkippedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScenarioSkippedCount);
      }
      size += skippedDataTableRows_.CalculateSize(_repeated_skippedDataTableRows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoSpecResult other) {
      if (other == null) {
        return;
      }
      if (other.protoSpec_ != null) {
        if (protoSpec_ == null) {
          protoSpec_ = new global::Gauge.Messages.ProtoSpec();
        }
        ProtoSpec.MergeFrom(other.ProtoSpec);
      }
      if (other.ScenarioCount != 0) {
        ScenarioCount = other.ScenarioCount;
      }
      if (other.ScenarioFailedCount != 0) {
        ScenarioFailedCount = other.ScenarioFailedCount;
      }
      if (other.Failed != false) {
        Failed = other.Failed;
      }
      failedDataTableRows_.Add(other.failedDataTableRows_);
      if (other.ExecutionTime != 0L) {
        ExecutionTime = other.ExecutionTime;
      }
      if (other.Skipped != false) {
        Skipped = other.Skipped;
      }
      if (other.ScenarioSkippedCount != 0) {
        ScenarioSkippedCount = other.ScenarioSkippedCount;
      }
      skippedDataTableRows_.Add(other.skippedDataTableRows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (protoSpec_ == null) {
              protoSpec_ = new global::Gauge.Messages.ProtoSpec();
            }
            input.ReadMessage(protoSpec_);
            break;
          }
          case 16: {
            ScenarioCount = input.ReadInt32();
            break;
          }
          case 24: {
            ScenarioFailedCount = input.ReadInt32();
            break;
          }
          case 32: {
            Failed = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            failedDataTableRows_.AddEntriesFrom(input, _repeated_failedDataTableRows_codec);
            break;
          }
          case 48: {
            ExecutionTime = input.ReadInt64();
            break;
          }
          case 56: {
            Skipped = input.ReadBool();
            break;
          }
          case 72: {
            ScenarioSkippedCount = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            skippedDataTableRows_.AddEntriesFrom(input, _repeated_skippedDataTableRows_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / A proto object representing a Step value.
  /// </summary>
  public sealed partial class ProtoStepValue : pb::IMessage<ProtoStepValue> {
    private static readonly pb::MessageParser<ProtoStepValue> _parser = new pb::MessageParser<ProtoStepValue>(() => new ProtoStepValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoStepValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.SpecReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStepValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStepValue(ProtoStepValue other) : this() {
      stepValue_ = other.stepValue_;
      parameterizedStepValue_ = other.parameterizedStepValue_;
      parameters_ = other.parameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoStepValue Clone() {
      return new ProtoStepValue(this);
    }

    /// <summary>Field number for the "stepValue" field.</summary>
    public const int StepValueFieldNumber = 1;
    private string stepValue_ = "";
    /// <summary>
    /// / The actual string value describing he Step
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StepValue {
      get { return stepValue_; }
      set {
        stepValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameterizedStepValue" field.</summary>
    public const int ParameterizedStepValueFieldNumber = 2;
    private string parameterizedStepValue_ = "";
    /// <summary>
    /// / The parameterized string value describing he Step. The parameters are replaced with placeholders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParameterizedStepValue {
      get { return parameterizedStepValue_; }
      set {
        parameterizedStepValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_parameters_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> parameters_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / A collection of strings representing the parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoStepValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoStepValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepValue != other.StepValue) return false;
      if (ParameterizedStepValue != other.ParameterizedStepValue) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepValue.Length != 0) hash ^= StepValue.GetHashCode();
      if (ParameterizedStepValue.Length != 0) hash ^= ParameterizedStepValue.GetHashCode();
      hash ^= parameters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepValue.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StepValue);
      }
      if (ParameterizedStepValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParameterizedStepValue);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StepValue);
      }
      if (ParameterizedStepValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParameterizedStepValue);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoStepValue other) {
      if (other == null) {
        return;
      }
      if (other.StepValue.Length != 0) {
        StepValue = other.StepValue;
      }
      if (other.ParameterizedStepValue.Length != 0) {
        ParameterizedStepValue = other.ParameterizedStepValue;
      }
      parameters_.Add(other.parameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StepValue = input.ReadString();
            break;
          }
          case 18: {
            ParameterizedStepValue = input.ReadString();
            break;
          }
          case 26: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
