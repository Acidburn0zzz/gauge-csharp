// Copyright 2015 ThoughtWorks, Inc.

// This file is part of Gauge-CSharp.

// Gauge-CSharp is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Gauge-CSharp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Gauge-CSharp.  If not, see <http://www.gnu.org/licenses/>.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api_v2.proto
// Original file comments:
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Gauge.Messages {
  public static class Execution
  {
    static readonly string __ServiceName = "gauge.messages.Execution";

    static readonly Marshaller<global::Gauge.Messages.ExecutionRequest> __Marshaller_ExecutionRequest = Marshallers.Create((arg) => arg.ToByteArray(), global::Gauge.Messages.ExecutionRequest.ParseFrom);
    static readonly Marshaller<global::Gauge.Messages.ExecutionResponse> __Marshaller_ExecutionResponse = Marshallers.Create((arg) => arg.ToByteArray(), global::Gauge.Messages.ExecutionResponse.ParseFrom);

    static readonly Method<global::Gauge.Messages.ExecutionRequest, global::Gauge.Messages.ExecutionResponse> __Method_execute = new Method<global::Gauge.Messages.ExecutionRequest, global::Gauge.Messages.ExecutionResponse>(
        MethodType.ServerStreaming,
        "execute",
        __Marshaller_ExecutionRequest,
        __Marshaller_ExecutionResponse);

    // client-side stub interface
    public interface IExecutionClient
    {
      AsyncServerStreamingCall<global::Gauge.Messages.ExecutionResponse> execute(global::Gauge.Messages.ExecutionRequest request, CancellationToken token = default(CancellationToken));
    }

    // server-side interface
    public interface IExecution
    {
      Task execute(ServerCallContext context, global::Gauge.Messages.ExecutionRequest request, IServerStreamWriter<global::Gauge.Messages.ExecutionResponse> responseStream);
    }

    // client stub
    public class ExecutionClient : AbstractStub<ExecutionClient, StubConfiguration>, IExecutionClient
    {
      public ExecutionClient(Channel channel) : this(channel, StubConfiguration.Default)
      {
      }
      public ExecutionClient(Channel channel, StubConfiguration config) : base(channel, config)
      {
      }
      public AsyncServerStreamingCall<global::Gauge.Messages.ExecutionResponse> execute(global::Gauge.Messages.ExecutionRequest request, CancellationToken token = default(CancellationToken))
      {
        var call = CreateCall(__ServiceName, __Method_execute);
        return Calls.AsyncServerStreamingCall(call, request, token);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IExecution serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_execute, serviceImpl.execute).Build();
    }

    // creates a new client stub
    public static IExecutionClient NewStub(Channel channel)
    {
      return new ExecutionClient(channel);
    }

    // creates a new client stub
    public static IExecutionClient NewStub(Channel channel, StubConfiguration config)
    {
      return new ExecutionClient(channel, config);
    }
  }
}
#endregion
