// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api_v2.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gauge.Messages {

  /// <summary>Holder for reflection information generated from api_v2.proto</summary>
  public static partial class ApiV2Reflection {

    #region Descriptor
    /// <summary>File descriptor for api_v2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiV2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxhcGlfdjIucHJvdG8SDmdhdWdlLm1lc3NhZ2VzIoEDChBFeGVjdXRpb25S",
            "ZXF1ZXN0Eg0KBXNwZWNzGAEgAygJEgwKBHRhZ3MYAiABKAkSEgoKd29ya2lu",
            "Z0RpchgDIAEoCRILCgNlbnYYBCABKAkSOwoIbG9nTGV2ZWwYBSABKA4yKS5n",
            "YXVnZS5tZXNzYWdlcy5FeGVjdXRpb25SZXF1ZXN0LkxvZ0xldmVsEhIKCmlz",
            "UGFyYWxsZWwYBiABKAgSFwoPcGFyYWxsZWxTdHJlYW1zGAcgASgFEgwKBHNv",
            "cnQYCCABKAgSOwoIc3RyYXRlZ3kYCSABKA4yKS5nYXVnZS5tZXNzYWdlcy5F",
            "eGVjdXRpb25SZXF1ZXN0LlN0cmF0ZWd5EhEKCXRhYmxlUm93cxgKIAEoCRIN",
            "CgVkZWJ1ZxgLIAEoCCI3CghMb2dMZXZlbBIICgRJTkZPEAASCQoFREVCVUcQ",
            "ARILCgdXQVJOSU5HEAISCQoFRVJST1IQAyIfCghTdHJhdGVneRIICgRMQVpZ",
            "EAASCQoFRUFHRVIQASKvAwoGUmVzdWx0Ei0KBnN0YXR1cxgBIAEoDjIdLmdh",
            "dWdlLm1lc3NhZ2VzLlJlc3VsdC5TdGF0dXMSNQoGZXJyb3JzGAIgAygLMiUu",
            "Z2F1Z2UubWVzc2FnZXMuUmVzdWx0LkV4ZWN1dGlvbkVycm9yEhUKDWV4ZWN1",
            "dGlvblRpbWUYAyABKAMSDgoGc3Rkb3V0GAQgASgJEkAKEWJlZm9yZUhvb2tG",
            "YWlsdXJlGAUgASgLMiUuZ2F1Z2UubWVzc2FnZXMuUmVzdWx0LkV4ZWN1dGlv",
            "bkVycm9yEj8KEGFmdGVySG9va0ZhaWx1cmUYBiABKAsyJS5nYXVnZS5tZXNz",
            "YWdlcy5SZXN1bHQuRXhlY3V0aW9uRXJyb3ISFgoOdGFibGVSb3dOdW1iZXIY",
            "ByABKAMaTgoORXhlY3V0aW9uRXJyb3ISFAoMZXJyb3JNZXNzYWdlGAEgASgJ",
            "EhIKCnN0YWNrVHJhY2UYAiABKAkSEgoKc2NyZWVuc2hvdBgDIAEoDCItCgZT",
            "dGF0dXMSCgoGUEFTU0VEEAASCgoGRkFJTEVEEAESCwoHU0tJUFBFRBACIo0C",
            "ChFFeGVjdXRpb25SZXNwb25zZRI0CgR0eXBlGAEgASgOMiYuZ2F1Z2UubWVz",
            "c2FnZXMuRXhlY3V0aW9uUmVzcG9uc2UuVHlwZRIKCgJJRBgCIAEoCRImCgZy",
            "ZXN1bHQYAyABKAsyFi5nYXVnZS5tZXNzYWdlcy5SZXN1bHQSFwoPUnVubmVy",
            "UHJvY2Vzc0lkGAQgASgFInUKBFR5cGUSDgoKU3VpdGVTdGFydBAAEg0KCVNw",
            "ZWNTdGFydBABEhEKDVNjZW5hcmlvU3RhcnQQAhIPCgtTY2VuYXJpb0VuZBAD",
            "EgsKB1NwZWNFbmQQBBIMCghTdWl0ZUVuZBAFEg8KC0Vycm9yUmVzdWx0EAYy",
            "XwoJRXhlY3V0aW9uElIKB2V4ZWN1dGUSIC5nYXVnZS5tZXNzYWdlcy5FeGVj",
            "dXRpb25SZXF1ZXN0GiEuZ2F1Z2UubWVzc2FnZXMuRXhlY3V0aW9uUmVzcG9u",
            "c2UiADABQhGqAg5HYXVnZS5NZXNzYWdlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ExecutionRequest), global::Gauge.Messages.ExecutionRequest.Parser, new[]{ "Specs", "Tags", "WorkingDir", "Env", "LogLevel", "IsParallel", "ParallelStreams", "Sort", "Strategy", "TableRows", "Debug" }, null, new[]{ typeof(global::Gauge.Messages.ExecutionRequest.Types.LogLevel), typeof(global::Gauge.Messages.ExecutionRequest.Types.Strategy) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.Result), global::Gauge.Messages.Result.Parser, new[]{ "Status", "Errors", "ExecutionTime", "Stdout", "BeforeHookFailure", "AfterHookFailure", "TableRowNumber" }, null, new[]{ typeof(global::Gauge.Messages.Result.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.Result.Types.ExecutionError), global::Gauge.Messages.Result.Types.ExecutionError.Parser, new[]{ "ErrorMessage", "StackTrace", "Screenshot" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gauge.Messages.ExecutionResponse), global::Gauge.Messages.ExecutionResponse.Parser, new[]{ "Type", "ID", "Result", "RunnerProcessId" }, null, new[]{ typeof(global::Gauge.Messages.ExecutionResponse.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  ExecutionRequest defines the structure of requests that the API's consumers can send to request execution of specs/scenarios
  /// </summary>
  public sealed partial class ExecutionRequest : pb::IMessage<ExecutionRequest> {
    private static readonly pb::MessageParser<ExecutionRequest> _parser = new pb::MessageParser<ExecutionRequest>(() => new ExecutionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.ApiV2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionRequest(ExecutionRequest other) : this() {
      specs_ = other.specs_.Clone();
      tags_ = other.tags_;
      workingDir_ = other.workingDir_;
      env_ = other.env_;
      logLevel_ = other.logLevel_;
      isParallel_ = other.isParallel_;
      parallelStreams_ = other.parallelStreams_;
      sort_ = other.sort_;
      strategy_ = other.strategy_;
      tableRows_ = other.tableRows_;
      debug_ = other.debug_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionRequest Clone() {
      return new ExecutionRequest(this);
    }

    /// <summary>Field number for the "specs" field.</summary>
    public const int SpecsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_specs_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> specs_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Each ExecutionRequest can ask to execute multiple spec files or multiple scenarios in a spec or a directory or all
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Specs {
      get { return specs_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private string tags_ = "";
    /// <summary>
    ///  Tag expression to filter specs and scenarios during execution. Default: ""
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workingDir" field.</summary>
    public const int WorkingDirFieldNumber = 3;
    private string workingDir_ = "";
    /// <summary>
    ///  The working directory for gauge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkingDir {
      get { return workingDir_; }
      set {
        workingDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 4;
    private string env_ = "";
    /// <summary>
    ///  Environment to choose for gauge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Env {
      get { return env_; }
      set {
        env_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logLevel" field.</summary>
    public const int LogLevelFieldNumber = 5;
    private global::Gauge.Messages.ExecutionRequest.Types.LogLevel logLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ExecutionRequest.Types.LogLevel LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "isParallel" field.</summary>
    public const int IsParallelFieldNumber = 6;
    private bool isParallel_;
    /// <summary>
    ///  Whether to run gauge in parallel mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsParallel {
      get { return isParallel_; }
      set {
        isParallel_ = value;
      }
    }

    /// <summary>Field number for the "parallelStreams" field.</summary>
    public const int ParallelStreamsFieldNumber = 7;
    private int parallelStreams_;
    /// <summary>
    ///  If isParallel is true, this specifies how many parallel streams to run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParallelStreams {
      get { return parallelStreams_; }
      set {
        parallelStreams_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 8;
    private bool sort_;
    /// <summary>
    ///  If true, sorts execution of specifications alphabetically
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 9;
    private global::Gauge.Messages.ExecutionRequest.Types.Strategy strategy_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ExecutionRequest.Types.Strategy Strategy {
      get { return strategy_; }
      set {
        strategy_ = value;
      }
    }

    /// <summary>Field number for the "tableRows" field.</summary>
    public const int TableRowsFieldNumber = 10;
    private string tableRows_ = "";
    /// <summary>
    ///  Specify against which rows of datatable the scenarios should be executed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableRows {
      get { return tableRows_; }
      set {
        tableRows_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "debug" field.</summary>
    public const int DebugFieldNumber = 11;
    private bool debug_;
    /// <summary>
    ///  Signals Gauge that the execution is being debugged, usually via an identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Debug {
      get { return debug_; }
      set {
        debug_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!specs_.Equals(other.specs_)) return false;
      if (Tags != other.Tags) return false;
      if (WorkingDir != other.WorkingDir) return false;
      if (Env != other.Env) return false;
      if (LogLevel != other.LogLevel) return false;
      if (IsParallel != other.IsParallel) return false;
      if (ParallelStreams != other.ParallelStreams) return false;
      if (Sort != other.Sort) return false;
      if (Strategy != other.Strategy) return false;
      if (TableRows != other.TableRows) return false;
      if (Debug != other.Debug) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= specs_.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (WorkingDir.Length != 0) hash ^= WorkingDir.GetHashCode();
      if (Env.Length != 0) hash ^= Env.GetHashCode();
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (IsParallel != false) hash ^= IsParallel.GetHashCode();
      if (ParallelStreams != 0) hash ^= ParallelStreams.GetHashCode();
      if (Sort != false) hash ^= Sort.GetHashCode();
      if (Strategy != 0) hash ^= Strategy.GetHashCode();
      if (TableRows.Length != 0) hash ^= TableRows.GetHashCode();
      if (Debug != false) hash ^= Debug.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      specs_.WriteTo(output, _repeated_specs_codec);
      if (Tags.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tags);
      }
      if (WorkingDir.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WorkingDir);
      }
      if (Env.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Env);
      }
      if (LogLevel != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LogLevel);
      }
      if (IsParallel != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsParallel);
      }
      if (ParallelStreams != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ParallelStreams);
      }
      if (Sort != false) {
        output.WriteRawTag(64);
        output.WriteBool(Sort);
      }
      if (Strategy != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Strategy);
      }
      if (TableRows.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TableRows);
      }
      if (Debug != false) {
        output.WriteRawTag(88);
        output.WriteBool(Debug);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += specs_.CalculateSize(_repeated_specs_codec);
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (WorkingDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkingDir);
      }
      if (Env.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Env);
      }
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogLevel);
      }
      if (IsParallel != false) {
        size += 1 + 1;
      }
      if (ParallelStreams != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParallelStreams);
      }
      if (Sort != false) {
        size += 1 + 1;
      }
      if (Strategy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Strategy);
      }
      if (TableRows.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableRows);
      }
      if (Debug != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutionRequest other) {
      if (other == null) {
        return;
      }
      specs_.Add(other.specs_);
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      if (other.WorkingDir.Length != 0) {
        WorkingDir = other.WorkingDir;
      }
      if (other.Env.Length != 0) {
        Env = other.Env;
      }
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.IsParallel != false) {
        IsParallel = other.IsParallel;
      }
      if (other.ParallelStreams != 0) {
        ParallelStreams = other.ParallelStreams;
      }
      if (other.Sort != false) {
        Sort = other.Sort;
      }
      if (other.Strategy != 0) {
        Strategy = other.Strategy;
      }
      if (other.TableRows.Length != 0) {
        TableRows = other.TableRows;
      }
      if (other.Debug != false) {
        Debug = other.Debug;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            specs_.AddEntriesFrom(input, _repeated_specs_codec);
            break;
          }
          case 18: {
            Tags = input.ReadString();
            break;
          }
          case 26: {
            WorkingDir = input.ReadString();
            break;
          }
          case 34: {
            Env = input.ReadString();
            break;
          }
          case 40: {
            logLevel_ = (global::Gauge.Messages.ExecutionRequest.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 48: {
            IsParallel = input.ReadBool();
            break;
          }
          case 56: {
            ParallelStreams = input.ReadInt32();
            break;
          }
          case 64: {
            Sort = input.ReadBool();
            break;
          }
          case 72: {
            strategy_ = (global::Gauge.Messages.ExecutionRequest.Types.Strategy) input.ReadEnum();
            break;
          }
          case 82: {
            TableRows = input.ReadString();
            break;
          }
          case 88: {
            Debug = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ExecutionRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Types of log level that gauge supports
      /// </summary>
      public enum LogLevel {
        [pbr::OriginalName("INFO")] Info = 0,
        [pbr::OriginalName("DEBUG")] Debug = 1,
        [pbr::OriginalName("WARNING")] Warning = 2,
        [pbr::OriginalName("ERROR")] Error = 3,
      }

      /// <summary>
      ///  Strategies for parallelization
      /// </summary>
      public enum Strategy {
        [pbr::OriginalName("LAZY")] Lazy = 0,
        [pbr::OriginalName("EAGER")] Eager = 1,
      }

    }
    #endregion

  }

  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.ApiV2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result(Result other) : this() {
      status_ = other.status_;
      errors_ = other.errors_.Clone();
      executionTime_ = other.executionTime_;
      stdout_ = other.stdout_;
      BeforeHookFailure = other.beforeHookFailure_ != null ? other.BeforeHookFailure.Clone() : null;
      AfterHookFailure = other.afterHookFailure_ != null ? other.AfterHookFailure.Clone() : null;
      tableRowNumber_ = other.tableRowNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Gauge.Messages.Result.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.Result.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Gauge.Messages.Result.Types.ExecutionError> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(18, global::Gauge.Messages.Result.Types.ExecutionError.Parser);
    private readonly pbc::RepeatedField<global::Gauge.Messages.Result.Types.ExecutionError> errors_ = new pbc::RepeatedField<global::Gauge.Messages.Result.Types.ExecutionError>();
    /// <summary>
    ///  Contains the Execution errors and its details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gauge.Messages.Result.Types.ExecutionError> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "executionTime" field.</summary>
    public const int ExecutionTimeFieldNumber = 3;
    private long executionTime_;
    /// <summary>
    ///  Specifies the execution time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutionTime {
      get { return executionTime_; }
      set {
        executionTime_ = value;
      }
    }

    /// <summary>Field number for the "stdout" field.</summary>
    public const int StdoutFieldNumber = 4;
    private string stdout_ = "";
    /// <summary>
    ///  Contains the console output messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stdout {
      get { return stdout_; }
      set {
        stdout_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beforeHookFailure" field.</summary>
    public const int BeforeHookFailureFieldNumber = 5;
    private global::Gauge.Messages.Result.Types.ExecutionError beforeHookFailure_;
    /// <summary>
    ///  Holds the before hook failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.Result.Types.ExecutionError BeforeHookFailure {
      get { return beforeHookFailure_; }
      set {
        beforeHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "afterHookFailure" field.</summary>
    public const int AfterHookFailureFieldNumber = 6;
    private global::Gauge.Messages.Result.Types.ExecutionError afterHookFailure_;
    /// <summary>
    ///  Holds the after hook failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.Result.Types.ExecutionError AfterHookFailure {
      get { return afterHookFailure_; }
      set {
        afterHookFailure_ = value;
      }
    }

    /// <summary>Field number for the "tableRowNumber" field.</summary>
    public const int TableRowNumberFieldNumber = 7;
    private long tableRowNumber_;
    /// <summary>
    ///  Holds the table row number (starting with 1) against which the scenario was executed.
    ///  This field is populated only for data table driven scenarios.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TableRowNumber {
      get { return tableRowNumber_; }
      set {
        tableRowNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!errors_.Equals(other.errors_)) return false;
      if (ExecutionTime != other.ExecutionTime) return false;
      if (Stdout != other.Stdout) return false;
      if (!object.Equals(BeforeHookFailure, other.BeforeHookFailure)) return false;
      if (!object.Equals(AfterHookFailure, other.AfterHookFailure)) return false;
      if (TableRowNumber != other.TableRowNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (ExecutionTime != 0L) hash ^= ExecutionTime.GetHashCode();
      if (Stdout.Length != 0) hash ^= Stdout.GetHashCode();
      if (beforeHookFailure_ != null) hash ^= BeforeHookFailure.GetHashCode();
      if (afterHookFailure_ != null) hash ^= AfterHookFailure.GetHashCode();
      if (TableRowNumber != 0L) hash ^= TableRowNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (ExecutionTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExecutionTime);
      }
      if (Stdout.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Stdout);
      }
      if (beforeHookFailure_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BeforeHookFailure);
      }
      if (afterHookFailure_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AfterHookFailure);
      }
      if (TableRowNumber != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TableRowNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (ExecutionTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTime);
      }
      if (Stdout.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stdout);
      }
      if (beforeHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeforeHookFailure);
      }
      if (afterHookFailure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AfterHookFailure);
      }
      if (TableRowNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TableRowNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      errors_.Add(other.errors_);
      if (other.ExecutionTime != 0L) {
        ExecutionTime = other.ExecutionTime;
      }
      if (other.Stdout.Length != 0) {
        Stdout = other.Stdout;
      }
      if (other.beforeHookFailure_ != null) {
        if (beforeHookFailure_ == null) {
          beforeHookFailure_ = new global::Gauge.Messages.Result.Types.ExecutionError();
        }
        BeforeHookFailure.MergeFrom(other.BeforeHookFailure);
      }
      if (other.afterHookFailure_ != null) {
        if (afterHookFailure_ == null) {
          afterHookFailure_ = new global::Gauge.Messages.Result.Types.ExecutionError();
        }
        AfterHookFailure.MergeFrom(other.AfterHookFailure);
      }
      if (other.TableRowNumber != 0L) {
        TableRowNumber = other.TableRowNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Gauge.Messages.Result.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 24: {
            ExecutionTime = input.ReadInt64();
            break;
          }
          case 34: {
            Stdout = input.ReadString();
            break;
          }
          case 42: {
            if (beforeHookFailure_ == null) {
              beforeHookFailure_ = new global::Gauge.Messages.Result.Types.ExecutionError();
            }
            input.ReadMessage(beforeHookFailure_);
            break;
          }
          case 50: {
            if (afterHookFailure_ == null) {
              afterHookFailure_ = new global::Gauge.Messages.Result.Types.ExecutionError();
            }
            input.ReadMessage(afterHookFailure_);
            break;
          }
          case 56: {
            TableRowNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Result message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Specifies the execution status
      /// </summary>
      public enum Status {
        [pbr::OriginalName("PASSED")] Passed = 0,
        [pbr::OriginalName("FAILED")] Failed = 1,
        [pbr::OriginalName("SKIPPED")] Skipped = 2,
      }

      /// <summary>
      ///  ExecutionError represents the failure during execution along with details of failure
      /// </summary>
      public sealed partial class ExecutionError : pb::IMessage<ExecutionError> {
        private static readonly pb::MessageParser<ExecutionError> _parser = new pb::MessageParser<ExecutionError>(() => new ExecutionError());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExecutionError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Gauge.Messages.Result.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecutionError() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecutionError(ExecutionError other) : this() {
          errorMessage_ = other.errorMessage_;
          stackTrace_ = other.stackTrace_;
          screenshot_ = other.screenshot_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecutionError Clone() {
          return new ExecutionError(this);
        }

        /// <summary>Field number for the "errorMessage" field.</summary>
        public const int ErrorMessageFieldNumber = 1;
        private string errorMessage_ = "";
        /// <summary>
        ///  Error message from the failure
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorMessage {
          get { return errorMessage_; }
          set {
            errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stackTrace" field.</summary>
        public const int StackTraceFieldNumber = 2;
        private string stackTrace_ = "";
        /// <summary>
        ///  Stacktrace from the failure
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StackTrace {
          get { return stackTrace_; }
          set {
            stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "screenshot" field.</summary>
        public const int ScreenshotFieldNumber = 3;
        private pb::ByteString screenshot_ = pb::ByteString.Empty;
        /// <summary>
        ///  Byte array holding the screenshot taken at the time of failure.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Screenshot {
          get { return screenshot_; }
          set {
            screenshot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ExecutionError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ExecutionError other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ErrorMessage != other.ErrorMessage) return false;
          if (StackTrace != other.StackTrace) return false;
          if (Screenshot != other.Screenshot) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
          if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
          if (Screenshot.Length != 0) hash ^= Screenshot.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ErrorMessage.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ErrorMessage);
          }
          if (StackTrace.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(StackTrace);
          }
          if (Screenshot.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Screenshot);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ErrorMessage.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
          }
          if (StackTrace.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
          }
          if (Screenshot.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Screenshot);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ExecutionError other) {
          if (other == null) {
            return;
          }
          if (other.ErrorMessage.Length != 0) {
            ErrorMessage = other.ErrorMessage;
          }
          if (other.StackTrace.Length != 0) {
            StackTrace = other.StackTrace;
          }
          if (other.Screenshot.Length != 0) {
            Screenshot = other.Screenshot;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ErrorMessage = input.ReadString();
                break;
              }
              case 18: {
                StackTrace = input.ReadString();
                break;
              }
              case 26: {
                Screenshot = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  ExecutionResponse defines the structure of response for ExecutionRequest message
  /// </summary>
  public sealed partial class ExecutionResponse : pb::IMessage<ExecutionResponse> {
    private static readonly pb::MessageParser<ExecutionResponse> _parser = new pb::MessageParser<ExecutionResponse>(() => new ExecutionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.ApiV2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionResponse(ExecutionResponse other) : this() {
      type_ = other.type_;
      iD_ = other.iD_;
      Result = other.result_ != null ? other.Result.Clone() : null;
      runnerProcessId_ = other.runnerProcessId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionResponse Clone() {
      return new ExecutionResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Gauge.Messages.ExecutionResponse.Types.Type type_ = 0;
    /// <summary>
    ///  Response type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.ExecutionResponse.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private string iD_ = "";
    /// <summary>
    ///  An identifier for the current execution result. This field is populated only for spec/scenario result.
    ///  For spec, the value will be the filename.
    ///  For scenario, the value will be filename:scenario_heading_line_num.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Gauge.Messages.Result result_;
    /// <summary>
    ///  Contains all the result details. This field is populated only for ScenarioStart, ScenaioEnd, SpecEnd, SuiteEnd, ErrorResult
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gauge.Messages.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "RunnerProcessId" field.</summary>
    public const int RunnerProcessIdFieldNumber = 4;
    private int runnerProcessId_;
    /// <summary>
    ///  Contains the processId of the language runner used for execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RunnerProcessId {
      get { return runnerProcessId_; }
      set {
        runnerProcessId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ID != other.ID) return false;
      if (!object.Equals(Result, other.Result)) return false;
      if (RunnerProcessId != other.RunnerProcessId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (RunnerProcessId != 0) hash ^= RunnerProcessId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (ID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ID);
      }
      if (result_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Result);
      }
      if (RunnerProcessId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RunnerProcessId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (RunnerProcessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunnerProcessId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Gauge.Messages.Result();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.RunnerProcessId != 0) {
        RunnerProcessId = other.RunnerProcessId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Gauge.Messages.ExecutionResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            ID = input.ReadString();
            break;
          }
          case 26: {
            if (result_ == null) {
              result_ = new global::Gauge.Messages.Result();
            }
            input.ReadMessage(result_);
            break;
          }
          case 32: {
            RunnerProcessId = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ExecutionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Types of Execution respone
      /// </summary>
      public enum Type {
        [pbr::OriginalName("SuiteStart")] SuiteStart = 0,
        [pbr::OriginalName("SpecStart")] SpecStart = 1,
        [pbr::OriginalName("ScenarioStart")] ScenarioStart = 2,
        [pbr::OriginalName("ScenarioEnd")] ScenarioEnd = 3,
        [pbr::OriginalName("SpecEnd")] SpecEnd = 4,
        [pbr::OriginalName("SuiteEnd")] SuiteEnd = 5,
        [pbr::OriginalName("ErrorResult")] ErrorResult = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
