// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gauge.Messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Api {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetProjectRootRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetProjectRootRequest, global::Gauge.Messages.GetProjectRootRequest.Builder> internal__static_gauge_messages_GetProjectRootRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetProjectRootResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetProjectRootResponse, global::Gauge.Messages.GetProjectRootResponse.Builder> internal__static_gauge_messages_GetProjectRootResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetInstallationRootRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetInstallationRootRequest, global::Gauge.Messages.GetInstallationRootRequest.Builder> internal__static_gauge_messages_GetInstallationRootRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetInstallationRootResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetInstallationRootResponse, global::Gauge.Messages.GetInstallationRootResponse.Builder> internal__static_gauge_messages_GetInstallationRootResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetAllStepsRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllStepsRequest, global::Gauge.Messages.GetAllStepsRequest.Builder> internal__static_gauge_messages_GetAllStepsRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetAllStepsResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllStepsResponse, global::Gauge.Messages.GetAllStepsResponse.Builder> internal__static_gauge_messages_GetAllStepsResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetAllSpecsRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllSpecsRequest, global::Gauge.Messages.GetAllSpecsRequest.Builder> internal__static_gauge_messages_GetAllSpecsRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetAllSpecsResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllSpecsResponse, global::Gauge.Messages.GetAllSpecsResponse.Builder> internal__static_gauge_messages_GetAllSpecsResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetAllConceptsRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllConceptsRequest, global::Gauge.Messages.GetAllConceptsRequest.Builder> internal__static_gauge_messages_GetAllConceptsRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetAllConceptsResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllConceptsResponse, global::Gauge.Messages.GetAllConceptsResponse.Builder> internal__static_gauge_messages_GetAllConceptsResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_ConceptInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ConceptInfo, global::Gauge.Messages.ConceptInfo.Builder> internal__static_gauge_messages_ConceptInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetStepValueRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetStepValueRequest, global::Gauge.Messages.GetStepValueRequest.Builder> internal__static_gauge_messages_GetStepValueRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetStepValueResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetStepValueResponse, global::Gauge.Messages.GetStepValueResponse.Builder> internal__static_gauge_messages_GetStepValueResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetLanguagePluginLibPathRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetLanguagePluginLibPathRequest, global::Gauge.Messages.GetLanguagePluginLibPathRequest.Builder> internal__static_gauge_messages_GetLanguagePluginLibPathRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_GetLanguagePluginLibPathResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetLanguagePluginLibPathResponse, global::Gauge.Messages.GetLanguagePluginLibPathResponse.Builder> internal__static_gauge_messages_GetLanguagePluginLibPathResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_ErrorResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ErrorResponse, global::Gauge.Messages.ErrorResponse.Builder> internal__static_gauge_messages_ErrorResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_PerformRefactoringRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.PerformRefactoringRequest, global::Gauge.Messages.PerformRefactoringRequest.Builder> internal__static_gauge_messages_PerformRefactoringRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_PerformRefactoringResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.PerformRefactoringResponse, global::Gauge.Messages.PerformRefactoringResponse.Builder> internal__static_gauge_messages_PerformRefactoringResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_ExtractConceptInfoRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ExtractConceptInfoRequest, global::Gauge.Messages.ExtractConceptInfoRequest.Builder> internal__static_gauge_messages_ExtractConceptInfoRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_ExtractConceptRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ExtractConceptRequest, global::Gauge.Messages.ExtractConceptRequest.Builder> internal__static_gauge_messages_ExtractConceptRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_textInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.textInfo, global::Gauge.Messages.textInfo.Builder> internal__static_gauge_messages_textInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_step__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.step, global::Gauge.Messages.step.Builder> internal__static_gauge_messages_step__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_ExtractConceptResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ExtractConceptResponse, global::Gauge.Messages.ExtractConceptResponse.Builder> internal__static_gauge_messages_ExtractConceptResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gauge_messages_APIMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.APIMessage, global::Gauge.Messages.APIMessage.Builder> internal__static_gauge_messages_APIMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Api() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SDmdhdWdlLm1lc3NhZ2VzGgpzcGVjLnByb3RvIhcKFUdl", 
            "dFByb2plY3RSb290UmVxdWVzdCItChZHZXRQcm9qZWN0Um9vdFJlc3BvbnNl", 
            "EhMKC3Byb2plY3RSb290GAEgAigJIhwKGkdldEluc3RhbGxhdGlvblJvb3RS", 
            "ZXF1ZXN0IjcKG0dldEluc3RhbGxhdGlvblJvb3RSZXNwb25zZRIYChBpbnN0", 
            "YWxsYXRpb25Sb290GAEgAigJIhQKEkdldEFsbFN0ZXBzUmVxdWVzdCJHChNH", 
            "ZXRBbGxTdGVwc1Jlc3BvbnNlEjAKCGFsbFN0ZXBzGAEgAygLMh4uZ2F1Z2Uu", 
            "bWVzc2FnZXMuUHJvdG9TdGVwVmFsdWUiFAoSR2V0QWxsU3BlY3NSZXF1ZXN0", 
            "Ij8KE0dldEFsbFNwZWNzUmVzcG9uc2USKAoFc3BlY3MYASADKAsyGS5nYXVn", 
            "ZS5tZXNzYWdlcy5Qcm90b1NwZWMiFwoVR2V0QWxsQ29uY2VwdHNSZXF1ZXN0", 
            "IkcKFkdldEFsbENvbmNlcHRzUmVzcG9uc2USLQoIY29uY2VwdHMYASADKAsy", 
            "Gy5nYXVnZS5tZXNzYWdlcy5Db25jZXB0SW5mbyJmCgtDb25jZXB0SW5mbxIx", 
            "CglzdGVwVmFsdWUYASACKAsyHi5nYXVnZS5tZXNzYWdlcy5Qcm90b1N0ZXBW", 
            "YWx1ZRIQCghmaWxlcGF0aBgCIAIoCRISCgpsaW5lTnVtYmVyGAMgAigFIj8K", 
            "E0dldFN0ZXBWYWx1ZVJlcXVlc3QSEAoIc3RlcFRleHQYASACKAkSFgoOaGFz", 
            "SW5saW5lVGFibGUYAiABKAgiSQoUR2V0U3RlcFZhbHVlUmVzcG9uc2USMQoJ", 
            "c3RlcFZhbHVlGAEgAigLMh4uZ2F1Z2UubWVzc2FnZXMuUHJvdG9TdGVwVmFs", 
            "dWUiMwofR2V0TGFuZ3VhZ2VQbHVnaW5MaWJQYXRoUmVxdWVzdBIQCghsYW5n", 
            "dWFnZRgBIAIoCSIwCiBHZXRMYW5ndWFnZVBsdWdpbkxpYlBhdGhSZXNwb25z", 
            "ZRIMCgRwYXRoGAEgAigJIh4KDUVycm9yUmVzcG9uc2USDQoFZXJyb3IYASAC", 
            "KAkiPQoZUGVyZm9ybVJlZmFjdG9yaW5nUmVxdWVzdBIPCgdvbGRTdGVwGAEg", 
            "AigJEg8KB25ld1N0ZXAYAiACKAkiUwoaUGVyZm9ybVJlZmFjdG9yaW5nUmVz", 
            "cG9uc2USDwoHc3VjY2VzcxgBIAIoCBIOCgZlcnJvcnMYAiADKAkSFAoMZmls", 
            "ZXNDaGFuZ2VkGAMgAygJIikKGUV4dHJhY3RDb25jZXB0SW5mb1JlcXVlc3QS", 
            "DAoEdGV4dBgBIAIoCSLRAQoVRXh0cmFjdENvbmNlcHRSZXF1ZXN0EikKC2Nv", 
            "bmNlcHROYW1lGAEgAigLMhQuZ2F1Z2UubWVzc2FnZXMuc3RlcBIjCgVzdGVw", 
            "cxgCIAMoCzIULmdhdWdlLm1lc3NhZ2VzLnN0ZXASGwoTY2hhbmdlQWNyb3Nz", 
            "UHJvamVjdBgDIAIoCBIXCg9jb25jZXB0RmlsZU5hbWUYBCACKAkSMgoQc2Vs", 
            "ZWN0ZWRUZXh0SW5mbxgFIAEoCzIYLmdhdWdlLm1lc3NhZ2VzLnRleHRJbmZv", 
            "IkcKCHRleHRJbmZvEhAKCGZpbGVOYW1lGAEgAigJEhYKDnN0YXJ0aW5nTGlu", 
            "ZU5vGAIgAigFEhEKCWVuZExpbmVObxgDIAIoBSI7CgRzdGVwEgwKBG5hbWUY", 
            "ASACKAkSDQoFdGFibGUYAiABKAkSFgoOcGFyYW1UYWJsZU5hbWUYAyABKAki", 
            "UAoWRXh0cmFjdENvbmNlcHRSZXNwb25zZRIRCglpc1N1Y2Nlc3MYASACKAgS", 
            "DQoFZXJyb3IYAiABKAkSFAoMZmlsZXNDaGFuZ2VkGAMgAygJIpsPCgpBUElN", 
            "ZXNzYWdlEj4KC21lc3NhZ2VUeXBlGAEgAigOMikuZ2F1Z2UubWVzc2FnZXMu", 
            "QVBJTWVzc2FnZS5BUElNZXNzYWdlVHlwZRIRCgltZXNzYWdlSWQYAiACKAMS", 
            "QQoScHJvamVjdFJvb3RSZXF1ZXN0GAMgASgLMiUuZ2F1Z2UubWVzc2FnZXMu", 
            "R2V0UHJvamVjdFJvb3RSZXF1ZXN0EkMKE3Byb2plY3RSb290UmVzcG9uc2UY", 
            "BCABKAsyJi5nYXVnZS5tZXNzYWdlcy5HZXRQcm9qZWN0Um9vdFJlc3BvbnNl", 
            "EksKF2luc3RhbGxhdGlvblJvb3RSZXF1ZXN0GAUgASgLMiouZ2F1Z2UubWVz", 
            "c2FnZXMuR2V0SW5zdGFsbGF0aW9uUm9vdFJlcXVlc3QSTQoYaW5zdGFsbGF0", 
            "aW9uUm9vdFJlc3BvbnNlGAYgASgLMisuZ2F1Z2UubWVzc2FnZXMuR2V0SW5z", 
            "dGFsbGF0aW9uUm9vdFJlc3BvbnNlEjsKD2FsbFN0ZXBzUmVxdWVzdBgHIAEo", 
            "CzIiLmdhdWdlLm1lc3NhZ2VzLkdldEFsbFN0ZXBzUmVxdWVzdBI9ChBhbGxT", 
            "dGVwc1Jlc3BvbnNlGAggASgLMiMuZ2F1Z2UubWVzc2FnZXMuR2V0QWxsU3Rl", 
            "cHNSZXNwb25zZRI7Cg9hbGxTcGVjc1JlcXVlc3QYCSABKAsyIi5nYXVnZS5t", 
            "ZXNzYWdlcy5HZXRBbGxTcGVjc1JlcXVlc3QSPQoQYWxsU3BlY3NSZXNwb25z", 
            "ZRgKIAEoCzIjLmdhdWdlLm1lc3NhZ2VzLkdldEFsbFNwZWNzUmVzcG9uc2US", 
            "PQoQc3RlcFZhbHVlUmVxdWVzdBgLIAEoCzIjLmdhdWdlLm1lc3NhZ2VzLkdl", 
            "dFN0ZXBWYWx1ZVJlcXVlc3QSPwoRc3RlcFZhbHVlUmVzcG9uc2UYDCABKAsy", 
            "JC5nYXVnZS5tZXNzYWdlcy5HZXRTdGVwVmFsdWVSZXNwb25zZRJHCg5saWJQ", 
            "YXRoUmVxdWVzdBgNIAEoCzIvLmdhdWdlLm1lc3NhZ2VzLkdldExhbmd1YWdl", 
            "UGx1Z2luTGliUGF0aFJlcXVlc3QSSQoPbGliUGF0aFJlc3BvbnNlGA4gASgL", 
            "MjAuZ2F1Z2UubWVzc2FnZXMuR2V0TGFuZ3VhZ2VQbHVnaW5MaWJQYXRoUmVz", 
            "cG9uc2USLAoFZXJyb3IYDyABKAsyHS5nYXVnZS5tZXNzYWdlcy5FcnJvclJl", 
            "c3BvbnNlEkEKEmFsbENvbmNlcHRzUmVxdWVzdBgQIAEoCzIlLmdhdWdlLm1l", 
            "c3NhZ2VzLkdldEFsbENvbmNlcHRzUmVxdWVzdBJDChNhbGxDb25jZXB0c1Jl", 
            "c3BvbnNlGBEgASgLMiYuZ2F1Z2UubWVzc2FnZXMuR2V0QWxsQ29uY2VwdHNS", 
            "ZXNwb25zZRJMChlwZXJmb3JtUmVmYWN0b3JpbmdSZXF1ZXN0GBIgASgLMiku", 
            "Z2F1Z2UubWVzc2FnZXMuUGVyZm9ybVJlZmFjdG9yaW5nUmVxdWVzdBJOChpw", 
            "ZXJmb3JtUmVmYWN0b3JpbmdSZXNwb25zZRgTIAEoCzIqLmdhdWdlLm1lc3Nh", 
            "Z2VzLlBlcmZvcm1SZWZhY3RvcmluZ1Jlc3BvbnNlEkQKFWV4dHJhY3RDb25j", 
            "ZXB0UmVxdWVzdBgUIAEoCzIlLmdhdWdlLm1lc3NhZ2VzLkV4dHJhY3RDb25j", 
            "ZXB0UmVxdWVzdBJGChZleHRyYWN0Q29uY2VwdFJlc3BvbnNlGBUgASgLMiYu", 
            "Z2F1Z2UubWVzc2FnZXMuRXh0cmFjdENvbmNlcHRSZXNwb25zZSKnBAoOQVBJ", 
            "TWVzc2FnZVR5cGUSGQoVR2V0UHJvamVjdFJvb3RSZXF1ZXN0EAESGgoWR2V0", 
            "UHJvamVjdFJvb3RSZXNwb25zZRACEh4KGkdldEluc3RhbGxhdGlvblJvb3RS", 
            "ZXF1ZXN0EAMSHwobR2V0SW5zdGFsbGF0aW9uUm9vdFJlc3BvbnNlEAQSFgoS", 
            "R2V0QWxsU3RlcHNSZXF1ZXN0EAUSFgoSR2V0QWxsU3RlcFJlc3BvbnNlEAYS", 
            "FgoSR2V0QWxsU3BlY3NSZXF1ZXN0EAcSFwoTR2V0QWxsU3BlY3NSZXNwb25z", 
            "ZRAIEhcKE0dldFN0ZXBWYWx1ZVJlcXVlc3QQCRIYChRHZXRTdGVwVmFsdWVS", 
            "ZXNwb25zZRAKEiMKH0dldExhbmd1YWdlUGx1Z2luTGliUGF0aFJlcXVlc3QQ", 
            "CxIkCiBHZXRMYW5ndWFnZVBsdWdpbkxpYlBhdGhSZXNwb25zZRAMEhEKDUVy", 
            "cm9yUmVzcG9uc2UQDRIZChVHZXRBbGxDb25jZXB0c1JlcXVlc3QQDhIaChZH", 
            "ZXRBbGxDb25jZXB0c1Jlc3BvbnNlEA8SHQoZUGVyZm9ybVJlZmFjdG9yaW5n", 
            "UmVxdWVzdBAQEh4KGlBlcmZvcm1SZWZhY3RvcmluZ1Jlc3BvbnNlEBESGQoV", 
            "RXh0cmFjdENvbmNlcHRSZXF1ZXN0EBISGgoWRXh0cmFjdENvbmNlcHRSZXNw", 
          "b25zZRAT"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_gauge_messages_GetProjectRootRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_gauge_messages_GetProjectRootRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetProjectRootRequest, global::Gauge.Messages.GetProjectRootRequest.Builder>(internal__static_gauge_messages_GetProjectRootRequest__Descriptor,
                new string[] { });
        internal__static_gauge_messages_GetProjectRootResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_gauge_messages_GetProjectRootResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetProjectRootResponse, global::Gauge.Messages.GetProjectRootResponse.Builder>(internal__static_gauge_messages_GetProjectRootResponse__Descriptor,
                new string[] { "ProjectRoot", });
        internal__static_gauge_messages_GetInstallationRootRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_gauge_messages_GetInstallationRootRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetInstallationRootRequest, global::Gauge.Messages.GetInstallationRootRequest.Builder>(internal__static_gauge_messages_GetInstallationRootRequest__Descriptor,
                new string[] { });
        internal__static_gauge_messages_GetInstallationRootResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_gauge_messages_GetInstallationRootResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetInstallationRootResponse, global::Gauge.Messages.GetInstallationRootResponse.Builder>(internal__static_gauge_messages_GetInstallationRootResponse__Descriptor,
                new string[] { "InstallationRoot", });
        internal__static_gauge_messages_GetAllStepsRequest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_gauge_messages_GetAllStepsRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllStepsRequest, global::Gauge.Messages.GetAllStepsRequest.Builder>(internal__static_gauge_messages_GetAllStepsRequest__Descriptor,
                new string[] { });
        internal__static_gauge_messages_GetAllStepsResponse__Descriptor = Descriptor.MessageTypes[5];
        internal__static_gauge_messages_GetAllStepsResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllStepsResponse, global::Gauge.Messages.GetAllStepsResponse.Builder>(internal__static_gauge_messages_GetAllStepsResponse__Descriptor,
                new string[] { "AllSteps", });
        internal__static_gauge_messages_GetAllSpecsRequest__Descriptor = Descriptor.MessageTypes[6];
        internal__static_gauge_messages_GetAllSpecsRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllSpecsRequest, global::Gauge.Messages.GetAllSpecsRequest.Builder>(internal__static_gauge_messages_GetAllSpecsRequest__Descriptor,
                new string[] { });
        internal__static_gauge_messages_GetAllSpecsResponse__Descriptor = Descriptor.MessageTypes[7];
        internal__static_gauge_messages_GetAllSpecsResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllSpecsResponse, global::Gauge.Messages.GetAllSpecsResponse.Builder>(internal__static_gauge_messages_GetAllSpecsResponse__Descriptor,
                new string[] { "Specs", });
        internal__static_gauge_messages_GetAllConceptsRequest__Descriptor = Descriptor.MessageTypes[8];
        internal__static_gauge_messages_GetAllConceptsRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllConceptsRequest, global::Gauge.Messages.GetAllConceptsRequest.Builder>(internal__static_gauge_messages_GetAllConceptsRequest__Descriptor,
                new string[] { });
        internal__static_gauge_messages_GetAllConceptsResponse__Descriptor = Descriptor.MessageTypes[9];
        internal__static_gauge_messages_GetAllConceptsResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetAllConceptsResponse, global::Gauge.Messages.GetAllConceptsResponse.Builder>(internal__static_gauge_messages_GetAllConceptsResponse__Descriptor,
                new string[] { "Concepts", });
        internal__static_gauge_messages_ConceptInfo__Descriptor = Descriptor.MessageTypes[10];
        internal__static_gauge_messages_ConceptInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ConceptInfo, global::Gauge.Messages.ConceptInfo.Builder>(internal__static_gauge_messages_ConceptInfo__Descriptor,
                new string[] { "StepValue", "Filepath", "LineNumber", });
        internal__static_gauge_messages_GetStepValueRequest__Descriptor = Descriptor.MessageTypes[11];
        internal__static_gauge_messages_GetStepValueRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetStepValueRequest, global::Gauge.Messages.GetStepValueRequest.Builder>(internal__static_gauge_messages_GetStepValueRequest__Descriptor,
                new string[] { "StepText", "HasInlineTable", });
        internal__static_gauge_messages_GetStepValueResponse__Descriptor = Descriptor.MessageTypes[12];
        internal__static_gauge_messages_GetStepValueResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetStepValueResponse, global::Gauge.Messages.GetStepValueResponse.Builder>(internal__static_gauge_messages_GetStepValueResponse__Descriptor,
                new string[] { "StepValue", });
        internal__static_gauge_messages_GetLanguagePluginLibPathRequest__Descriptor = Descriptor.MessageTypes[13];
        internal__static_gauge_messages_GetLanguagePluginLibPathRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetLanguagePluginLibPathRequest, global::Gauge.Messages.GetLanguagePluginLibPathRequest.Builder>(internal__static_gauge_messages_GetLanguagePluginLibPathRequest__Descriptor,
                new string[] { "Language", });
        internal__static_gauge_messages_GetLanguagePluginLibPathResponse__Descriptor = Descriptor.MessageTypes[14];
        internal__static_gauge_messages_GetLanguagePluginLibPathResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.GetLanguagePluginLibPathResponse, global::Gauge.Messages.GetLanguagePluginLibPathResponse.Builder>(internal__static_gauge_messages_GetLanguagePluginLibPathResponse__Descriptor,
                new string[] { "Path", });
        internal__static_gauge_messages_ErrorResponse__Descriptor = Descriptor.MessageTypes[15];
        internal__static_gauge_messages_ErrorResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ErrorResponse, global::Gauge.Messages.ErrorResponse.Builder>(internal__static_gauge_messages_ErrorResponse__Descriptor,
                new string[] { "Error", });
        internal__static_gauge_messages_PerformRefactoringRequest__Descriptor = Descriptor.MessageTypes[16];
        internal__static_gauge_messages_PerformRefactoringRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.PerformRefactoringRequest, global::Gauge.Messages.PerformRefactoringRequest.Builder>(internal__static_gauge_messages_PerformRefactoringRequest__Descriptor,
                new string[] { "OldStep", "NewStep", });
        internal__static_gauge_messages_PerformRefactoringResponse__Descriptor = Descriptor.MessageTypes[17];
        internal__static_gauge_messages_PerformRefactoringResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.PerformRefactoringResponse, global::Gauge.Messages.PerformRefactoringResponse.Builder>(internal__static_gauge_messages_PerformRefactoringResponse__Descriptor,
                new string[] { "Success", "Errors", "FilesChanged", });
        internal__static_gauge_messages_ExtractConceptInfoRequest__Descriptor = Descriptor.MessageTypes[18];
        internal__static_gauge_messages_ExtractConceptInfoRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ExtractConceptInfoRequest, global::Gauge.Messages.ExtractConceptInfoRequest.Builder>(internal__static_gauge_messages_ExtractConceptInfoRequest__Descriptor,
                new string[] { "Text", });
        internal__static_gauge_messages_ExtractConceptRequest__Descriptor = Descriptor.MessageTypes[19];
        internal__static_gauge_messages_ExtractConceptRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ExtractConceptRequest, global::Gauge.Messages.ExtractConceptRequest.Builder>(internal__static_gauge_messages_ExtractConceptRequest__Descriptor,
                new string[] { "ConceptName", "Steps", "ChangeAcrossProject", "ConceptFileName", "SelectedTextInfo", });
        internal__static_gauge_messages_textInfo__Descriptor = Descriptor.MessageTypes[20];
        internal__static_gauge_messages_textInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.textInfo, global::Gauge.Messages.textInfo.Builder>(internal__static_gauge_messages_textInfo__Descriptor,
                new string[] { "FileName", "StartingLineNo", "EndLineNo", });
        internal__static_gauge_messages_step__Descriptor = Descriptor.MessageTypes[21];
        internal__static_gauge_messages_step__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.step, global::Gauge.Messages.step.Builder>(internal__static_gauge_messages_step__Descriptor,
                new string[] { "Name", "Table", "ParamTableName", });
        internal__static_gauge_messages_ExtractConceptResponse__Descriptor = Descriptor.MessageTypes[22];
        internal__static_gauge_messages_ExtractConceptResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.ExtractConceptResponse, global::Gauge.Messages.ExtractConceptResponse.Builder>(internal__static_gauge_messages_ExtractConceptResponse__Descriptor,
                new string[] { "IsSuccess", "Error", "FilesChanged", });
        internal__static_gauge_messages_APIMessage__Descriptor = Descriptor.MessageTypes[23];
        internal__static_gauge_messages_APIMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gauge.Messages.APIMessage, global::Gauge.Messages.APIMessage.Builder>(internal__static_gauge_messages_APIMessage__Descriptor,
                new string[] { "MessageType", "MessageId", "ProjectRootRequest", "ProjectRootResponse", "InstallationRootRequest", "InstallationRootResponse", "AllStepsRequest", "AllStepsResponse", "AllSpecsRequest", "AllSpecsResponse", "StepValueRequest", "StepValueResponse", "LibPathRequest", "LibPathResponse", "Error", "AllConceptsRequest", "AllConceptsResponse", "PerformRefactoringRequest", "PerformRefactoringResponse", "ExtractConceptRequest", "ExtractConceptResponse", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Gauge.Messages.Spec.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetProjectRootRequest : pb::GeneratedMessage<GetProjectRootRequest, GetProjectRootRequest.Builder> {
    private GetProjectRootRequest() { }
    private static readonly GetProjectRootRequest defaultInstance = new GetProjectRootRequest().MakeReadOnly();
    private static readonly string[] _getProjectRootRequestFieldNames = new string[] {  };
    private static readonly uint[] _getProjectRootRequestFieldTags = new uint[] {  };
    public static GetProjectRootRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetProjectRootRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetProjectRootRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetProjectRootRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetProjectRootRequest, GetProjectRootRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetProjectRootRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getProjectRootRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetProjectRootRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetProjectRootRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetProjectRootRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetProjectRootRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetProjectRootRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetProjectRootRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetProjectRootRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetProjectRootRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetProjectRootRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetProjectRootRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetProjectRootRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetProjectRootRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetProjectRootRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetProjectRootRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetProjectRootRequest result;
      
      private GetProjectRootRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetProjectRootRequest original = result;
          result = new GetProjectRootRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetProjectRootRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetProjectRootRequest.Descriptor; }
      }
      
      public override GetProjectRootRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.GetProjectRootRequest.DefaultInstance; }
      }
      
      public override GetProjectRootRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetProjectRootRequest) {
          return MergeFrom((GetProjectRootRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetProjectRootRequest other) {
        if (other == global::Gauge.Messages.GetProjectRootRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getProjectRootRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getProjectRootRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetProjectRootRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetProjectRootResponse : pb::GeneratedMessage<GetProjectRootResponse, GetProjectRootResponse.Builder> {
    private GetProjectRootResponse() { }
    private static readonly GetProjectRootResponse defaultInstance = new GetProjectRootResponse().MakeReadOnly();
    private static readonly string[] _getProjectRootResponseFieldNames = new string[] { "projectRoot" };
    private static readonly uint[] _getProjectRootResponseFieldTags = new uint[] { 10 };
    public static GetProjectRootResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetProjectRootResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetProjectRootResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetProjectRootResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetProjectRootResponse, GetProjectRootResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetProjectRootResponse__FieldAccessorTable; }
    }
    
    public const int ProjectRootFieldNumber = 1;
    private bool hasProjectRoot;
    private string projectRoot_ = "";
    public bool HasProjectRoot {
      get { return hasProjectRoot; }
    }
    public string ProjectRoot {
      get { return projectRoot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProjectRoot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getProjectRootResponseFieldNames;
      if (hasProjectRoot) {
        output.WriteString(1, field_names[0], ProjectRoot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasProjectRoot) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ProjectRoot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetProjectRootResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetProjectRootResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetProjectRootResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetProjectRootResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetProjectRootResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetProjectRootResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetProjectRootResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetProjectRootResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetProjectRootResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetProjectRootResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetProjectRootResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetProjectRootResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetProjectRootResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetProjectRootResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetProjectRootResponse result;
      
      private GetProjectRootResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetProjectRootResponse original = result;
          result = new GetProjectRootResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetProjectRootResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetProjectRootResponse.Descriptor; }
      }
      
      public override GetProjectRootResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.GetProjectRootResponse.DefaultInstance; }
      }
      
      public override GetProjectRootResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetProjectRootResponse) {
          return MergeFrom((GetProjectRootResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetProjectRootResponse other) {
        if (other == global::Gauge.Messages.GetProjectRootResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProjectRoot) {
          ProjectRoot = other.ProjectRoot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getProjectRootResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getProjectRootResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasProjectRoot = input.ReadString(ref result.projectRoot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProjectRoot {
        get { return result.hasProjectRoot; }
      }
      public string ProjectRoot {
        get { return result.ProjectRoot; }
        set { SetProjectRoot(value); }
      }
      public Builder SetProjectRoot(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProjectRoot = true;
        result.projectRoot_ = value;
        return this;
      }
      public Builder ClearProjectRoot() {
        PrepareBuilder();
        result.hasProjectRoot = false;
        result.projectRoot_ = "";
        return this;
      }
    }
    static GetProjectRootResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetInstallationRootRequest : pb::GeneratedMessage<GetInstallationRootRequest, GetInstallationRootRequest.Builder> {
    private GetInstallationRootRequest() { }
    private static readonly GetInstallationRootRequest defaultInstance = new GetInstallationRootRequest().MakeReadOnly();
    private static readonly string[] _getInstallationRootRequestFieldNames = new string[] {  };
    private static readonly uint[] _getInstallationRootRequestFieldTags = new uint[] {  };
    public static GetInstallationRootRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetInstallationRootRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetInstallationRootRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetInstallationRootRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetInstallationRootRequest, GetInstallationRootRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetInstallationRootRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getInstallationRootRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetInstallationRootRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetInstallationRootRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetInstallationRootRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetInstallationRootRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetInstallationRootRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetInstallationRootRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetInstallationRootRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetInstallationRootRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetInstallationRootRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetInstallationRootRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetInstallationRootRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetInstallationRootRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetInstallationRootRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetInstallationRootRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetInstallationRootRequest result;
      
      private GetInstallationRootRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetInstallationRootRequest original = result;
          result = new GetInstallationRootRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetInstallationRootRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetInstallationRootRequest.Descriptor; }
      }
      
      public override GetInstallationRootRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.GetInstallationRootRequest.DefaultInstance; }
      }
      
      public override GetInstallationRootRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetInstallationRootRequest) {
          return MergeFrom((GetInstallationRootRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetInstallationRootRequest other) {
        if (other == global::Gauge.Messages.GetInstallationRootRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getInstallationRootRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getInstallationRootRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetInstallationRootRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetInstallationRootResponse : pb::GeneratedMessage<GetInstallationRootResponse, GetInstallationRootResponse.Builder> {
    private GetInstallationRootResponse() { }
    private static readonly GetInstallationRootResponse defaultInstance = new GetInstallationRootResponse().MakeReadOnly();
    private static readonly string[] _getInstallationRootResponseFieldNames = new string[] { "installationRoot" };
    private static readonly uint[] _getInstallationRootResponseFieldTags = new uint[] { 10 };
    public static GetInstallationRootResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetInstallationRootResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetInstallationRootResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetInstallationRootResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetInstallationRootResponse, GetInstallationRootResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetInstallationRootResponse__FieldAccessorTable; }
    }
    
    public const int InstallationRootFieldNumber = 1;
    private bool hasInstallationRoot;
    private string installationRoot_ = "";
    public bool HasInstallationRoot {
      get { return hasInstallationRoot; }
    }
    public string InstallationRoot {
      get { return installationRoot_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInstallationRoot) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getInstallationRootResponseFieldNames;
      if (hasInstallationRoot) {
        output.WriteString(1, field_names[0], InstallationRoot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInstallationRoot) {
        size += pb::CodedOutputStream.ComputeStringSize(1, InstallationRoot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetInstallationRootResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetInstallationRootResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetInstallationRootResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetInstallationRootResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetInstallationRootResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetInstallationRootResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetInstallationRootResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetInstallationRootResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetInstallationRootResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetInstallationRootResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetInstallationRootResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetInstallationRootResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetInstallationRootResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetInstallationRootResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetInstallationRootResponse result;
      
      private GetInstallationRootResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetInstallationRootResponse original = result;
          result = new GetInstallationRootResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetInstallationRootResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetInstallationRootResponse.Descriptor; }
      }
      
      public override GetInstallationRootResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.GetInstallationRootResponse.DefaultInstance; }
      }
      
      public override GetInstallationRootResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetInstallationRootResponse) {
          return MergeFrom((GetInstallationRootResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetInstallationRootResponse other) {
        if (other == global::Gauge.Messages.GetInstallationRootResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInstallationRoot) {
          InstallationRoot = other.InstallationRoot;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getInstallationRootResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getInstallationRootResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasInstallationRoot = input.ReadString(ref result.installationRoot_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInstallationRoot {
        get { return result.hasInstallationRoot; }
      }
      public string InstallationRoot {
        get { return result.InstallationRoot; }
        set { SetInstallationRoot(value); }
      }
      public Builder SetInstallationRoot(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstallationRoot = true;
        result.installationRoot_ = value;
        return this;
      }
      public Builder ClearInstallationRoot() {
        PrepareBuilder();
        result.hasInstallationRoot = false;
        result.installationRoot_ = "";
        return this;
      }
    }
    static GetInstallationRootResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetAllStepsRequest : pb::GeneratedMessage<GetAllStepsRequest, GetAllStepsRequest.Builder> {
    private GetAllStepsRequest() { }
    private static readonly GetAllStepsRequest defaultInstance = new GetAllStepsRequest().MakeReadOnly();
    private static readonly string[] _getAllStepsRequestFieldNames = new string[] {  };
    private static readonly uint[] _getAllStepsRequestFieldTags = new uint[] {  };
    public static GetAllStepsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAllStepsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAllStepsRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllStepsRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAllStepsRequest, GetAllStepsRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllStepsRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getAllStepsRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetAllStepsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllStepsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllStepsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllStepsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllStepsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllStepsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAllStepsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAllStepsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAllStepsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllStepsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAllStepsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAllStepsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAllStepsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAllStepsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAllStepsRequest result;
      
      private GetAllStepsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAllStepsRequest original = result;
          result = new GetAllStepsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAllStepsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetAllStepsRequest.Descriptor; }
      }
      
      public override GetAllStepsRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.GetAllStepsRequest.DefaultInstance; }
      }
      
      public override GetAllStepsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAllStepsRequest) {
          return MergeFrom((GetAllStepsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAllStepsRequest other) {
        if (other == global::Gauge.Messages.GetAllStepsRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAllStepsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAllStepsRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetAllStepsRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetAllStepsResponse : pb::GeneratedMessage<GetAllStepsResponse, GetAllStepsResponse.Builder> {
    private GetAllStepsResponse() { }
    private static readonly GetAllStepsResponse defaultInstance = new GetAllStepsResponse().MakeReadOnly();
    private static readonly string[] _getAllStepsResponseFieldNames = new string[] { "allSteps" };
    private static readonly uint[] _getAllStepsResponseFieldTags = new uint[] { 10 };
    public static GetAllStepsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAllStepsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAllStepsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllStepsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAllStepsResponse, GetAllStepsResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllStepsResponse__FieldAccessorTable; }
    }
    
    public const int AllStepsFieldNumber = 1;
    private pbc::PopsicleList<global::Gauge.Messages.ProtoStepValue> allSteps_ = new pbc::PopsicleList<global::Gauge.Messages.ProtoStepValue>();
    public scg::IList<global::Gauge.Messages.ProtoStepValue> AllStepsList {
      get { return allSteps_; }
    }
    public int AllStepsCount {
      get { return allSteps_.Count; }
    }
    public global::Gauge.Messages.ProtoStepValue GetAllSteps(int index) {
      return allSteps_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gauge.Messages.ProtoStepValue element in AllStepsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getAllStepsResponseFieldNames;
      if (allSteps_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], allSteps_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gauge.Messages.ProtoStepValue element in AllStepsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetAllStepsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllStepsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllStepsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllStepsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllStepsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllStepsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAllStepsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAllStepsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAllStepsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllStepsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAllStepsResponse MakeReadOnly() {
      allSteps_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAllStepsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAllStepsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAllStepsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAllStepsResponse result;
      
      private GetAllStepsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAllStepsResponse original = result;
          result = new GetAllStepsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAllStepsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetAllStepsResponse.Descriptor; }
      }
      
      public override GetAllStepsResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.GetAllStepsResponse.DefaultInstance; }
      }
      
      public override GetAllStepsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAllStepsResponse) {
          return MergeFrom((GetAllStepsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAllStepsResponse other) {
        if (other == global::Gauge.Messages.GetAllStepsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.allSteps_.Count != 0) {
          result.allSteps_.Add(other.allSteps_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAllStepsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAllStepsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.allSteps_, global::Gauge.Messages.ProtoStepValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gauge.Messages.ProtoStepValue> AllStepsList {
        get { return PrepareBuilder().allSteps_; }
      }
      public int AllStepsCount {
        get { return result.AllStepsCount; }
      }
      public global::Gauge.Messages.ProtoStepValue GetAllSteps(int index) {
        return result.GetAllSteps(index);
      }
      public Builder SetAllSteps(int index, global::Gauge.Messages.ProtoStepValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allSteps_[index] = value;
        return this;
      }
      public Builder SetAllSteps(int index, global::Gauge.Messages.ProtoStepValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allSteps_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAllSteps(global::Gauge.Messages.ProtoStepValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allSteps_.Add(value);
        return this;
      }
      public Builder AddAllSteps(global::Gauge.Messages.ProtoStepValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.allSteps_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAllSteps(scg::IEnumerable<global::Gauge.Messages.ProtoStepValue> values) {
        PrepareBuilder();
        result.allSteps_.Add(values);
        return this;
      }
      public Builder ClearAllSteps() {
        PrepareBuilder();
        result.allSteps_.Clear();
        return this;
      }
    }
    static GetAllStepsResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetAllSpecsRequest : pb::GeneratedMessage<GetAllSpecsRequest, GetAllSpecsRequest.Builder> {
    private GetAllSpecsRequest() { }
    private static readonly GetAllSpecsRequest defaultInstance = new GetAllSpecsRequest().MakeReadOnly();
    private static readonly string[] _getAllSpecsRequestFieldNames = new string[] {  };
    private static readonly uint[] _getAllSpecsRequestFieldTags = new uint[] {  };
    public static GetAllSpecsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAllSpecsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAllSpecsRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllSpecsRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAllSpecsRequest, GetAllSpecsRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllSpecsRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getAllSpecsRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetAllSpecsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllSpecsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllSpecsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllSpecsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllSpecsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllSpecsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAllSpecsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAllSpecsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAllSpecsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllSpecsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAllSpecsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAllSpecsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAllSpecsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAllSpecsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAllSpecsRequest result;
      
      private GetAllSpecsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAllSpecsRequest original = result;
          result = new GetAllSpecsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAllSpecsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetAllSpecsRequest.Descriptor; }
      }
      
      public override GetAllSpecsRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.GetAllSpecsRequest.DefaultInstance; }
      }
      
      public override GetAllSpecsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAllSpecsRequest) {
          return MergeFrom((GetAllSpecsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAllSpecsRequest other) {
        if (other == global::Gauge.Messages.GetAllSpecsRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAllSpecsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAllSpecsRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetAllSpecsRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetAllSpecsResponse : pb::GeneratedMessage<GetAllSpecsResponse, GetAllSpecsResponse.Builder> {
    private GetAllSpecsResponse() { }
    private static readonly GetAllSpecsResponse defaultInstance = new GetAllSpecsResponse().MakeReadOnly();
    private static readonly string[] _getAllSpecsResponseFieldNames = new string[] { "specs" };
    private static readonly uint[] _getAllSpecsResponseFieldTags = new uint[] { 10 };
    public static GetAllSpecsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAllSpecsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAllSpecsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllSpecsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAllSpecsResponse, GetAllSpecsResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllSpecsResponse__FieldAccessorTable; }
    }
    
    public const int SpecsFieldNumber = 1;
    private pbc::PopsicleList<global::Gauge.Messages.ProtoSpec> specs_ = new pbc::PopsicleList<global::Gauge.Messages.ProtoSpec>();
    public scg::IList<global::Gauge.Messages.ProtoSpec> SpecsList {
      get { return specs_; }
    }
    public int SpecsCount {
      get { return specs_.Count; }
    }
    public global::Gauge.Messages.ProtoSpec GetSpecs(int index) {
      return specs_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gauge.Messages.ProtoSpec element in SpecsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getAllSpecsResponseFieldNames;
      if (specs_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], specs_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gauge.Messages.ProtoSpec element in SpecsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetAllSpecsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllSpecsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllSpecsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllSpecsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllSpecsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllSpecsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAllSpecsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAllSpecsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAllSpecsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllSpecsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAllSpecsResponse MakeReadOnly() {
      specs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAllSpecsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAllSpecsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAllSpecsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAllSpecsResponse result;
      
      private GetAllSpecsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAllSpecsResponse original = result;
          result = new GetAllSpecsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAllSpecsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetAllSpecsResponse.Descriptor; }
      }
      
      public override GetAllSpecsResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.GetAllSpecsResponse.DefaultInstance; }
      }
      
      public override GetAllSpecsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAllSpecsResponse) {
          return MergeFrom((GetAllSpecsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAllSpecsResponse other) {
        if (other == global::Gauge.Messages.GetAllSpecsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.specs_.Count != 0) {
          result.specs_.Add(other.specs_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAllSpecsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAllSpecsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.specs_, global::Gauge.Messages.ProtoSpec.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gauge.Messages.ProtoSpec> SpecsList {
        get { return PrepareBuilder().specs_; }
      }
      public int SpecsCount {
        get { return result.SpecsCount; }
      }
      public global::Gauge.Messages.ProtoSpec GetSpecs(int index) {
        return result.GetSpecs(index);
      }
      public Builder SetSpecs(int index, global::Gauge.Messages.ProtoSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.specs_[index] = value;
        return this;
      }
      public Builder SetSpecs(int index, global::Gauge.Messages.ProtoSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.specs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSpecs(global::Gauge.Messages.ProtoSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.specs_.Add(value);
        return this;
      }
      public Builder AddSpecs(global::Gauge.Messages.ProtoSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.specs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSpecs(scg::IEnumerable<global::Gauge.Messages.ProtoSpec> values) {
        PrepareBuilder();
        result.specs_.Add(values);
        return this;
      }
      public Builder ClearSpecs() {
        PrepareBuilder();
        result.specs_.Clear();
        return this;
      }
    }
    static GetAllSpecsResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetAllConceptsRequest : pb::GeneratedMessage<GetAllConceptsRequest, GetAllConceptsRequest.Builder> {
    private GetAllConceptsRequest() { }
    private static readonly GetAllConceptsRequest defaultInstance = new GetAllConceptsRequest().MakeReadOnly();
    private static readonly string[] _getAllConceptsRequestFieldNames = new string[] {  };
    private static readonly uint[] _getAllConceptsRequestFieldTags = new uint[] {  };
    public static GetAllConceptsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAllConceptsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAllConceptsRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllConceptsRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAllConceptsRequest, GetAllConceptsRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllConceptsRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getAllConceptsRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetAllConceptsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllConceptsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllConceptsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllConceptsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllConceptsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllConceptsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAllConceptsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAllConceptsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAllConceptsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllConceptsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAllConceptsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAllConceptsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAllConceptsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAllConceptsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAllConceptsRequest result;
      
      private GetAllConceptsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAllConceptsRequest original = result;
          result = new GetAllConceptsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAllConceptsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetAllConceptsRequest.Descriptor; }
      }
      
      public override GetAllConceptsRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.GetAllConceptsRequest.DefaultInstance; }
      }
      
      public override GetAllConceptsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAllConceptsRequest) {
          return MergeFrom((GetAllConceptsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAllConceptsRequest other) {
        if (other == global::Gauge.Messages.GetAllConceptsRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAllConceptsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAllConceptsRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetAllConceptsRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetAllConceptsResponse : pb::GeneratedMessage<GetAllConceptsResponse, GetAllConceptsResponse.Builder> {
    private GetAllConceptsResponse() { }
    private static readonly GetAllConceptsResponse defaultInstance = new GetAllConceptsResponse().MakeReadOnly();
    private static readonly string[] _getAllConceptsResponseFieldNames = new string[] { "concepts" };
    private static readonly uint[] _getAllConceptsResponseFieldTags = new uint[] { 10 };
    public static GetAllConceptsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAllConceptsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAllConceptsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllConceptsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAllConceptsResponse, GetAllConceptsResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetAllConceptsResponse__FieldAccessorTable; }
    }
    
    public const int ConceptsFieldNumber = 1;
    private pbc::PopsicleList<global::Gauge.Messages.ConceptInfo> concepts_ = new pbc::PopsicleList<global::Gauge.Messages.ConceptInfo>();
    public scg::IList<global::Gauge.Messages.ConceptInfo> ConceptsList {
      get { return concepts_; }
    }
    public int ConceptsCount {
      get { return concepts_.Count; }
    }
    public global::Gauge.Messages.ConceptInfo GetConcepts(int index) {
      return concepts_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Gauge.Messages.ConceptInfo element in ConceptsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getAllConceptsResponseFieldNames;
      if (concepts_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], concepts_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Gauge.Messages.ConceptInfo element in ConceptsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetAllConceptsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllConceptsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllConceptsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAllConceptsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAllConceptsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllConceptsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAllConceptsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAllConceptsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAllConceptsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAllConceptsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAllConceptsResponse MakeReadOnly() {
      concepts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAllConceptsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAllConceptsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAllConceptsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAllConceptsResponse result;
      
      private GetAllConceptsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAllConceptsResponse original = result;
          result = new GetAllConceptsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAllConceptsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetAllConceptsResponse.Descriptor; }
      }
      
      public override GetAllConceptsResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.GetAllConceptsResponse.DefaultInstance; }
      }
      
      public override GetAllConceptsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAllConceptsResponse) {
          return MergeFrom((GetAllConceptsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAllConceptsResponse other) {
        if (other == global::Gauge.Messages.GetAllConceptsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.concepts_.Count != 0) {
          result.concepts_.Add(other.concepts_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAllConceptsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAllConceptsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.concepts_, global::Gauge.Messages.ConceptInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Gauge.Messages.ConceptInfo> ConceptsList {
        get { return PrepareBuilder().concepts_; }
      }
      public int ConceptsCount {
        get { return result.ConceptsCount; }
      }
      public global::Gauge.Messages.ConceptInfo GetConcepts(int index) {
        return result.GetConcepts(index);
      }
      public Builder SetConcepts(int index, global::Gauge.Messages.ConceptInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.concepts_[index] = value;
        return this;
      }
      public Builder SetConcepts(int index, global::Gauge.Messages.ConceptInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.concepts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddConcepts(global::Gauge.Messages.ConceptInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.concepts_.Add(value);
        return this;
      }
      public Builder AddConcepts(global::Gauge.Messages.ConceptInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.concepts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeConcepts(scg::IEnumerable<global::Gauge.Messages.ConceptInfo> values) {
        PrepareBuilder();
        result.concepts_.Add(values);
        return this;
      }
      public Builder ClearConcepts() {
        PrepareBuilder();
        result.concepts_.Clear();
        return this;
      }
    }
    static GetAllConceptsResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConceptInfo : pb::GeneratedMessage<ConceptInfo, ConceptInfo.Builder> {
    private ConceptInfo() { }
    private static readonly ConceptInfo defaultInstance = new ConceptInfo().MakeReadOnly();
    private static readonly string[] _conceptInfoFieldNames = new string[] { "filepath", "lineNumber", "stepValue" };
    private static readonly uint[] _conceptInfoFieldTags = new uint[] { 18, 24, 10 };
    public static ConceptInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConceptInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConceptInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ConceptInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConceptInfo, ConceptInfo.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ConceptInfo__FieldAccessorTable; }
    }
    
    public const int StepValueFieldNumber = 1;
    private bool hasStepValue;
    private global::Gauge.Messages.ProtoStepValue stepValue_;
    public bool HasStepValue {
      get { return hasStepValue; }
    }
    public global::Gauge.Messages.ProtoStepValue StepValue {
      get { return stepValue_ ?? global::Gauge.Messages.ProtoStepValue.DefaultInstance; }
    }
    
    public const int FilepathFieldNumber = 2;
    private bool hasFilepath;
    private string filepath_ = "";
    public bool HasFilepath {
      get { return hasFilepath; }
    }
    public string Filepath {
      get { return filepath_; }
    }
    
    public const int LineNumberFieldNumber = 3;
    private bool hasLineNumber;
    private int lineNumber_;
    public bool HasLineNumber {
      get { return hasLineNumber; }
    }
    public int LineNumber {
      get { return lineNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStepValue) return false;
        if (!hasFilepath) return false;
        if (!hasLineNumber) return false;
        if (!StepValue.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _conceptInfoFieldNames;
      if (hasStepValue) {
        output.WriteMessage(1, field_names[2], StepValue);
      }
      if (hasFilepath) {
        output.WriteString(2, field_names[0], Filepath);
      }
      if (hasLineNumber) {
        output.WriteInt32(3, field_names[1], LineNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStepValue) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, StepValue);
      }
      if (hasFilepath) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Filepath);
      }
      if (hasLineNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, LineNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ConceptInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConceptInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConceptInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConceptInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConceptInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConceptInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConceptInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConceptInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConceptInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConceptInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConceptInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConceptInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ConceptInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConceptInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConceptInfo result;
      
      private ConceptInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ConceptInfo original = result;
          result = new ConceptInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConceptInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.ConceptInfo.Descriptor; }
      }
      
      public override ConceptInfo DefaultInstanceForType {
        get { return global::Gauge.Messages.ConceptInfo.DefaultInstance; }
      }
      
      public override ConceptInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConceptInfo) {
          return MergeFrom((ConceptInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConceptInfo other) {
        if (other == global::Gauge.Messages.ConceptInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStepValue) {
          MergeStepValue(other.StepValue);
        }
        if (other.HasFilepath) {
          Filepath = other.Filepath;
        }
        if (other.HasLineNumber) {
          LineNumber = other.LineNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_conceptInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _conceptInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gauge.Messages.ProtoStepValue.Builder subBuilder = global::Gauge.Messages.ProtoStepValue.CreateBuilder();
              if (result.hasStepValue) {
                subBuilder.MergeFrom(StepValue);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StepValue = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasFilepath = input.ReadString(ref result.filepath_);
              break;
            }
            case 24: {
              result.hasLineNumber = input.ReadInt32(ref result.lineNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStepValue {
       get { return result.hasStepValue; }
      }
      public global::Gauge.Messages.ProtoStepValue StepValue {
        get { return result.StepValue; }
        set { SetStepValue(value); }
      }
      public Builder SetStepValue(global::Gauge.Messages.ProtoStepValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStepValue = true;
        result.stepValue_ = value;
        return this;
      }
      public Builder SetStepValue(global::Gauge.Messages.ProtoStepValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStepValue = true;
        result.stepValue_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStepValue(global::Gauge.Messages.ProtoStepValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStepValue &&
            result.stepValue_ != global::Gauge.Messages.ProtoStepValue.DefaultInstance) {
            result.stepValue_ = global::Gauge.Messages.ProtoStepValue.CreateBuilder(result.stepValue_).MergeFrom(value).BuildPartial();
        } else {
          result.stepValue_ = value;
        }
        result.hasStepValue = true;
        return this;
      }
      public Builder ClearStepValue() {
        PrepareBuilder();
        result.hasStepValue = false;
        result.stepValue_ = null;
        return this;
      }
      
      public bool HasFilepath {
        get { return result.hasFilepath; }
      }
      public string Filepath {
        get { return result.Filepath; }
        set { SetFilepath(value); }
      }
      public Builder SetFilepath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilepath = true;
        result.filepath_ = value;
        return this;
      }
      public Builder ClearFilepath() {
        PrepareBuilder();
        result.hasFilepath = false;
        result.filepath_ = "";
        return this;
      }
      
      public bool HasLineNumber {
        get { return result.hasLineNumber; }
      }
      public int LineNumber {
        get { return result.LineNumber; }
        set { SetLineNumber(value); }
      }
      public Builder SetLineNumber(int value) {
        PrepareBuilder();
        result.hasLineNumber = true;
        result.lineNumber_ = value;
        return this;
      }
      public Builder ClearLineNumber() {
        PrepareBuilder();
        result.hasLineNumber = false;
        result.lineNumber_ = 0;
        return this;
      }
    }
    static ConceptInfo() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetStepValueRequest : pb::GeneratedMessage<GetStepValueRequest, GetStepValueRequest.Builder> {
    private GetStepValueRequest() { }
    private static readonly GetStepValueRequest defaultInstance = new GetStepValueRequest().MakeReadOnly();
    private static readonly string[] _getStepValueRequestFieldNames = new string[] { "hasInlineTable", "stepText" };
    private static readonly uint[] _getStepValueRequestFieldTags = new uint[] { 16, 10 };
    public static GetStepValueRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetStepValueRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetStepValueRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetStepValueRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetStepValueRequest, GetStepValueRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetStepValueRequest__FieldAccessorTable; }
    }
    
    public const int StepTextFieldNumber = 1;
    private bool hasStepText;
    private string stepText_ = "";
    public bool HasStepText {
      get { return hasStepText; }
    }
    public string StepText {
      get { return stepText_; }
    }
    
    public const int HasInlineTableFieldNumber = 2;
    private bool hasHasInlineTable;
    private bool hasInlineTable_;
    public bool HasHasInlineTable {
      get { return hasHasInlineTable; }
    }
    public bool HasInlineTable {
      get { return hasInlineTable_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStepText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getStepValueRequestFieldNames;
      if (hasStepText) {
        output.WriteString(1, field_names[1], StepText);
      }
      if (hasHasInlineTable) {
        output.WriteBool(2, field_names[0], HasInlineTable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStepText) {
        size += pb::CodedOutputStream.ComputeStringSize(1, StepText);
      }
      if (hasHasInlineTable) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, HasInlineTable);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetStepValueRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetStepValueRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetStepValueRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetStepValueRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetStepValueRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetStepValueRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetStepValueRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetStepValueRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetStepValueRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetStepValueRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetStepValueRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetStepValueRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetStepValueRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetStepValueRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetStepValueRequest result;
      
      private GetStepValueRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetStepValueRequest original = result;
          result = new GetStepValueRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetStepValueRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetStepValueRequest.Descriptor; }
      }
      
      public override GetStepValueRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.GetStepValueRequest.DefaultInstance; }
      }
      
      public override GetStepValueRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetStepValueRequest) {
          return MergeFrom((GetStepValueRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetStepValueRequest other) {
        if (other == global::Gauge.Messages.GetStepValueRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStepText) {
          StepText = other.StepText;
        }
        if (other.HasHasInlineTable) {
          HasInlineTable = other.HasInlineTable;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getStepValueRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getStepValueRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasStepText = input.ReadString(ref result.stepText_);
              break;
            }
            case 16: {
              result.hasHasInlineTable = input.ReadBool(ref result.hasInlineTable_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStepText {
        get { return result.hasStepText; }
      }
      public string StepText {
        get { return result.StepText; }
        set { SetStepText(value); }
      }
      public Builder SetStepText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStepText = true;
        result.stepText_ = value;
        return this;
      }
      public Builder ClearStepText() {
        PrepareBuilder();
        result.hasStepText = false;
        result.stepText_ = "";
        return this;
      }
      
      public bool HasHasInlineTable {
        get { return result.hasHasInlineTable; }
      }
      public bool HasInlineTable {
        get { return result.HasInlineTable; }
        set { SetHasInlineTable(value); }
      }
      public Builder SetHasInlineTable(bool value) {
        PrepareBuilder();
        result.hasHasInlineTable = true;
        result.hasInlineTable_ = value;
        return this;
      }
      public Builder ClearHasInlineTable() {
        PrepareBuilder();
        result.hasHasInlineTable = false;
        result.hasInlineTable_ = false;
        return this;
      }
    }
    static GetStepValueRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetStepValueResponse : pb::GeneratedMessage<GetStepValueResponse, GetStepValueResponse.Builder> {
    private GetStepValueResponse() { }
    private static readonly GetStepValueResponse defaultInstance = new GetStepValueResponse().MakeReadOnly();
    private static readonly string[] _getStepValueResponseFieldNames = new string[] { "stepValue" };
    private static readonly uint[] _getStepValueResponseFieldTags = new uint[] { 10 };
    public static GetStepValueResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetStepValueResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetStepValueResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetStepValueResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetStepValueResponse, GetStepValueResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetStepValueResponse__FieldAccessorTable; }
    }
    
    public const int StepValueFieldNumber = 1;
    private bool hasStepValue;
    private global::Gauge.Messages.ProtoStepValue stepValue_;
    public bool HasStepValue {
      get { return hasStepValue; }
    }
    public global::Gauge.Messages.ProtoStepValue StepValue {
      get { return stepValue_ ?? global::Gauge.Messages.ProtoStepValue.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStepValue) return false;
        if (!StepValue.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getStepValueResponseFieldNames;
      if (hasStepValue) {
        output.WriteMessage(1, field_names[0], StepValue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStepValue) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, StepValue);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetStepValueResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetStepValueResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetStepValueResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetStepValueResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetStepValueResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetStepValueResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetStepValueResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetStepValueResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetStepValueResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetStepValueResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetStepValueResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetStepValueResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetStepValueResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetStepValueResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetStepValueResponse result;
      
      private GetStepValueResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetStepValueResponse original = result;
          result = new GetStepValueResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetStepValueResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetStepValueResponse.Descriptor; }
      }
      
      public override GetStepValueResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.GetStepValueResponse.DefaultInstance; }
      }
      
      public override GetStepValueResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetStepValueResponse) {
          return MergeFrom((GetStepValueResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetStepValueResponse other) {
        if (other == global::Gauge.Messages.GetStepValueResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStepValue) {
          MergeStepValue(other.StepValue);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getStepValueResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getStepValueResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gauge.Messages.ProtoStepValue.Builder subBuilder = global::Gauge.Messages.ProtoStepValue.CreateBuilder();
              if (result.hasStepValue) {
                subBuilder.MergeFrom(StepValue);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StepValue = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStepValue {
       get { return result.hasStepValue; }
      }
      public global::Gauge.Messages.ProtoStepValue StepValue {
        get { return result.StepValue; }
        set { SetStepValue(value); }
      }
      public Builder SetStepValue(global::Gauge.Messages.ProtoStepValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStepValue = true;
        result.stepValue_ = value;
        return this;
      }
      public Builder SetStepValue(global::Gauge.Messages.ProtoStepValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStepValue = true;
        result.stepValue_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStepValue(global::Gauge.Messages.ProtoStepValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStepValue &&
            result.stepValue_ != global::Gauge.Messages.ProtoStepValue.DefaultInstance) {
            result.stepValue_ = global::Gauge.Messages.ProtoStepValue.CreateBuilder(result.stepValue_).MergeFrom(value).BuildPartial();
        } else {
          result.stepValue_ = value;
        }
        result.hasStepValue = true;
        return this;
      }
      public Builder ClearStepValue() {
        PrepareBuilder();
        result.hasStepValue = false;
        result.stepValue_ = null;
        return this;
      }
    }
    static GetStepValueResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetLanguagePluginLibPathRequest : pb::GeneratedMessage<GetLanguagePluginLibPathRequest, GetLanguagePluginLibPathRequest.Builder> {
    private GetLanguagePluginLibPathRequest() { }
    private static readonly GetLanguagePluginLibPathRequest defaultInstance = new GetLanguagePluginLibPathRequest().MakeReadOnly();
    private static readonly string[] _getLanguagePluginLibPathRequestFieldNames = new string[] { "language" };
    private static readonly uint[] _getLanguagePluginLibPathRequestFieldTags = new uint[] { 10 };
    public static GetLanguagePluginLibPathRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetLanguagePluginLibPathRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetLanguagePluginLibPathRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetLanguagePluginLibPathRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetLanguagePluginLibPathRequest, GetLanguagePluginLibPathRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetLanguagePluginLibPathRequest__FieldAccessorTable; }
    }
    
    public const int LanguageFieldNumber = 1;
    private bool hasLanguage;
    private string language_ = "";
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public string Language {
      get { return language_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLanguage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getLanguagePluginLibPathRequestFieldNames;
      if (hasLanguage) {
        output.WriteString(1, field_names[0], Language);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLanguage) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Language);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetLanguagePluginLibPathRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLanguagePluginLibPathRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetLanguagePluginLibPathRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetLanguagePluginLibPathRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetLanguagePluginLibPathRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetLanguagePluginLibPathRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetLanguagePluginLibPathRequest result;
      
      private GetLanguagePluginLibPathRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetLanguagePluginLibPathRequest original = result;
          result = new GetLanguagePluginLibPathRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetLanguagePluginLibPathRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetLanguagePluginLibPathRequest.Descriptor; }
      }
      
      public override GetLanguagePluginLibPathRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.GetLanguagePluginLibPathRequest.DefaultInstance; }
      }
      
      public override GetLanguagePluginLibPathRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetLanguagePluginLibPathRequest) {
          return MergeFrom((GetLanguagePluginLibPathRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetLanguagePluginLibPathRequest other) {
        if (other == global::Gauge.Messages.GetLanguagePluginLibPathRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLanguage) {
          Language = other.Language;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getLanguagePluginLibPathRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getLanguagePluginLibPathRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLanguage = input.ReadString(ref result.language_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public string Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = "";
        return this;
      }
    }
    static GetLanguagePluginLibPathRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetLanguagePluginLibPathResponse : pb::GeneratedMessage<GetLanguagePluginLibPathResponse, GetLanguagePluginLibPathResponse.Builder> {
    private GetLanguagePluginLibPathResponse() { }
    private static readonly GetLanguagePluginLibPathResponse defaultInstance = new GetLanguagePluginLibPathResponse().MakeReadOnly();
    private static readonly string[] _getLanguagePluginLibPathResponseFieldNames = new string[] { "path" };
    private static readonly uint[] _getLanguagePluginLibPathResponseFieldTags = new uint[] { 10 };
    public static GetLanguagePluginLibPathResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetLanguagePluginLibPathResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetLanguagePluginLibPathResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetLanguagePluginLibPathResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetLanguagePluginLibPathResponse, GetLanguagePluginLibPathResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_GetLanguagePluginLibPathResponse__FieldAccessorTable; }
    }
    
    public const int PathFieldNumber = 1;
    private bool hasPath;
    private string path_ = "";
    public bool HasPath {
      get { return hasPath; }
    }
    public string Path {
      get { return path_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPath) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getLanguagePluginLibPathResponseFieldNames;
      if (hasPath) {
        output.WriteString(1, field_names[0], Path);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPath) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Path);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetLanguagePluginLibPathResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLanguagePluginLibPathResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetLanguagePluginLibPathResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetLanguagePluginLibPathResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetLanguagePluginLibPathResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetLanguagePluginLibPathResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetLanguagePluginLibPathResponse result;
      
      private GetLanguagePluginLibPathResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetLanguagePluginLibPathResponse original = result;
          result = new GetLanguagePluginLibPathResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetLanguagePluginLibPathResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.GetLanguagePluginLibPathResponse.Descriptor; }
      }
      
      public override GetLanguagePluginLibPathResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.GetLanguagePluginLibPathResponse.DefaultInstance; }
      }
      
      public override GetLanguagePluginLibPathResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetLanguagePluginLibPathResponse) {
          return MergeFrom((GetLanguagePluginLibPathResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetLanguagePluginLibPathResponse other) {
        if (other == global::Gauge.Messages.GetLanguagePluginLibPathResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPath) {
          Path = other.Path;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getLanguagePluginLibPathResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getLanguagePluginLibPathResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPath = input.ReadString(ref result.path_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPath {
        get { return result.hasPath; }
      }
      public string Path {
        get { return result.Path; }
        set { SetPath(value); }
      }
      public Builder SetPath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPath = true;
        result.path_ = value;
        return this;
      }
      public Builder ClearPath() {
        PrepareBuilder();
        result.hasPath = false;
        result.path_ = "";
        return this;
      }
    }
    static GetLanguagePluginLibPathResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ErrorResponse : pb::GeneratedMessage<ErrorResponse, ErrorResponse.Builder> {
    private ErrorResponse() { }
    private static readonly ErrorResponse defaultInstance = new ErrorResponse().MakeReadOnly();
    private static readonly string[] _errorResponseFieldNames = new string[] { "error" };
    private static readonly uint[] _errorResponseFieldTags = new uint[] { 10 };
    public static ErrorResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ErrorResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ErrorResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ErrorResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ErrorResponse, ErrorResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ErrorResponse__FieldAccessorTable; }
    }
    
    public const int ErrorFieldNumber = 1;
    private bool hasError;
    private string error_ = "";
    public bool HasError {
      get { return hasError; }
    }
    public string Error {
      get { return error_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasError) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _errorResponseFieldNames;
      if (hasError) {
        output.WriteString(1, field_names[0], Error);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasError) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Error);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ErrorResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ErrorResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ErrorResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ErrorResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ErrorResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ErrorResponse result;
      
      private ErrorResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ErrorResponse original = result;
          result = new ErrorResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ErrorResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.ErrorResponse.Descriptor; }
      }
      
      public override ErrorResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.ErrorResponse.DefaultInstance; }
      }
      
      public override ErrorResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorResponse) {
          return MergeFrom((ErrorResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ErrorResponse other) {
        if (other == global::Gauge.Messages.ErrorResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasError) {
          Error = other.Error;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasError = input.ReadString(ref result.error_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasError {
        get { return result.hasError; }
      }
      public string Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = "";
        return this;
      }
    }
    static ErrorResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PerformRefactoringRequest : pb::GeneratedMessage<PerformRefactoringRequest, PerformRefactoringRequest.Builder> {
    private PerformRefactoringRequest() { }
    private static readonly PerformRefactoringRequest defaultInstance = new PerformRefactoringRequest().MakeReadOnly();
    private static readonly string[] _performRefactoringRequestFieldNames = new string[] { "newStep", "oldStep" };
    private static readonly uint[] _performRefactoringRequestFieldTags = new uint[] { 18, 10 };
    public static PerformRefactoringRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PerformRefactoringRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PerformRefactoringRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_PerformRefactoringRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PerformRefactoringRequest, PerformRefactoringRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_PerformRefactoringRequest__FieldAccessorTable; }
    }
    
    public const int OldStepFieldNumber = 1;
    private bool hasOldStep;
    private string oldStep_ = "";
    public bool HasOldStep {
      get { return hasOldStep; }
    }
    public string OldStep {
      get { return oldStep_; }
    }
    
    public const int NewStepFieldNumber = 2;
    private bool hasNewStep;
    private string newStep_ = "";
    public bool HasNewStep {
      get { return hasNewStep; }
    }
    public string NewStep {
      get { return newStep_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOldStep) return false;
        if (!hasNewStep) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _performRefactoringRequestFieldNames;
      if (hasOldStep) {
        output.WriteString(1, field_names[1], OldStep);
      }
      if (hasNewStep) {
        output.WriteString(2, field_names[0], NewStep);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOldStep) {
        size += pb::CodedOutputStream.ComputeStringSize(1, OldStep);
      }
      if (hasNewStep) {
        size += pb::CodedOutputStream.ComputeStringSize(2, NewStep);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PerformRefactoringRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PerformRefactoringRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PerformRefactoringRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PerformRefactoringRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PerformRefactoringRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PerformRefactoringRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PerformRefactoringRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PerformRefactoringRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PerformRefactoringRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PerformRefactoringRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PerformRefactoringRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PerformRefactoringRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PerformRefactoringRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PerformRefactoringRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PerformRefactoringRequest result;
      
      private PerformRefactoringRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PerformRefactoringRequest original = result;
          result = new PerformRefactoringRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PerformRefactoringRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.PerformRefactoringRequest.Descriptor; }
      }
      
      public override PerformRefactoringRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.PerformRefactoringRequest.DefaultInstance; }
      }
      
      public override PerformRefactoringRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PerformRefactoringRequest) {
          return MergeFrom((PerformRefactoringRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PerformRefactoringRequest other) {
        if (other == global::Gauge.Messages.PerformRefactoringRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOldStep) {
          OldStep = other.OldStep;
        }
        if (other.HasNewStep) {
          NewStep = other.NewStep;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_performRefactoringRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _performRefactoringRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasOldStep = input.ReadString(ref result.oldStep_);
              break;
            }
            case 18: {
              result.hasNewStep = input.ReadString(ref result.newStep_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOldStep {
        get { return result.hasOldStep; }
      }
      public string OldStep {
        get { return result.OldStep; }
        set { SetOldStep(value); }
      }
      public Builder SetOldStep(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOldStep = true;
        result.oldStep_ = value;
        return this;
      }
      public Builder ClearOldStep() {
        PrepareBuilder();
        result.hasOldStep = false;
        result.oldStep_ = "";
        return this;
      }
      
      public bool HasNewStep {
        get { return result.hasNewStep; }
      }
      public string NewStep {
        get { return result.NewStep; }
        set { SetNewStep(value); }
      }
      public Builder SetNewStep(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewStep = true;
        result.newStep_ = value;
        return this;
      }
      public Builder ClearNewStep() {
        PrepareBuilder();
        result.hasNewStep = false;
        result.newStep_ = "";
        return this;
      }
    }
    static PerformRefactoringRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PerformRefactoringResponse : pb::GeneratedMessage<PerformRefactoringResponse, PerformRefactoringResponse.Builder> {
    private PerformRefactoringResponse() { }
    private static readonly PerformRefactoringResponse defaultInstance = new PerformRefactoringResponse().MakeReadOnly();
    private static readonly string[] _performRefactoringResponseFieldNames = new string[] { "errors", "filesChanged", "success" };
    private static readonly uint[] _performRefactoringResponseFieldTags = new uint[] { 18, 26, 8 };
    public static PerformRefactoringResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PerformRefactoringResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PerformRefactoringResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_PerformRefactoringResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PerformRefactoringResponse, PerformRefactoringResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_PerformRefactoringResponse__FieldAccessorTable; }
    }
    
    public const int SuccessFieldNumber = 1;
    private bool hasSuccess;
    private bool success_;
    public bool HasSuccess {
      get { return hasSuccess; }
    }
    public bool Success {
      get { return success_; }
    }
    
    public const int ErrorsFieldNumber = 2;
    private pbc::PopsicleList<string> errors_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ErrorsList {
      get { return pbc::Lists.AsReadOnly(errors_); }
    }
    public int ErrorsCount {
      get { return errors_.Count; }
    }
    public string GetErrors(int index) {
      return errors_[index];
    }
    
    public const int FilesChangedFieldNumber = 3;
    private pbc::PopsicleList<string> filesChanged_ = new pbc::PopsicleList<string>();
    public scg::IList<string> FilesChangedList {
      get { return pbc::Lists.AsReadOnly(filesChanged_); }
    }
    public int FilesChangedCount {
      get { return filesChanged_.Count; }
    }
    public string GetFilesChanged(int index) {
      return filesChanged_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuccess) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _performRefactoringResponseFieldNames;
      if (hasSuccess) {
        output.WriteBool(1, field_names[2], Success);
      }
      if (errors_.Count > 0) {
        output.WriteStringArray(2, field_names[0], errors_);
      }
      if (filesChanged_.Count > 0) {
        output.WriteStringArray(3, field_names[1], filesChanged_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuccess) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Success);
      }
      {
        int dataSize = 0;
        foreach (string element in ErrorsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * errors_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in FilesChangedList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * filesChanged_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PerformRefactoringResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PerformRefactoringResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PerformRefactoringResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PerformRefactoringResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PerformRefactoringResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PerformRefactoringResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PerformRefactoringResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PerformRefactoringResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PerformRefactoringResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PerformRefactoringResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PerformRefactoringResponse MakeReadOnly() {
      errors_.MakeReadOnly();
      filesChanged_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PerformRefactoringResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PerformRefactoringResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PerformRefactoringResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PerformRefactoringResponse result;
      
      private PerformRefactoringResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PerformRefactoringResponse original = result;
          result = new PerformRefactoringResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PerformRefactoringResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.PerformRefactoringResponse.Descriptor; }
      }
      
      public override PerformRefactoringResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.PerformRefactoringResponse.DefaultInstance; }
      }
      
      public override PerformRefactoringResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PerformRefactoringResponse) {
          return MergeFrom((PerformRefactoringResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PerformRefactoringResponse other) {
        if (other == global::Gauge.Messages.PerformRefactoringResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuccess) {
          Success = other.Success;
        }
        if (other.errors_.Count != 0) {
          result.errors_.Add(other.errors_);
        }
        if (other.filesChanged_.Count != 0) {
          result.filesChanged_.Add(other.filesChanged_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_performRefactoringResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _performRefactoringResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuccess = input.ReadBool(ref result.success_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.errors_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.filesChanged_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuccess {
        get { return result.hasSuccess; }
      }
      public bool Success {
        get { return result.Success; }
        set { SetSuccess(value); }
      }
      public Builder SetSuccess(bool value) {
        PrepareBuilder();
        result.hasSuccess = true;
        result.success_ = value;
        return this;
      }
      public Builder ClearSuccess() {
        PrepareBuilder();
        result.hasSuccess = false;
        result.success_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<string> ErrorsList {
        get { return PrepareBuilder().errors_; }
      }
      public int ErrorsCount {
        get { return result.ErrorsCount; }
      }
      public string GetErrors(int index) {
        return result.GetErrors(index);
      }
      public Builder SetErrors(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.errors_[index] = value;
        return this;
      }
      public Builder AddErrors(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.errors_.Add(value);
        return this;
      }
      public Builder AddRangeErrors(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.errors_.Add(values);
        return this;
      }
      public Builder ClearErrors() {
        PrepareBuilder();
        result.errors_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> FilesChangedList {
        get { return PrepareBuilder().filesChanged_; }
      }
      public int FilesChangedCount {
        get { return result.FilesChangedCount; }
      }
      public string GetFilesChanged(int index) {
        return result.GetFilesChanged(index);
      }
      public Builder SetFilesChanged(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filesChanged_[index] = value;
        return this;
      }
      public Builder AddFilesChanged(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filesChanged_.Add(value);
        return this;
      }
      public Builder AddRangeFilesChanged(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.filesChanged_.Add(values);
        return this;
      }
      public Builder ClearFilesChanged() {
        PrepareBuilder();
        result.filesChanged_.Clear();
        return this;
      }
    }
    static PerformRefactoringResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExtractConceptInfoRequest : pb::GeneratedMessage<ExtractConceptInfoRequest, ExtractConceptInfoRequest.Builder> {
    private ExtractConceptInfoRequest() { }
    private static readonly ExtractConceptInfoRequest defaultInstance = new ExtractConceptInfoRequest().MakeReadOnly();
    private static readonly string[] _extractConceptInfoRequestFieldNames = new string[] { "text" };
    private static readonly uint[] _extractConceptInfoRequestFieldTags = new uint[] { 10 };
    public static ExtractConceptInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExtractConceptInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExtractConceptInfoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ExtractConceptInfoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExtractConceptInfoRequest, ExtractConceptInfoRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ExtractConceptInfoRequest__FieldAccessorTable; }
    }
    
    public const int TextFieldNumber = 1;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _extractConceptInfoRequestFieldNames;
      if (hasText) {
        output.WriteString(1, field_names[0], Text);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Text);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ExtractConceptInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtractConceptInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExtractConceptInfoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExtractConceptInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExtractConceptInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExtractConceptInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExtractConceptInfoRequest result;
      
      private ExtractConceptInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ExtractConceptInfoRequest original = result;
          result = new ExtractConceptInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExtractConceptInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.ExtractConceptInfoRequest.Descriptor; }
      }
      
      public override ExtractConceptInfoRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.ExtractConceptInfoRequest.DefaultInstance; }
      }
      
      public override ExtractConceptInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExtractConceptInfoRequest) {
          return MergeFrom((ExtractConceptInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExtractConceptInfoRequest other) {
        if (other == global::Gauge.Messages.ExtractConceptInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasText) {
          Text = other.Text;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_extractConceptInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _extractConceptInfoRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
    }
    static ExtractConceptInfoRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExtractConceptRequest : pb::GeneratedMessage<ExtractConceptRequest, ExtractConceptRequest.Builder> {
    private ExtractConceptRequest() { }
    private static readonly ExtractConceptRequest defaultInstance = new ExtractConceptRequest().MakeReadOnly();
    private static readonly string[] _extractConceptRequestFieldNames = new string[] { "changeAcrossProject", "conceptFileName", "conceptName", "selectedTextInfo", "steps" };
    private static readonly uint[] _extractConceptRequestFieldTags = new uint[] { 24, 34, 10, 42, 18 };
    public static ExtractConceptRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExtractConceptRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExtractConceptRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ExtractConceptRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExtractConceptRequest, ExtractConceptRequest.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ExtractConceptRequest__FieldAccessorTable; }
    }
    
    public const int ConceptNameFieldNumber = 1;
    private bool hasConceptName;
    private global::Gauge.Messages.step conceptName_;
    public bool HasConceptName {
      get { return hasConceptName; }
    }
    public global::Gauge.Messages.step ConceptName {
      get { return conceptName_ ?? global::Gauge.Messages.step.DefaultInstance; }
    }
    
    public const int StepsFieldNumber = 2;
    private pbc::PopsicleList<global::Gauge.Messages.step> steps_ = new pbc::PopsicleList<global::Gauge.Messages.step>();
    public scg::IList<global::Gauge.Messages.step> StepsList {
      get { return steps_; }
    }
    public int StepsCount {
      get { return steps_.Count; }
    }
    public global::Gauge.Messages.step GetSteps(int index) {
      return steps_[index];
    }
    
    public const int ChangeAcrossProjectFieldNumber = 3;
    private bool hasChangeAcrossProject;
    private bool changeAcrossProject_;
    public bool HasChangeAcrossProject {
      get { return hasChangeAcrossProject; }
    }
    public bool ChangeAcrossProject {
      get { return changeAcrossProject_; }
    }
    
    public const int ConceptFileNameFieldNumber = 4;
    private bool hasConceptFileName;
    private string conceptFileName_ = "";
    public bool HasConceptFileName {
      get { return hasConceptFileName; }
    }
    public string ConceptFileName {
      get { return conceptFileName_; }
    }
    
    public const int SelectedTextInfoFieldNumber = 5;
    private bool hasSelectedTextInfo;
    private global::Gauge.Messages.textInfo selectedTextInfo_;
    public bool HasSelectedTextInfo {
      get { return hasSelectedTextInfo; }
    }
    public global::Gauge.Messages.textInfo SelectedTextInfo {
      get { return selectedTextInfo_ ?? global::Gauge.Messages.textInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasConceptName) return false;
        if (!hasChangeAcrossProject) return false;
        if (!hasConceptFileName) return false;
        if (!ConceptName.IsInitialized) return false;
        foreach (global::Gauge.Messages.step element in StepsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasSelectedTextInfo) {
          if (!SelectedTextInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _extractConceptRequestFieldNames;
      if (hasConceptName) {
        output.WriteMessage(1, field_names[2], ConceptName);
      }
      if (steps_.Count > 0) {
        output.WriteMessageArray(2, field_names[4], steps_);
      }
      if (hasChangeAcrossProject) {
        output.WriteBool(3, field_names[0], ChangeAcrossProject);
      }
      if (hasConceptFileName) {
        output.WriteString(4, field_names[1], ConceptFileName);
      }
      if (hasSelectedTextInfo) {
        output.WriteMessage(5, field_names[3], SelectedTextInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasConceptName) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, ConceptName);
      }
      foreach (global::Gauge.Messages.step element in StepsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasChangeAcrossProject) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ChangeAcrossProject);
      }
      if (hasConceptFileName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ConceptFileName);
      }
      if (hasSelectedTextInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, SelectedTextInfo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ExtractConceptRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtractConceptRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtractConceptRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtractConceptRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExtractConceptRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExtractConceptRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtractConceptRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExtractConceptRequest MakeReadOnly() {
      steps_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExtractConceptRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExtractConceptRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExtractConceptRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExtractConceptRequest result;
      
      private ExtractConceptRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ExtractConceptRequest original = result;
          result = new ExtractConceptRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExtractConceptRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.ExtractConceptRequest.Descriptor; }
      }
      
      public override ExtractConceptRequest DefaultInstanceForType {
        get { return global::Gauge.Messages.ExtractConceptRequest.DefaultInstance; }
      }
      
      public override ExtractConceptRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExtractConceptRequest) {
          return MergeFrom((ExtractConceptRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExtractConceptRequest other) {
        if (other == global::Gauge.Messages.ExtractConceptRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasConceptName) {
          MergeConceptName(other.ConceptName);
        }
        if (other.steps_.Count != 0) {
          result.steps_.Add(other.steps_);
        }
        if (other.HasChangeAcrossProject) {
          ChangeAcrossProject = other.ChangeAcrossProject;
        }
        if (other.HasConceptFileName) {
          ConceptFileName = other.ConceptFileName;
        }
        if (other.HasSelectedTextInfo) {
          MergeSelectedTextInfo(other.SelectedTextInfo);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_extractConceptRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _extractConceptRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Gauge.Messages.step.Builder subBuilder = global::Gauge.Messages.step.CreateBuilder();
              if (result.hasConceptName) {
                subBuilder.MergeFrom(ConceptName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ConceptName = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.steps_, global::Gauge.Messages.step.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasChangeAcrossProject = input.ReadBool(ref result.changeAcrossProject_);
              break;
            }
            case 34: {
              result.hasConceptFileName = input.ReadString(ref result.conceptFileName_);
              break;
            }
            case 42: {
              global::Gauge.Messages.textInfo.Builder subBuilder = global::Gauge.Messages.textInfo.CreateBuilder();
              if (result.hasSelectedTextInfo) {
                subBuilder.MergeFrom(SelectedTextInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SelectedTextInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasConceptName {
       get { return result.hasConceptName; }
      }
      public global::Gauge.Messages.step ConceptName {
        get { return result.ConceptName; }
        set { SetConceptName(value); }
      }
      public Builder SetConceptName(global::Gauge.Messages.step value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConceptName = true;
        result.conceptName_ = value;
        return this;
      }
      public Builder SetConceptName(global::Gauge.Messages.step.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConceptName = true;
        result.conceptName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConceptName(global::Gauge.Messages.step value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConceptName &&
            result.conceptName_ != global::Gauge.Messages.step.DefaultInstance) {
            result.conceptName_ = global::Gauge.Messages.step.CreateBuilder(result.conceptName_).MergeFrom(value).BuildPartial();
        } else {
          result.conceptName_ = value;
        }
        result.hasConceptName = true;
        return this;
      }
      public Builder ClearConceptName() {
        PrepareBuilder();
        result.hasConceptName = false;
        result.conceptName_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Gauge.Messages.step> StepsList {
        get { return PrepareBuilder().steps_; }
      }
      public int StepsCount {
        get { return result.StepsCount; }
      }
      public global::Gauge.Messages.step GetSteps(int index) {
        return result.GetSteps(index);
      }
      public Builder SetSteps(int index, global::Gauge.Messages.step value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.steps_[index] = value;
        return this;
      }
      public Builder SetSteps(int index, global::Gauge.Messages.step.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.steps_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSteps(global::Gauge.Messages.step value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.steps_.Add(value);
        return this;
      }
      public Builder AddSteps(global::Gauge.Messages.step.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.steps_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSteps(scg::IEnumerable<global::Gauge.Messages.step> values) {
        PrepareBuilder();
        result.steps_.Add(values);
        return this;
      }
      public Builder ClearSteps() {
        PrepareBuilder();
        result.steps_.Clear();
        return this;
      }
      
      public bool HasChangeAcrossProject {
        get { return result.hasChangeAcrossProject; }
      }
      public bool ChangeAcrossProject {
        get { return result.ChangeAcrossProject; }
        set { SetChangeAcrossProject(value); }
      }
      public Builder SetChangeAcrossProject(bool value) {
        PrepareBuilder();
        result.hasChangeAcrossProject = true;
        result.changeAcrossProject_ = value;
        return this;
      }
      public Builder ClearChangeAcrossProject() {
        PrepareBuilder();
        result.hasChangeAcrossProject = false;
        result.changeAcrossProject_ = false;
        return this;
      }
      
      public bool HasConceptFileName {
        get { return result.hasConceptFileName; }
      }
      public string ConceptFileName {
        get { return result.ConceptFileName; }
        set { SetConceptFileName(value); }
      }
      public Builder SetConceptFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConceptFileName = true;
        result.conceptFileName_ = value;
        return this;
      }
      public Builder ClearConceptFileName() {
        PrepareBuilder();
        result.hasConceptFileName = false;
        result.conceptFileName_ = "";
        return this;
      }
      
      public bool HasSelectedTextInfo {
       get { return result.hasSelectedTextInfo; }
      }
      public global::Gauge.Messages.textInfo SelectedTextInfo {
        get { return result.SelectedTextInfo; }
        set { SetSelectedTextInfo(value); }
      }
      public Builder SetSelectedTextInfo(global::Gauge.Messages.textInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSelectedTextInfo = true;
        result.selectedTextInfo_ = value;
        return this;
      }
      public Builder SetSelectedTextInfo(global::Gauge.Messages.textInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSelectedTextInfo = true;
        result.selectedTextInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSelectedTextInfo(global::Gauge.Messages.textInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSelectedTextInfo &&
            result.selectedTextInfo_ != global::Gauge.Messages.textInfo.DefaultInstance) {
            result.selectedTextInfo_ = global::Gauge.Messages.textInfo.CreateBuilder(result.selectedTextInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.selectedTextInfo_ = value;
        }
        result.hasSelectedTextInfo = true;
        return this;
      }
      public Builder ClearSelectedTextInfo() {
        PrepareBuilder();
        result.hasSelectedTextInfo = false;
        result.selectedTextInfo_ = null;
        return this;
      }
    }
    static ExtractConceptRequest() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class textInfo : pb::GeneratedMessage<textInfo, textInfo.Builder> {
    private textInfo() { }
    private static readonly textInfo defaultInstance = new textInfo().MakeReadOnly();
    private static readonly string[] _textInfoFieldNames = new string[] { "endLineNo", "fileName", "startingLineNo" };
    private static readonly uint[] _textInfoFieldTags = new uint[] { 24, 10, 16 };
    public static textInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override textInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override textInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_textInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<textInfo, textInfo.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_textInfo__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int StartingLineNoFieldNumber = 2;
    private bool hasStartingLineNo;
    private int startingLineNo_;
    public bool HasStartingLineNo {
      get { return hasStartingLineNo; }
    }
    public int StartingLineNo {
      get { return startingLineNo_; }
    }
    
    public const int EndLineNoFieldNumber = 3;
    private bool hasEndLineNo;
    private int endLineNo_;
    public bool HasEndLineNo {
      get { return hasEndLineNo; }
    }
    public int EndLineNo {
      get { return endLineNo_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileName) return false;
        if (!hasStartingLineNo) return false;
        if (!hasEndLineNo) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _textInfoFieldNames;
      if (hasFileName) {
        output.WriteString(1, field_names[1], FileName);
      }
      if (hasStartingLineNo) {
        output.WriteInt32(2, field_names[2], StartingLineNo);
      }
      if (hasEndLineNo) {
        output.WriteInt32(3, field_names[0], EndLineNo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFileName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, FileName);
      }
      if (hasStartingLineNo) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, StartingLineNo);
      }
      if (hasEndLineNo) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, EndLineNo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static textInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static textInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static textInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static textInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static textInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static textInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static textInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static textInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static textInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static textInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private textInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(textInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<textInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(textInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private textInfo result;
      
      private textInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          textInfo original = result;
          result = new textInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override textInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.textInfo.Descriptor; }
      }
      
      public override textInfo DefaultInstanceForType {
        get { return global::Gauge.Messages.textInfo.DefaultInstance; }
      }
      
      public override textInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is textInfo) {
          return MergeFrom((textInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(textInfo other) {
        if (other == global::Gauge.Messages.textInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasStartingLineNo) {
          StartingLineNo = other.StartingLineNo;
        }
        if (other.HasEndLineNo) {
          EndLineNo = other.EndLineNo;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_textInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _textInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 16: {
              result.hasStartingLineNo = input.ReadInt32(ref result.startingLineNo_);
              break;
            }
            case 24: {
              result.hasEndLineNo = input.ReadInt32(ref result.endLineNo_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasStartingLineNo {
        get { return result.hasStartingLineNo; }
      }
      public int StartingLineNo {
        get { return result.StartingLineNo; }
        set { SetStartingLineNo(value); }
      }
      public Builder SetStartingLineNo(int value) {
        PrepareBuilder();
        result.hasStartingLineNo = true;
        result.startingLineNo_ = value;
        return this;
      }
      public Builder ClearStartingLineNo() {
        PrepareBuilder();
        result.hasStartingLineNo = false;
        result.startingLineNo_ = 0;
        return this;
      }
      
      public bool HasEndLineNo {
        get { return result.hasEndLineNo; }
      }
      public int EndLineNo {
        get { return result.EndLineNo; }
        set { SetEndLineNo(value); }
      }
      public Builder SetEndLineNo(int value) {
        PrepareBuilder();
        result.hasEndLineNo = true;
        result.endLineNo_ = value;
        return this;
      }
      public Builder ClearEndLineNo() {
        PrepareBuilder();
        result.hasEndLineNo = false;
        result.endLineNo_ = 0;
        return this;
      }
    }
    static textInfo() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class step : pb::GeneratedMessage<step, step.Builder> {
    private step() { }
    private static readonly step defaultInstance = new step().MakeReadOnly();
    private static readonly string[] _stepFieldNames = new string[] { "name", "paramTableName", "table" };
    private static readonly uint[] _stepFieldTags = new uint[] { 10, 26, 18 };
    public static step DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override step DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override step ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_step__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<step, step.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_step__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TableFieldNumber = 2;
    private bool hasTable;
    private string table_ = "";
    public bool HasTable {
      get { return hasTable; }
    }
    public string Table {
      get { return table_; }
    }
    
    public const int ParamTableNameFieldNumber = 3;
    private bool hasParamTableName;
    private string paramTableName_ = "";
    public bool HasParamTableName {
      get { return hasParamTableName; }
    }
    public string ParamTableName {
      get { return paramTableName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stepFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasTable) {
        output.WriteString(2, field_names[2], Table);
      }
      if (hasParamTableName) {
        output.WriteString(3, field_names[1], ParamTableName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasTable) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Table);
      }
      if (hasParamTableName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ParamTableName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static step ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static step ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static step ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static step ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static step ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static step ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static step ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static step ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static step ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static step ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private step MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(step prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<step, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(step cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private step result;
      
      private step PrepareBuilder() {
        if (resultIsReadOnly) {
          step original = result;
          result = new step();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override step MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.step.Descriptor; }
      }
      
      public override step DefaultInstanceForType {
        get { return global::Gauge.Messages.step.DefaultInstance; }
      }
      
      public override step BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is step) {
          return MergeFrom((step) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(step other) {
        if (other == global::Gauge.Messages.step.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasTable) {
          Table = other.Table;
        }
        if (other.HasParamTableName) {
          ParamTableName = other.ParamTableName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stepFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stepFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasTable = input.ReadString(ref result.table_);
              break;
            }
            case 26: {
              result.hasParamTableName = input.ReadString(ref result.paramTableName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasTable {
        get { return result.hasTable; }
      }
      public string Table {
        get { return result.Table; }
        set { SetTable(value); }
      }
      public Builder SetTable(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTable = true;
        result.table_ = value;
        return this;
      }
      public Builder ClearTable() {
        PrepareBuilder();
        result.hasTable = false;
        result.table_ = "";
        return this;
      }
      
      public bool HasParamTableName {
        get { return result.hasParamTableName; }
      }
      public string ParamTableName {
        get { return result.ParamTableName; }
        set { SetParamTableName(value); }
      }
      public Builder SetParamTableName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParamTableName = true;
        result.paramTableName_ = value;
        return this;
      }
      public Builder ClearParamTableName() {
        PrepareBuilder();
        result.hasParamTableName = false;
        result.paramTableName_ = "";
        return this;
      }
    }
    static step() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExtractConceptResponse : pb::GeneratedMessage<ExtractConceptResponse, ExtractConceptResponse.Builder> {
    private ExtractConceptResponse() { }
    private static readonly ExtractConceptResponse defaultInstance = new ExtractConceptResponse().MakeReadOnly();
    private static readonly string[] _extractConceptResponseFieldNames = new string[] { "error", "filesChanged", "isSuccess" };
    private static readonly uint[] _extractConceptResponseFieldTags = new uint[] { 18, 26, 8 };
    public static ExtractConceptResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExtractConceptResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExtractConceptResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ExtractConceptResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExtractConceptResponse, ExtractConceptResponse.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_ExtractConceptResponse__FieldAccessorTable; }
    }
    
    public const int IsSuccessFieldNumber = 1;
    private bool hasIsSuccess;
    private bool isSuccess_;
    public bool HasIsSuccess {
      get { return hasIsSuccess; }
    }
    public bool IsSuccess {
      get { return isSuccess_; }
    }
    
    public const int ErrorFieldNumber = 2;
    private bool hasError;
    private string error_ = "";
    public bool HasError {
      get { return hasError; }
    }
    public string Error {
      get { return error_; }
    }
    
    public const int FilesChangedFieldNumber = 3;
    private pbc::PopsicleList<string> filesChanged_ = new pbc::PopsicleList<string>();
    public scg::IList<string> FilesChangedList {
      get { return pbc::Lists.AsReadOnly(filesChanged_); }
    }
    public int FilesChangedCount {
      get { return filesChanged_.Count; }
    }
    public string GetFilesChanged(int index) {
      return filesChanged_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsSuccess) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _extractConceptResponseFieldNames;
      if (hasIsSuccess) {
        output.WriteBool(1, field_names[2], IsSuccess);
      }
      if (hasError) {
        output.WriteString(2, field_names[0], Error);
      }
      if (filesChanged_.Count > 0) {
        output.WriteStringArray(3, field_names[1], filesChanged_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsSuccess) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, IsSuccess);
      }
      if (hasError) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Error);
      }
      {
        int dataSize = 0;
        foreach (string element in FilesChangedList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * filesChanged_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ExtractConceptResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtractConceptResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtractConceptResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtractConceptResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExtractConceptResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExtractConceptResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExtractConceptResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtractConceptResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExtractConceptResponse MakeReadOnly() {
      filesChanged_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExtractConceptResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExtractConceptResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExtractConceptResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExtractConceptResponse result;
      
      private ExtractConceptResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ExtractConceptResponse original = result;
          result = new ExtractConceptResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExtractConceptResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.ExtractConceptResponse.Descriptor; }
      }
      
      public override ExtractConceptResponse DefaultInstanceForType {
        get { return global::Gauge.Messages.ExtractConceptResponse.DefaultInstance; }
      }
      
      public override ExtractConceptResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExtractConceptResponse) {
          return MergeFrom((ExtractConceptResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExtractConceptResponse other) {
        if (other == global::Gauge.Messages.ExtractConceptResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsSuccess) {
          IsSuccess = other.IsSuccess;
        }
        if (other.HasError) {
          Error = other.Error;
        }
        if (other.filesChanged_.Count != 0) {
          result.filesChanged_.Add(other.filesChanged_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_extractConceptResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _extractConceptResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsSuccess = input.ReadBool(ref result.isSuccess_);
              break;
            }
            case 18: {
              result.hasError = input.ReadString(ref result.error_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.filesChanged_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsSuccess {
        get { return result.hasIsSuccess; }
      }
      public bool IsSuccess {
        get { return result.IsSuccess; }
        set { SetIsSuccess(value); }
      }
      public Builder SetIsSuccess(bool value) {
        PrepareBuilder();
        result.hasIsSuccess = true;
        result.isSuccess_ = value;
        return this;
      }
      public Builder ClearIsSuccess() {
        PrepareBuilder();
        result.hasIsSuccess = false;
        result.isSuccess_ = false;
        return this;
      }
      
      public bool HasError {
        get { return result.hasError; }
      }
      public string Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> FilesChangedList {
        get { return PrepareBuilder().filesChanged_; }
      }
      public int FilesChangedCount {
        get { return result.FilesChangedCount; }
      }
      public string GetFilesChanged(int index) {
        return result.GetFilesChanged(index);
      }
      public Builder SetFilesChanged(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filesChanged_[index] = value;
        return this;
      }
      public Builder AddFilesChanged(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filesChanged_.Add(value);
        return this;
      }
      public Builder AddRangeFilesChanged(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.filesChanged_.Add(values);
        return this;
      }
      public Builder ClearFilesChanged() {
        PrepareBuilder();
        result.filesChanged_.Clear();
        return this;
      }
    }
    static ExtractConceptResponse() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class APIMessage : pb::GeneratedMessage<APIMessage, APIMessage.Builder> {
    private APIMessage() { }
    private static readonly APIMessage defaultInstance = new APIMessage().MakeReadOnly();
    private static readonly string[] _aPIMessageFieldNames = new string[] { "allConceptsRequest", "allConceptsResponse", "allSpecsRequest", "allSpecsResponse", "allStepsRequest", "allStepsResponse", "error", "extractConceptRequest", "extractConceptResponse", "installationRootRequest", "installationRootResponse", "libPathRequest", "libPathResponse", "messageId", "messageType", "performRefactoringRequest", "performRefactoringResponse", "projectRootRequest", "projectRootResponse", "stepValueRequest", "stepValueResponse" };
    private static readonly uint[] _aPIMessageFieldTags = new uint[] { 130, 138, 74, 82, 58, 66, 122, 162, 170, 42, 50, 106, 114, 16, 8, 146, 154, 26, 34, 90, 98 };
    public static APIMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override APIMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override APIMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_APIMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<APIMessage, APIMessage.Builder> InternalFieldAccessors {
      get { return global::Gauge.Messages.Api.internal__static_gauge_messages_APIMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum APIMessageType {
        GetProjectRootRequest = 1,
        GetProjectRootResponse = 2,
        GetInstallationRootRequest = 3,
        GetInstallationRootResponse = 4,
        GetAllStepsRequest = 5,
        GetAllStepResponse = 6,
        GetAllSpecsRequest = 7,
        GetAllSpecsResponse = 8,
        GetStepValueRequest = 9,
        GetStepValueResponse = 10,
        GetLanguagePluginLibPathRequest = 11,
        GetLanguagePluginLibPathResponse = 12,
        ErrorResponse = 13,
        GetAllConceptsRequest = 14,
        GetAllConceptsResponse = 15,
        PerformRefactoringRequest = 16,
        PerformRefactoringResponse = 17,
        ExtractConceptRequest = 18,
        ExtractConceptResponse = 19,
      }
      
    }
    #endregion
    
    public const int MessageTypeFieldNumber = 1;
    private bool hasMessageType;
    private global::Gauge.Messages.APIMessage.Types.APIMessageType messageType_ = global::Gauge.Messages.APIMessage.Types.APIMessageType.GetProjectRootRequest;
    public bool HasMessageType {
      get { return hasMessageType; }
    }
    public global::Gauge.Messages.APIMessage.Types.APIMessageType MessageType {
      get { return messageType_; }
    }
    
    public const int MessageIdFieldNumber = 2;
    private bool hasMessageId;
    private long messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public long MessageId {
      get { return messageId_; }
    }
    
    public const int ProjectRootRequestFieldNumber = 3;
    private bool hasProjectRootRequest;
    private global::Gauge.Messages.GetProjectRootRequest projectRootRequest_;
    public bool HasProjectRootRequest {
      get { return hasProjectRootRequest; }
    }
    public global::Gauge.Messages.GetProjectRootRequest ProjectRootRequest {
      get { return projectRootRequest_ ?? global::Gauge.Messages.GetProjectRootRequest.DefaultInstance; }
    }
    
    public const int ProjectRootResponseFieldNumber = 4;
    private bool hasProjectRootResponse;
    private global::Gauge.Messages.GetProjectRootResponse projectRootResponse_;
    public bool HasProjectRootResponse {
      get { return hasProjectRootResponse; }
    }
    public global::Gauge.Messages.GetProjectRootResponse ProjectRootResponse {
      get { return projectRootResponse_ ?? global::Gauge.Messages.GetProjectRootResponse.DefaultInstance; }
    }
    
    public const int InstallationRootRequestFieldNumber = 5;
    private bool hasInstallationRootRequest;
    private global::Gauge.Messages.GetInstallationRootRequest installationRootRequest_;
    public bool HasInstallationRootRequest {
      get { return hasInstallationRootRequest; }
    }
    public global::Gauge.Messages.GetInstallationRootRequest InstallationRootRequest {
      get { return installationRootRequest_ ?? global::Gauge.Messages.GetInstallationRootRequest.DefaultInstance; }
    }
    
    public const int InstallationRootResponseFieldNumber = 6;
    private bool hasInstallationRootResponse;
    private global::Gauge.Messages.GetInstallationRootResponse installationRootResponse_;
    public bool HasInstallationRootResponse {
      get { return hasInstallationRootResponse; }
    }
    public global::Gauge.Messages.GetInstallationRootResponse InstallationRootResponse {
      get { return installationRootResponse_ ?? global::Gauge.Messages.GetInstallationRootResponse.DefaultInstance; }
    }
    
    public const int AllStepsRequestFieldNumber = 7;
    private bool hasAllStepsRequest;
    private global::Gauge.Messages.GetAllStepsRequest allStepsRequest_;
    public bool HasAllStepsRequest {
      get { return hasAllStepsRequest; }
    }
    public global::Gauge.Messages.GetAllStepsRequest AllStepsRequest {
      get { return allStepsRequest_ ?? global::Gauge.Messages.GetAllStepsRequest.DefaultInstance; }
    }
    
    public const int AllStepsResponseFieldNumber = 8;
    private bool hasAllStepsResponse;
    private global::Gauge.Messages.GetAllStepsResponse allStepsResponse_;
    public bool HasAllStepsResponse {
      get { return hasAllStepsResponse; }
    }
    public global::Gauge.Messages.GetAllStepsResponse AllStepsResponse {
      get { return allStepsResponse_ ?? global::Gauge.Messages.GetAllStepsResponse.DefaultInstance; }
    }
    
    public const int AllSpecsRequestFieldNumber = 9;
    private bool hasAllSpecsRequest;
    private global::Gauge.Messages.GetAllSpecsRequest allSpecsRequest_;
    public bool HasAllSpecsRequest {
      get { return hasAllSpecsRequest; }
    }
    public global::Gauge.Messages.GetAllSpecsRequest AllSpecsRequest {
      get { return allSpecsRequest_ ?? global::Gauge.Messages.GetAllSpecsRequest.DefaultInstance; }
    }
    
    public const int AllSpecsResponseFieldNumber = 10;
    private bool hasAllSpecsResponse;
    private global::Gauge.Messages.GetAllSpecsResponse allSpecsResponse_;
    public bool HasAllSpecsResponse {
      get { return hasAllSpecsResponse; }
    }
    public global::Gauge.Messages.GetAllSpecsResponse AllSpecsResponse {
      get { return allSpecsResponse_ ?? global::Gauge.Messages.GetAllSpecsResponse.DefaultInstance; }
    }
    
    public const int StepValueRequestFieldNumber = 11;
    private bool hasStepValueRequest;
    private global::Gauge.Messages.GetStepValueRequest stepValueRequest_;
    public bool HasStepValueRequest {
      get { return hasStepValueRequest; }
    }
    public global::Gauge.Messages.GetStepValueRequest StepValueRequest {
      get { return stepValueRequest_ ?? global::Gauge.Messages.GetStepValueRequest.DefaultInstance; }
    }
    
    public const int StepValueResponseFieldNumber = 12;
    private bool hasStepValueResponse;
    private global::Gauge.Messages.GetStepValueResponse stepValueResponse_;
    public bool HasStepValueResponse {
      get { return hasStepValueResponse; }
    }
    public global::Gauge.Messages.GetStepValueResponse StepValueResponse {
      get { return stepValueResponse_ ?? global::Gauge.Messages.GetStepValueResponse.DefaultInstance; }
    }
    
    public const int LibPathRequestFieldNumber = 13;
    private bool hasLibPathRequest;
    private global::Gauge.Messages.GetLanguagePluginLibPathRequest libPathRequest_;
    public bool HasLibPathRequest {
      get { return hasLibPathRequest; }
    }
    public global::Gauge.Messages.GetLanguagePluginLibPathRequest LibPathRequest {
      get { return libPathRequest_ ?? global::Gauge.Messages.GetLanguagePluginLibPathRequest.DefaultInstance; }
    }
    
    public const int LibPathResponseFieldNumber = 14;
    private bool hasLibPathResponse;
    private global::Gauge.Messages.GetLanguagePluginLibPathResponse libPathResponse_;
    public bool HasLibPathResponse {
      get { return hasLibPathResponse; }
    }
    public global::Gauge.Messages.GetLanguagePluginLibPathResponse LibPathResponse {
      get { return libPathResponse_ ?? global::Gauge.Messages.GetLanguagePluginLibPathResponse.DefaultInstance; }
    }
    
    public const int ErrorFieldNumber = 15;
    private bool hasError;
    private global::Gauge.Messages.ErrorResponse error_;
    public bool HasError {
      get { return hasError; }
    }
    public global::Gauge.Messages.ErrorResponse Error {
      get { return error_ ?? global::Gauge.Messages.ErrorResponse.DefaultInstance; }
    }
    
    public const int AllConceptsRequestFieldNumber = 16;
    private bool hasAllConceptsRequest;
    private global::Gauge.Messages.GetAllConceptsRequest allConceptsRequest_;
    public bool HasAllConceptsRequest {
      get { return hasAllConceptsRequest; }
    }
    public global::Gauge.Messages.GetAllConceptsRequest AllConceptsRequest {
      get { return allConceptsRequest_ ?? global::Gauge.Messages.GetAllConceptsRequest.DefaultInstance; }
    }
    
    public const int AllConceptsResponseFieldNumber = 17;
    private bool hasAllConceptsResponse;
    private global::Gauge.Messages.GetAllConceptsResponse allConceptsResponse_;
    public bool HasAllConceptsResponse {
      get { return hasAllConceptsResponse; }
    }
    public global::Gauge.Messages.GetAllConceptsResponse AllConceptsResponse {
      get { return allConceptsResponse_ ?? global::Gauge.Messages.GetAllConceptsResponse.DefaultInstance; }
    }
    
    public const int PerformRefactoringRequestFieldNumber = 18;
    private bool hasPerformRefactoringRequest;
    private global::Gauge.Messages.PerformRefactoringRequest performRefactoringRequest_;
    public bool HasPerformRefactoringRequest {
      get { return hasPerformRefactoringRequest; }
    }
    public global::Gauge.Messages.PerformRefactoringRequest PerformRefactoringRequest {
      get { return performRefactoringRequest_ ?? global::Gauge.Messages.PerformRefactoringRequest.DefaultInstance; }
    }
    
    public const int PerformRefactoringResponseFieldNumber = 19;
    private bool hasPerformRefactoringResponse;
    private global::Gauge.Messages.PerformRefactoringResponse performRefactoringResponse_;
    public bool HasPerformRefactoringResponse {
      get { return hasPerformRefactoringResponse; }
    }
    public global::Gauge.Messages.PerformRefactoringResponse PerformRefactoringResponse {
      get { return performRefactoringResponse_ ?? global::Gauge.Messages.PerformRefactoringResponse.DefaultInstance; }
    }
    
    public const int ExtractConceptRequestFieldNumber = 20;
    private bool hasExtractConceptRequest;
    private global::Gauge.Messages.ExtractConceptRequest extractConceptRequest_;
    public bool HasExtractConceptRequest {
      get { return hasExtractConceptRequest; }
    }
    public global::Gauge.Messages.ExtractConceptRequest ExtractConceptRequest {
      get { return extractConceptRequest_ ?? global::Gauge.Messages.ExtractConceptRequest.DefaultInstance; }
    }
    
    public const int ExtractConceptResponseFieldNumber = 21;
    private bool hasExtractConceptResponse;
    private global::Gauge.Messages.ExtractConceptResponse extractConceptResponse_;
    public bool HasExtractConceptResponse {
      get { return hasExtractConceptResponse; }
    }
    public global::Gauge.Messages.ExtractConceptResponse ExtractConceptResponse {
      get { return extractConceptResponse_ ?? global::Gauge.Messages.ExtractConceptResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageType) return false;
        if (!hasMessageId) return false;
        if (HasProjectRootResponse) {
          if (!ProjectRootResponse.IsInitialized) return false;
        }
        if (HasInstallationRootResponse) {
          if (!InstallationRootResponse.IsInitialized) return false;
        }
        if (HasAllStepsResponse) {
          if (!AllStepsResponse.IsInitialized) return false;
        }
        if (HasAllSpecsResponse) {
          if (!AllSpecsResponse.IsInitialized) return false;
        }
        if (HasStepValueRequest) {
          if (!StepValueRequest.IsInitialized) return false;
        }
        if (HasStepValueResponse) {
          if (!StepValueResponse.IsInitialized) return false;
        }
        if (HasLibPathRequest) {
          if (!LibPathRequest.IsInitialized) return false;
        }
        if (HasLibPathResponse) {
          if (!LibPathResponse.IsInitialized) return false;
        }
        if (HasError) {
          if (!Error.IsInitialized) return false;
        }
        if (HasAllConceptsResponse) {
          if (!AllConceptsResponse.IsInitialized) return false;
        }
        if (HasPerformRefactoringRequest) {
          if (!PerformRefactoringRequest.IsInitialized) return false;
        }
        if (HasPerformRefactoringResponse) {
          if (!PerformRefactoringResponse.IsInitialized) return false;
        }
        if (HasExtractConceptRequest) {
          if (!ExtractConceptRequest.IsInitialized) return false;
        }
        if (HasExtractConceptResponse) {
          if (!ExtractConceptResponse.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _aPIMessageFieldNames;
      if (hasMessageType) {
        output.WriteEnum(1, field_names[14], (int) MessageType, MessageType);
      }
      if (hasMessageId) {
        output.WriteInt64(2, field_names[13], MessageId);
      }
      if (hasProjectRootRequest) {
        output.WriteMessage(3, field_names[17], ProjectRootRequest);
      }
      if (hasProjectRootResponse) {
        output.WriteMessage(4, field_names[18], ProjectRootResponse);
      }
      if (hasInstallationRootRequest) {
        output.WriteMessage(5, field_names[9], InstallationRootRequest);
      }
      if (hasInstallationRootResponse) {
        output.WriteMessage(6, field_names[10], InstallationRootResponse);
      }
      if (hasAllStepsRequest) {
        output.WriteMessage(7, field_names[4], AllStepsRequest);
      }
      if (hasAllStepsResponse) {
        output.WriteMessage(8, field_names[5], AllStepsResponse);
      }
      if (hasAllSpecsRequest) {
        output.WriteMessage(9, field_names[2], AllSpecsRequest);
      }
      if (hasAllSpecsResponse) {
        output.WriteMessage(10, field_names[3], AllSpecsResponse);
      }
      if (hasStepValueRequest) {
        output.WriteMessage(11, field_names[19], StepValueRequest);
      }
      if (hasStepValueResponse) {
        output.WriteMessage(12, field_names[20], StepValueResponse);
      }
      if (hasLibPathRequest) {
        output.WriteMessage(13, field_names[11], LibPathRequest);
      }
      if (hasLibPathResponse) {
        output.WriteMessage(14, field_names[12], LibPathResponse);
      }
      if (hasError) {
        output.WriteMessage(15, field_names[6], Error);
      }
      if (hasAllConceptsRequest) {
        output.WriteMessage(16, field_names[0], AllConceptsRequest);
      }
      if (hasAllConceptsResponse) {
        output.WriteMessage(17, field_names[1], AllConceptsResponse);
      }
      if (hasPerformRefactoringRequest) {
        output.WriteMessage(18, field_names[15], PerformRefactoringRequest);
      }
      if (hasPerformRefactoringResponse) {
        output.WriteMessage(19, field_names[16], PerformRefactoringResponse);
      }
      if (hasExtractConceptRequest) {
        output.WriteMessage(20, field_names[7], ExtractConceptRequest);
      }
      if (hasExtractConceptResponse) {
        output.WriteMessage(21, field_names[8], ExtractConceptResponse);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MessageType);
      }
      if (hasMessageId) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, MessageId);
      }
      if (hasProjectRootRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, ProjectRootRequest);
      }
      if (hasProjectRootResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, ProjectRootResponse);
      }
      if (hasInstallationRootRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, InstallationRootRequest);
      }
      if (hasInstallationRootResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, InstallationRootResponse);
      }
      if (hasAllStepsRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, AllStepsRequest);
      }
      if (hasAllStepsResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, AllStepsResponse);
      }
      if (hasAllSpecsRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, AllSpecsRequest);
      }
      if (hasAllSpecsResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, AllSpecsResponse);
      }
      if (hasStepValueRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, StepValueRequest);
      }
      if (hasStepValueResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, StepValueResponse);
      }
      if (hasLibPathRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, LibPathRequest);
      }
      if (hasLibPathResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, LibPathResponse);
      }
      if (hasError) {
        size += pb::CodedOutputStream.ComputeMessageSize(15, Error);
      }
      if (hasAllConceptsRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(16, AllConceptsRequest);
      }
      if (hasAllConceptsResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(17, AllConceptsResponse);
      }
      if (hasPerformRefactoringRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(18, PerformRefactoringRequest);
      }
      if (hasPerformRefactoringResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(19, PerformRefactoringResponse);
      }
      if (hasExtractConceptRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(20, ExtractConceptRequest);
      }
      if (hasExtractConceptResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(21, ExtractConceptResponse);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static APIMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static APIMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static APIMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static APIMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static APIMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static APIMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static APIMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static APIMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static APIMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static APIMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private APIMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(APIMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<APIMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(APIMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private APIMessage result;
      
      private APIMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          APIMessage original = result;
          result = new APIMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override APIMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gauge.Messages.APIMessage.Descriptor; }
      }
      
      public override APIMessage DefaultInstanceForType {
        get { return global::Gauge.Messages.APIMessage.DefaultInstance; }
      }
      
      public override APIMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is APIMessage) {
          return MergeFrom((APIMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(APIMessage other) {
        if (other == global::Gauge.Messages.APIMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageType) {
          MessageType = other.MessageType;
        }
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasProjectRootRequest) {
          MergeProjectRootRequest(other.ProjectRootRequest);
        }
        if (other.HasProjectRootResponse) {
          MergeProjectRootResponse(other.ProjectRootResponse);
        }
        if (other.HasInstallationRootRequest) {
          MergeInstallationRootRequest(other.InstallationRootRequest);
        }
        if (other.HasInstallationRootResponse) {
          MergeInstallationRootResponse(other.InstallationRootResponse);
        }
        if (other.HasAllStepsRequest) {
          MergeAllStepsRequest(other.AllStepsRequest);
        }
        if (other.HasAllStepsResponse) {
          MergeAllStepsResponse(other.AllStepsResponse);
        }
        if (other.HasAllSpecsRequest) {
          MergeAllSpecsRequest(other.AllSpecsRequest);
        }
        if (other.HasAllSpecsResponse) {
          MergeAllSpecsResponse(other.AllSpecsResponse);
        }
        if (other.HasStepValueRequest) {
          MergeStepValueRequest(other.StepValueRequest);
        }
        if (other.HasStepValueResponse) {
          MergeStepValueResponse(other.StepValueResponse);
        }
        if (other.HasLibPathRequest) {
          MergeLibPathRequest(other.LibPathRequest);
        }
        if (other.HasLibPathResponse) {
          MergeLibPathResponse(other.LibPathResponse);
        }
        if (other.HasError) {
          MergeError(other.Error);
        }
        if (other.HasAllConceptsRequest) {
          MergeAllConceptsRequest(other.AllConceptsRequest);
        }
        if (other.HasAllConceptsResponse) {
          MergeAllConceptsResponse(other.AllConceptsResponse);
        }
        if (other.HasPerformRefactoringRequest) {
          MergePerformRefactoringRequest(other.PerformRefactoringRequest);
        }
        if (other.HasPerformRefactoringResponse) {
          MergePerformRefactoringResponse(other.PerformRefactoringResponse);
        }
        if (other.HasExtractConceptRequest) {
          MergeExtractConceptRequest(other.ExtractConceptRequest);
        }
        if (other.HasExtractConceptResponse) {
          MergeExtractConceptResponse(other.ExtractConceptResponse);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_aPIMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _aPIMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.messageType_, out unknown)) {
                result.hasMessageType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasMessageId = input.ReadInt64(ref result.messageId_);
              break;
            }
            case 26: {
              global::Gauge.Messages.GetProjectRootRequest.Builder subBuilder = global::Gauge.Messages.GetProjectRootRequest.CreateBuilder();
              if (result.hasProjectRootRequest) {
                subBuilder.MergeFrom(ProjectRootRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ProjectRootRequest = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Gauge.Messages.GetProjectRootResponse.Builder subBuilder = global::Gauge.Messages.GetProjectRootResponse.CreateBuilder();
              if (result.hasProjectRootResponse) {
                subBuilder.MergeFrom(ProjectRootResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ProjectRootResponse = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Gauge.Messages.GetInstallationRootRequest.Builder subBuilder = global::Gauge.Messages.GetInstallationRootRequest.CreateBuilder();
              if (result.hasInstallationRootRequest) {
                subBuilder.MergeFrom(InstallationRootRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InstallationRootRequest = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::Gauge.Messages.GetInstallationRootResponse.Builder subBuilder = global::Gauge.Messages.GetInstallationRootResponse.CreateBuilder();
              if (result.hasInstallationRootResponse) {
                subBuilder.MergeFrom(InstallationRootResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InstallationRootResponse = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::Gauge.Messages.GetAllStepsRequest.Builder subBuilder = global::Gauge.Messages.GetAllStepsRequest.CreateBuilder();
              if (result.hasAllStepsRequest) {
                subBuilder.MergeFrom(AllStepsRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AllStepsRequest = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Gauge.Messages.GetAllStepsResponse.Builder subBuilder = global::Gauge.Messages.GetAllStepsResponse.CreateBuilder();
              if (result.hasAllStepsResponse) {
                subBuilder.MergeFrom(AllStepsResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AllStepsResponse = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Gauge.Messages.GetAllSpecsRequest.Builder subBuilder = global::Gauge.Messages.GetAllSpecsRequest.CreateBuilder();
              if (result.hasAllSpecsRequest) {
                subBuilder.MergeFrom(AllSpecsRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AllSpecsRequest = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Gauge.Messages.GetAllSpecsResponse.Builder subBuilder = global::Gauge.Messages.GetAllSpecsResponse.CreateBuilder();
              if (result.hasAllSpecsResponse) {
                subBuilder.MergeFrom(AllSpecsResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AllSpecsResponse = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::Gauge.Messages.GetStepValueRequest.Builder subBuilder = global::Gauge.Messages.GetStepValueRequest.CreateBuilder();
              if (result.hasStepValueRequest) {
                subBuilder.MergeFrom(StepValueRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StepValueRequest = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::Gauge.Messages.GetStepValueResponse.Builder subBuilder = global::Gauge.Messages.GetStepValueResponse.CreateBuilder();
              if (result.hasStepValueResponse) {
                subBuilder.MergeFrom(StepValueResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StepValueResponse = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::Gauge.Messages.GetLanguagePluginLibPathRequest.Builder subBuilder = global::Gauge.Messages.GetLanguagePluginLibPathRequest.CreateBuilder();
              if (result.hasLibPathRequest) {
                subBuilder.MergeFrom(LibPathRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LibPathRequest = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::Gauge.Messages.GetLanguagePluginLibPathResponse.Builder subBuilder = global::Gauge.Messages.GetLanguagePluginLibPathResponse.CreateBuilder();
              if (result.hasLibPathResponse) {
                subBuilder.MergeFrom(LibPathResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LibPathResponse = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::Gauge.Messages.ErrorResponse.Builder subBuilder = global::Gauge.Messages.ErrorResponse.CreateBuilder();
              if (result.hasError) {
                subBuilder.MergeFrom(Error);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Error = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::Gauge.Messages.GetAllConceptsRequest.Builder subBuilder = global::Gauge.Messages.GetAllConceptsRequest.CreateBuilder();
              if (result.hasAllConceptsRequest) {
                subBuilder.MergeFrom(AllConceptsRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AllConceptsRequest = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              global::Gauge.Messages.GetAllConceptsResponse.Builder subBuilder = global::Gauge.Messages.GetAllConceptsResponse.CreateBuilder();
              if (result.hasAllConceptsResponse) {
                subBuilder.MergeFrom(AllConceptsResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AllConceptsResponse = subBuilder.BuildPartial();
              break;
            }
            case 146: {
              global::Gauge.Messages.PerformRefactoringRequest.Builder subBuilder = global::Gauge.Messages.PerformRefactoringRequest.CreateBuilder();
              if (result.hasPerformRefactoringRequest) {
                subBuilder.MergeFrom(PerformRefactoringRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PerformRefactoringRequest = subBuilder.BuildPartial();
              break;
            }
            case 154: {
              global::Gauge.Messages.PerformRefactoringResponse.Builder subBuilder = global::Gauge.Messages.PerformRefactoringResponse.CreateBuilder();
              if (result.hasPerformRefactoringResponse) {
                subBuilder.MergeFrom(PerformRefactoringResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PerformRefactoringResponse = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              global::Gauge.Messages.ExtractConceptRequest.Builder subBuilder = global::Gauge.Messages.ExtractConceptRequest.CreateBuilder();
              if (result.hasExtractConceptRequest) {
                subBuilder.MergeFrom(ExtractConceptRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExtractConceptRequest = subBuilder.BuildPartial();
              break;
            }
            case 170: {
              global::Gauge.Messages.ExtractConceptResponse.Builder subBuilder = global::Gauge.Messages.ExtractConceptResponse.CreateBuilder();
              if (result.hasExtractConceptResponse) {
                subBuilder.MergeFrom(ExtractConceptResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExtractConceptResponse = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageType {
       get { return result.hasMessageType; }
      }
      public global::Gauge.Messages.APIMessage.Types.APIMessageType MessageType {
        get { return result.MessageType; }
        set { SetMessageType(value); }
      }
      public Builder SetMessageType(global::Gauge.Messages.APIMessage.Types.APIMessageType value) {
        PrepareBuilder();
        result.hasMessageType = true;
        result.messageType_ = value;
        return this;
      }
      public Builder ClearMessageType() {
        PrepareBuilder();
        result.hasMessageType = false;
        result.messageType_ = global::Gauge.Messages.APIMessage.Types.APIMessageType.GetProjectRootRequest;
        return this;
      }
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public long MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(long value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0L;
        return this;
      }
      
      public bool HasProjectRootRequest {
       get { return result.hasProjectRootRequest; }
      }
      public global::Gauge.Messages.GetProjectRootRequest ProjectRootRequest {
        get { return result.ProjectRootRequest; }
        set { SetProjectRootRequest(value); }
      }
      public Builder SetProjectRootRequest(global::Gauge.Messages.GetProjectRootRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProjectRootRequest = true;
        result.projectRootRequest_ = value;
        return this;
      }
      public Builder SetProjectRootRequest(global::Gauge.Messages.GetProjectRootRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasProjectRootRequest = true;
        result.projectRootRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeProjectRootRequest(global::Gauge.Messages.GetProjectRootRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasProjectRootRequest &&
            result.projectRootRequest_ != global::Gauge.Messages.GetProjectRootRequest.DefaultInstance) {
            result.projectRootRequest_ = global::Gauge.Messages.GetProjectRootRequest.CreateBuilder(result.projectRootRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.projectRootRequest_ = value;
        }
        result.hasProjectRootRequest = true;
        return this;
      }
      public Builder ClearProjectRootRequest() {
        PrepareBuilder();
        result.hasProjectRootRequest = false;
        result.projectRootRequest_ = null;
        return this;
      }
      
      public bool HasProjectRootResponse {
       get { return result.hasProjectRootResponse; }
      }
      public global::Gauge.Messages.GetProjectRootResponse ProjectRootResponse {
        get { return result.ProjectRootResponse; }
        set { SetProjectRootResponse(value); }
      }
      public Builder SetProjectRootResponse(global::Gauge.Messages.GetProjectRootResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProjectRootResponse = true;
        result.projectRootResponse_ = value;
        return this;
      }
      public Builder SetProjectRootResponse(global::Gauge.Messages.GetProjectRootResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasProjectRootResponse = true;
        result.projectRootResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeProjectRootResponse(global::Gauge.Messages.GetProjectRootResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasProjectRootResponse &&
            result.projectRootResponse_ != global::Gauge.Messages.GetProjectRootResponse.DefaultInstance) {
            result.projectRootResponse_ = global::Gauge.Messages.GetProjectRootResponse.CreateBuilder(result.projectRootResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.projectRootResponse_ = value;
        }
        result.hasProjectRootResponse = true;
        return this;
      }
      public Builder ClearProjectRootResponse() {
        PrepareBuilder();
        result.hasProjectRootResponse = false;
        result.projectRootResponse_ = null;
        return this;
      }
      
      public bool HasInstallationRootRequest {
       get { return result.hasInstallationRootRequest; }
      }
      public global::Gauge.Messages.GetInstallationRootRequest InstallationRootRequest {
        get { return result.InstallationRootRequest; }
        set { SetInstallationRootRequest(value); }
      }
      public Builder SetInstallationRootRequest(global::Gauge.Messages.GetInstallationRootRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstallationRootRequest = true;
        result.installationRootRequest_ = value;
        return this;
      }
      public Builder SetInstallationRootRequest(global::Gauge.Messages.GetInstallationRootRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInstallationRootRequest = true;
        result.installationRootRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInstallationRootRequest(global::Gauge.Messages.GetInstallationRootRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInstallationRootRequest &&
            result.installationRootRequest_ != global::Gauge.Messages.GetInstallationRootRequest.DefaultInstance) {
            result.installationRootRequest_ = global::Gauge.Messages.GetInstallationRootRequest.CreateBuilder(result.installationRootRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.installationRootRequest_ = value;
        }
        result.hasInstallationRootRequest = true;
        return this;
      }
      public Builder ClearInstallationRootRequest() {
        PrepareBuilder();
        result.hasInstallationRootRequest = false;
        result.installationRootRequest_ = null;
        return this;
      }
      
      public bool HasInstallationRootResponse {
       get { return result.hasInstallationRootResponse; }
      }
      public global::Gauge.Messages.GetInstallationRootResponse InstallationRootResponse {
        get { return result.InstallationRootResponse; }
        set { SetInstallationRootResponse(value); }
      }
      public Builder SetInstallationRootResponse(global::Gauge.Messages.GetInstallationRootResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstallationRootResponse = true;
        result.installationRootResponse_ = value;
        return this;
      }
      public Builder SetInstallationRootResponse(global::Gauge.Messages.GetInstallationRootResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInstallationRootResponse = true;
        result.installationRootResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInstallationRootResponse(global::Gauge.Messages.GetInstallationRootResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInstallationRootResponse &&
            result.installationRootResponse_ != global::Gauge.Messages.GetInstallationRootResponse.DefaultInstance) {
            result.installationRootResponse_ = global::Gauge.Messages.GetInstallationRootResponse.CreateBuilder(result.installationRootResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.installationRootResponse_ = value;
        }
        result.hasInstallationRootResponse = true;
        return this;
      }
      public Builder ClearInstallationRootResponse() {
        PrepareBuilder();
        result.hasInstallationRootResponse = false;
        result.installationRootResponse_ = null;
        return this;
      }
      
      public bool HasAllStepsRequest {
       get { return result.hasAllStepsRequest; }
      }
      public global::Gauge.Messages.GetAllStepsRequest AllStepsRequest {
        get { return result.AllStepsRequest; }
        set { SetAllStepsRequest(value); }
      }
      public Builder SetAllStepsRequest(global::Gauge.Messages.GetAllStepsRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAllStepsRequest = true;
        result.allStepsRequest_ = value;
        return this;
      }
      public Builder SetAllStepsRequest(global::Gauge.Messages.GetAllStepsRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAllStepsRequest = true;
        result.allStepsRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAllStepsRequest(global::Gauge.Messages.GetAllStepsRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAllStepsRequest &&
            result.allStepsRequest_ != global::Gauge.Messages.GetAllStepsRequest.DefaultInstance) {
            result.allStepsRequest_ = global::Gauge.Messages.GetAllStepsRequest.CreateBuilder(result.allStepsRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.allStepsRequest_ = value;
        }
        result.hasAllStepsRequest = true;
        return this;
      }
      public Builder ClearAllStepsRequest() {
        PrepareBuilder();
        result.hasAllStepsRequest = false;
        result.allStepsRequest_ = null;
        return this;
      }
      
      public bool HasAllStepsResponse {
       get { return result.hasAllStepsResponse; }
      }
      public global::Gauge.Messages.GetAllStepsResponse AllStepsResponse {
        get { return result.AllStepsResponse; }
        set { SetAllStepsResponse(value); }
      }
      public Builder SetAllStepsResponse(global::Gauge.Messages.GetAllStepsResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAllStepsResponse = true;
        result.allStepsResponse_ = value;
        return this;
      }
      public Builder SetAllStepsResponse(global::Gauge.Messages.GetAllStepsResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAllStepsResponse = true;
        result.allStepsResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAllStepsResponse(global::Gauge.Messages.GetAllStepsResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAllStepsResponse &&
            result.allStepsResponse_ != global::Gauge.Messages.GetAllStepsResponse.DefaultInstance) {
            result.allStepsResponse_ = global::Gauge.Messages.GetAllStepsResponse.CreateBuilder(result.allStepsResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.allStepsResponse_ = value;
        }
        result.hasAllStepsResponse = true;
        return this;
      }
      public Builder ClearAllStepsResponse() {
        PrepareBuilder();
        result.hasAllStepsResponse = false;
        result.allStepsResponse_ = null;
        return this;
      }
      
      public bool HasAllSpecsRequest {
       get { return result.hasAllSpecsRequest; }
      }
      public global::Gauge.Messages.GetAllSpecsRequest AllSpecsRequest {
        get { return result.AllSpecsRequest; }
        set { SetAllSpecsRequest(value); }
      }
      public Builder SetAllSpecsRequest(global::Gauge.Messages.GetAllSpecsRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAllSpecsRequest = true;
        result.allSpecsRequest_ = value;
        return this;
      }
      public Builder SetAllSpecsRequest(global::Gauge.Messages.GetAllSpecsRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAllSpecsRequest = true;
        result.allSpecsRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAllSpecsRequest(global::Gauge.Messages.GetAllSpecsRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAllSpecsRequest &&
            result.allSpecsRequest_ != global::Gauge.Messages.GetAllSpecsRequest.DefaultInstance) {
            result.allSpecsRequest_ = global::Gauge.Messages.GetAllSpecsRequest.CreateBuilder(result.allSpecsRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.allSpecsRequest_ = value;
        }
        result.hasAllSpecsRequest = true;
        return this;
      }
      public Builder ClearAllSpecsRequest() {
        PrepareBuilder();
        result.hasAllSpecsRequest = false;
        result.allSpecsRequest_ = null;
        return this;
      }
      
      public bool HasAllSpecsResponse {
       get { return result.hasAllSpecsResponse; }
      }
      public global::Gauge.Messages.GetAllSpecsResponse AllSpecsResponse {
        get { return result.AllSpecsResponse; }
        set { SetAllSpecsResponse(value); }
      }
      public Builder SetAllSpecsResponse(global::Gauge.Messages.GetAllSpecsResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAllSpecsResponse = true;
        result.allSpecsResponse_ = value;
        return this;
      }
      public Builder SetAllSpecsResponse(global::Gauge.Messages.GetAllSpecsResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAllSpecsResponse = true;
        result.allSpecsResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAllSpecsResponse(global::Gauge.Messages.GetAllSpecsResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAllSpecsResponse &&
            result.allSpecsResponse_ != global::Gauge.Messages.GetAllSpecsResponse.DefaultInstance) {
            result.allSpecsResponse_ = global::Gauge.Messages.GetAllSpecsResponse.CreateBuilder(result.allSpecsResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.allSpecsResponse_ = value;
        }
        result.hasAllSpecsResponse = true;
        return this;
      }
      public Builder ClearAllSpecsResponse() {
        PrepareBuilder();
        result.hasAllSpecsResponse = false;
        result.allSpecsResponse_ = null;
        return this;
      }
      
      public bool HasStepValueRequest {
       get { return result.hasStepValueRequest; }
      }
      public global::Gauge.Messages.GetStepValueRequest StepValueRequest {
        get { return result.StepValueRequest; }
        set { SetStepValueRequest(value); }
      }
      public Builder SetStepValueRequest(global::Gauge.Messages.GetStepValueRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStepValueRequest = true;
        result.stepValueRequest_ = value;
        return this;
      }
      public Builder SetStepValueRequest(global::Gauge.Messages.GetStepValueRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStepValueRequest = true;
        result.stepValueRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStepValueRequest(global::Gauge.Messages.GetStepValueRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStepValueRequest &&
            result.stepValueRequest_ != global::Gauge.Messages.GetStepValueRequest.DefaultInstance) {
            result.stepValueRequest_ = global::Gauge.Messages.GetStepValueRequest.CreateBuilder(result.stepValueRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.stepValueRequest_ = value;
        }
        result.hasStepValueRequest = true;
        return this;
      }
      public Builder ClearStepValueRequest() {
        PrepareBuilder();
        result.hasStepValueRequest = false;
        result.stepValueRequest_ = null;
        return this;
      }
      
      public bool HasStepValueResponse {
       get { return result.hasStepValueResponse; }
      }
      public global::Gauge.Messages.GetStepValueResponse StepValueResponse {
        get { return result.StepValueResponse; }
        set { SetStepValueResponse(value); }
      }
      public Builder SetStepValueResponse(global::Gauge.Messages.GetStepValueResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStepValueResponse = true;
        result.stepValueResponse_ = value;
        return this;
      }
      public Builder SetStepValueResponse(global::Gauge.Messages.GetStepValueResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStepValueResponse = true;
        result.stepValueResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStepValueResponse(global::Gauge.Messages.GetStepValueResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStepValueResponse &&
            result.stepValueResponse_ != global::Gauge.Messages.GetStepValueResponse.DefaultInstance) {
            result.stepValueResponse_ = global::Gauge.Messages.GetStepValueResponse.CreateBuilder(result.stepValueResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.stepValueResponse_ = value;
        }
        result.hasStepValueResponse = true;
        return this;
      }
      public Builder ClearStepValueResponse() {
        PrepareBuilder();
        result.hasStepValueResponse = false;
        result.stepValueResponse_ = null;
        return this;
      }
      
      public bool HasLibPathRequest {
       get { return result.hasLibPathRequest; }
      }
      public global::Gauge.Messages.GetLanguagePluginLibPathRequest LibPathRequest {
        get { return result.LibPathRequest; }
        set { SetLibPathRequest(value); }
      }
      public Builder SetLibPathRequest(global::Gauge.Messages.GetLanguagePluginLibPathRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLibPathRequest = true;
        result.libPathRequest_ = value;
        return this;
      }
      public Builder SetLibPathRequest(global::Gauge.Messages.GetLanguagePluginLibPathRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLibPathRequest = true;
        result.libPathRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLibPathRequest(global::Gauge.Messages.GetLanguagePluginLibPathRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLibPathRequest &&
            result.libPathRequest_ != global::Gauge.Messages.GetLanguagePluginLibPathRequest.DefaultInstance) {
            result.libPathRequest_ = global::Gauge.Messages.GetLanguagePluginLibPathRequest.CreateBuilder(result.libPathRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.libPathRequest_ = value;
        }
        result.hasLibPathRequest = true;
        return this;
      }
      public Builder ClearLibPathRequest() {
        PrepareBuilder();
        result.hasLibPathRequest = false;
        result.libPathRequest_ = null;
        return this;
      }
      
      public bool HasLibPathResponse {
       get { return result.hasLibPathResponse; }
      }
      public global::Gauge.Messages.GetLanguagePluginLibPathResponse LibPathResponse {
        get { return result.LibPathResponse; }
        set { SetLibPathResponse(value); }
      }
      public Builder SetLibPathResponse(global::Gauge.Messages.GetLanguagePluginLibPathResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLibPathResponse = true;
        result.libPathResponse_ = value;
        return this;
      }
      public Builder SetLibPathResponse(global::Gauge.Messages.GetLanguagePluginLibPathResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLibPathResponse = true;
        result.libPathResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLibPathResponse(global::Gauge.Messages.GetLanguagePluginLibPathResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLibPathResponse &&
            result.libPathResponse_ != global::Gauge.Messages.GetLanguagePluginLibPathResponse.DefaultInstance) {
            result.libPathResponse_ = global::Gauge.Messages.GetLanguagePluginLibPathResponse.CreateBuilder(result.libPathResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.libPathResponse_ = value;
        }
        result.hasLibPathResponse = true;
        return this;
      }
      public Builder ClearLibPathResponse() {
        PrepareBuilder();
        result.hasLibPathResponse = false;
        result.libPathResponse_ = null;
        return this;
      }
      
      public bool HasError {
       get { return result.hasError; }
      }
      public global::Gauge.Messages.ErrorResponse Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(global::Gauge.Messages.ErrorResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder SetError(global::Gauge.Messages.ErrorResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = builderForValue.Build();
        return this;
      }
      public Builder MergeError(global::Gauge.Messages.ErrorResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasError &&
            result.error_ != global::Gauge.Messages.ErrorResponse.DefaultInstance) {
            result.error_ = global::Gauge.Messages.ErrorResponse.CreateBuilder(result.error_).MergeFrom(value).BuildPartial();
        } else {
          result.error_ = value;
        }
        result.hasError = true;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = null;
        return this;
      }
      
      public bool HasAllConceptsRequest {
       get { return result.hasAllConceptsRequest; }
      }
      public global::Gauge.Messages.GetAllConceptsRequest AllConceptsRequest {
        get { return result.AllConceptsRequest; }
        set { SetAllConceptsRequest(value); }
      }
      public Builder SetAllConceptsRequest(global::Gauge.Messages.GetAllConceptsRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAllConceptsRequest = true;
        result.allConceptsRequest_ = value;
        return this;
      }
      public Builder SetAllConceptsRequest(global::Gauge.Messages.GetAllConceptsRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAllConceptsRequest = true;
        result.allConceptsRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAllConceptsRequest(global::Gauge.Messages.GetAllConceptsRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAllConceptsRequest &&
            result.allConceptsRequest_ != global::Gauge.Messages.GetAllConceptsRequest.DefaultInstance) {
            result.allConceptsRequest_ = global::Gauge.Messages.GetAllConceptsRequest.CreateBuilder(result.allConceptsRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.allConceptsRequest_ = value;
        }
        result.hasAllConceptsRequest = true;
        return this;
      }
      public Builder ClearAllConceptsRequest() {
        PrepareBuilder();
        result.hasAllConceptsRequest = false;
        result.allConceptsRequest_ = null;
        return this;
      }
      
      public bool HasAllConceptsResponse {
       get { return result.hasAllConceptsResponse; }
      }
      public global::Gauge.Messages.GetAllConceptsResponse AllConceptsResponse {
        get { return result.AllConceptsResponse; }
        set { SetAllConceptsResponse(value); }
      }
      public Builder SetAllConceptsResponse(global::Gauge.Messages.GetAllConceptsResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAllConceptsResponse = true;
        result.allConceptsResponse_ = value;
        return this;
      }
      public Builder SetAllConceptsResponse(global::Gauge.Messages.GetAllConceptsResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAllConceptsResponse = true;
        result.allConceptsResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAllConceptsResponse(global::Gauge.Messages.GetAllConceptsResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAllConceptsResponse &&
            result.allConceptsResponse_ != global::Gauge.Messages.GetAllConceptsResponse.DefaultInstance) {
            result.allConceptsResponse_ = global::Gauge.Messages.GetAllConceptsResponse.CreateBuilder(result.allConceptsResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.allConceptsResponse_ = value;
        }
        result.hasAllConceptsResponse = true;
        return this;
      }
      public Builder ClearAllConceptsResponse() {
        PrepareBuilder();
        result.hasAllConceptsResponse = false;
        result.allConceptsResponse_ = null;
        return this;
      }
      
      public bool HasPerformRefactoringRequest {
       get { return result.hasPerformRefactoringRequest; }
      }
      public global::Gauge.Messages.PerformRefactoringRequest PerformRefactoringRequest {
        get { return result.PerformRefactoringRequest; }
        set { SetPerformRefactoringRequest(value); }
      }
      public Builder SetPerformRefactoringRequest(global::Gauge.Messages.PerformRefactoringRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPerformRefactoringRequest = true;
        result.performRefactoringRequest_ = value;
        return this;
      }
      public Builder SetPerformRefactoringRequest(global::Gauge.Messages.PerformRefactoringRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPerformRefactoringRequest = true;
        result.performRefactoringRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergePerformRefactoringRequest(global::Gauge.Messages.PerformRefactoringRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPerformRefactoringRequest &&
            result.performRefactoringRequest_ != global::Gauge.Messages.PerformRefactoringRequest.DefaultInstance) {
            result.performRefactoringRequest_ = global::Gauge.Messages.PerformRefactoringRequest.CreateBuilder(result.performRefactoringRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.performRefactoringRequest_ = value;
        }
        result.hasPerformRefactoringRequest = true;
        return this;
      }
      public Builder ClearPerformRefactoringRequest() {
        PrepareBuilder();
        result.hasPerformRefactoringRequest = false;
        result.performRefactoringRequest_ = null;
        return this;
      }
      
      public bool HasPerformRefactoringResponse {
       get { return result.hasPerformRefactoringResponse; }
      }
      public global::Gauge.Messages.PerformRefactoringResponse PerformRefactoringResponse {
        get { return result.PerformRefactoringResponse; }
        set { SetPerformRefactoringResponse(value); }
      }
      public Builder SetPerformRefactoringResponse(global::Gauge.Messages.PerformRefactoringResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPerformRefactoringResponse = true;
        result.performRefactoringResponse_ = value;
        return this;
      }
      public Builder SetPerformRefactoringResponse(global::Gauge.Messages.PerformRefactoringResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPerformRefactoringResponse = true;
        result.performRefactoringResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergePerformRefactoringResponse(global::Gauge.Messages.PerformRefactoringResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPerformRefactoringResponse &&
            result.performRefactoringResponse_ != global::Gauge.Messages.PerformRefactoringResponse.DefaultInstance) {
            result.performRefactoringResponse_ = global::Gauge.Messages.PerformRefactoringResponse.CreateBuilder(result.performRefactoringResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.performRefactoringResponse_ = value;
        }
        result.hasPerformRefactoringResponse = true;
        return this;
      }
      public Builder ClearPerformRefactoringResponse() {
        PrepareBuilder();
        result.hasPerformRefactoringResponse = false;
        result.performRefactoringResponse_ = null;
        return this;
      }
      
      public bool HasExtractConceptRequest {
       get { return result.hasExtractConceptRequest; }
      }
      public global::Gauge.Messages.ExtractConceptRequest ExtractConceptRequest {
        get { return result.ExtractConceptRequest; }
        set { SetExtractConceptRequest(value); }
      }
      public Builder SetExtractConceptRequest(global::Gauge.Messages.ExtractConceptRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtractConceptRequest = true;
        result.extractConceptRequest_ = value;
        return this;
      }
      public Builder SetExtractConceptRequest(global::Gauge.Messages.ExtractConceptRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExtractConceptRequest = true;
        result.extractConceptRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExtractConceptRequest(global::Gauge.Messages.ExtractConceptRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExtractConceptRequest &&
            result.extractConceptRequest_ != global::Gauge.Messages.ExtractConceptRequest.DefaultInstance) {
            result.extractConceptRequest_ = global::Gauge.Messages.ExtractConceptRequest.CreateBuilder(result.extractConceptRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.extractConceptRequest_ = value;
        }
        result.hasExtractConceptRequest = true;
        return this;
      }
      public Builder ClearExtractConceptRequest() {
        PrepareBuilder();
        result.hasExtractConceptRequest = false;
        result.extractConceptRequest_ = null;
        return this;
      }
      
      public bool HasExtractConceptResponse {
       get { return result.hasExtractConceptResponse; }
      }
      public global::Gauge.Messages.ExtractConceptResponse ExtractConceptResponse {
        get { return result.ExtractConceptResponse; }
        set { SetExtractConceptResponse(value); }
      }
      public Builder SetExtractConceptResponse(global::Gauge.Messages.ExtractConceptResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtractConceptResponse = true;
        result.extractConceptResponse_ = value;
        return this;
      }
      public Builder SetExtractConceptResponse(global::Gauge.Messages.ExtractConceptResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExtractConceptResponse = true;
        result.extractConceptResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExtractConceptResponse(global::Gauge.Messages.ExtractConceptResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExtractConceptResponse &&
            result.extractConceptResponse_ != global::Gauge.Messages.ExtractConceptResponse.DefaultInstance) {
            result.extractConceptResponse_ = global::Gauge.Messages.ExtractConceptResponse.CreateBuilder(result.extractConceptResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.extractConceptResponse_ = value;
        }
        result.hasExtractConceptResponse = true;
        return this;
      }
      public Builder ClearExtractConceptResponse() {
        PrepareBuilder();
        result.hasExtractConceptResponse = false;
        result.extractConceptResponse_ = null;
        return this;
      }
    }
    static APIMessage() {
      object.ReferenceEquals(global::Gauge.Messages.Api.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
